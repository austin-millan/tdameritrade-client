/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DestinationExchange the model 'DestinationExchange'
type DestinationExchange string

// List of DestinationExchange
const (
	DESTINATIONEXCHANGE_INET DestinationExchange = "INET"
	DESTINATIONEXCHANGE_ECN_ARCA DestinationExchange = "ECN_ARCA"
	DESTINATIONEXCHANGE_CBOE DestinationExchange = "CBOE"
	DESTINATIONEXCHANGE_AMEX DestinationExchange = "AMEX"
	DESTINATIONEXCHANGE_PHLX DestinationExchange = "PHLX"
	DESTINATIONEXCHANGE_ISE DestinationExchange = "ISE"
	DESTINATIONEXCHANGE_BOX DestinationExchange = "BOX"
	DESTINATIONEXCHANGE_NYSE DestinationExchange = "NYSE"
	DESTINATIONEXCHANGE_NASDAQ DestinationExchange = "NASDAQ"
	DESTINATIONEXCHANGE_BATS DestinationExchange = "BATS"
	DESTINATIONEXCHANGE_C2 DestinationExchange = "C2"
	DESTINATIONEXCHANGE_AUTO DestinationExchange = "AUTO"
)

func (v *DestinationExchange) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DestinationExchange(value)
	for _, existing := range []DestinationExchange{ "INET", "ECN_ARCA", "CBOE", "AMEX", "PHLX", "ISE", "BOX", "NYSE", "NASDAQ", "BATS", "C2", "AUTO",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DestinationExchange", value)
}

// Ptr returns reference to DestinationExchange value
func (v DestinationExchange) Ptr() *DestinationExchange {
	return &v
}

type NullableDestinationExchange struct {
	value *DestinationExchange
	isSet bool
}

func (v NullableDestinationExchange) Get() *DestinationExchange {
	return v.value
}

func (v *NullableDestinationExchange) Set(val *DestinationExchange) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationExchange) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationExchange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationExchange(val *DestinationExchange) *NullableDestinationExchange {
	return &NullableDestinationExchange{value: val, isSet: true}
}

func (v NullableDestinationExchange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationExchange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

