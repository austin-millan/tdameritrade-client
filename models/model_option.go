/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Option struct for Option
type Option struct {
	AssetType *AssetType `json:"assetType,omitempty"`
	Cusip *string `json:"cusip,omitempty"`
	Description *string `json:"description,omitempty"`
	OptionDeliverables *[]OptionOptionDeliverables `json:"optionDeliverables,omitempty"`
	OptionMultiplier *float32 `json:"optionMultiplier,omitempty"`
	PutCall *PutOrCall `json:"putCall,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Type *OptionType `json:"type,omitempty"`
	UnderlyingSymbol *string `json:"underlyingSymbol,omitempty"`
}

// NewOption instantiates a new Option object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOption() *Option {
	this := Option{}
	return &this
}

// NewOptionWithDefaults instantiates a new Option object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionWithDefaults() *Option {
	this := Option{}
	return &this
}

// GetAssetType returns the AssetType field value if set, zero value otherwise.
func (o *Option) GetAssetType() AssetType {
	if o == nil || o.AssetType == nil {
		var ret AssetType
		return ret
	}
	return *o.AssetType
}

// GetAssetTypeOk returns a tuple with the AssetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Option) GetAssetTypeOk() (*AssetType, bool) {
	if o == nil || o.AssetType == nil {
		return nil, false
	}
	return o.AssetType, true
}

// HasAssetType returns a boolean if a field has been set.
func (o *Option) HasAssetType() bool {
	if o != nil && o.AssetType != nil {
		return true
	}

	return false
}

// SetAssetType gets a reference to the given AssetType and assigns it to the AssetType field.
func (o *Option) SetAssetType(v AssetType) {
	o.AssetType = &v
}

// GetCusip returns the Cusip field value if set, zero value otherwise.
func (o *Option) GetCusip() string {
	if o == nil || o.Cusip == nil {
		var ret string
		return ret
	}
	return *o.Cusip
}

// GetCusipOk returns a tuple with the Cusip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Option) GetCusipOk() (*string, bool) {
	if o == nil || o.Cusip == nil {
		return nil, false
	}
	return o.Cusip, true
}

// HasCusip returns a boolean if a field has been set.
func (o *Option) HasCusip() bool {
	if o != nil && o.Cusip != nil {
		return true
	}

	return false
}

// SetCusip gets a reference to the given string and assigns it to the Cusip field.
func (o *Option) SetCusip(v string) {
	o.Cusip = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Option) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Option) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Option) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Option) SetDescription(v string) {
	o.Description = &v
}

// GetOptionDeliverables returns the OptionDeliverables field value if set, zero value otherwise.
func (o *Option) GetOptionDeliverables() []OptionOptionDeliverables {
	if o == nil || o.OptionDeliverables == nil {
		var ret []OptionOptionDeliverables
		return ret
	}
	return *o.OptionDeliverables
}

// GetOptionDeliverablesOk returns a tuple with the OptionDeliverables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Option) GetOptionDeliverablesOk() (*[]OptionOptionDeliverables, bool) {
	if o == nil || o.OptionDeliverables == nil {
		return nil, false
	}
	return o.OptionDeliverables, true
}

// HasOptionDeliverables returns a boolean if a field has been set.
func (o *Option) HasOptionDeliverables() bool {
	if o != nil && o.OptionDeliverables != nil {
		return true
	}

	return false
}

// SetOptionDeliverables gets a reference to the given []OptionOptionDeliverables and assigns it to the OptionDeliverables field.
func (o *Option) SetOptionDeliverables(v []OptionOptionDeliverables) {
	o.OptionDeliverables = &v
}

// GetOptionMultiplier returns the OptionMultiplier field value if set, zero value otherwise.
func (o *Option) GetOptionMultiplier() float32 {
	if o == nil || o.OptionMultiplier == nil {
		var ret float32
		return ret
	}
	return *o.OptionMultiplier
}

// GetOptionMultiplierOk returns a tuple with the OptionMultiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Option) GetOptionMultiplierOk() (*float32, bool) {
	if o == nil || o.OptionMultiplier == nil {
		return nil, false
	}
	return o.OptionMultiplier, true
}

// HasOptionMultiplier returns a boolean if a field has been set.
func (o *Option) HasOptionMultiplier() bool {
	if o != nil && o.OptionMultiplier != nil {
		return true
	}

	return false
}

// SetOptionMultiplier gets a reference to the given float32 and assigns it to the OptionMultiplier field.
func (o *Option) SetOptionMultiplier(v float32) {
	o.OptionMultiplier = &v
}

// GetPutCall returns the PutCall field value if set, zero value otherwise.
func (o *Option) GetPutCall() PutOrCall {
	if o == nil || o.PutCall == nil {
		var ret PutOrCall
		return ret
	}
	return *o.PutCall
}

// GetPutCallOk returns a tuple with the PutCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Option) GetPutCallOk() (*PutOrCall, bool) {
	if o == nil || o.PutCall == nil {
		return nil, false
	}
	return o.PutCall, true
}

// HasPutCall returns a boolean if a field has been set.
func (o *Option) HasPutCall() bool {
	if o != nil && o.PutCall != nil {
		return true
	}

	return false
}

// SetPutCall gets a reference to the given PutOrCall and assigns it to the PutCall field.
func (o *Option) SetPutCall(v PutOrCall) {
	o.PutCall = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Option) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Option) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Option) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Option) SetSymbol(v string) {
	o.Symbol = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Option) GetType() OptionType {
	if o == nil || o.Type == nil {
		var ret OptionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Option) GetTypeOk() (*OptionType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Option) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given OptionType and assigns it to the Type field.
func (o *Option) SetType(v OptionType) {
	o.Type = &v
}

// GetUnderlyingSymbol returns the UnderlyingSymbol field value if set, zero value otherwise.
func (o *Option) GetUnderlyingSymbol() string {
	if o == nil || o.UnderlyingSymbol == nil {
		var ret string
		return ret
	}
	return *o.UnderlyingSymbol
}

// GetUnderlyingSymbolOk returns a tuple with the UnderlyingSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Option) GetUnderlyingSymbolOk() (*string, bool) {
	if o == nil || o.UnderlyingSymbol == nil {
		return nil, false
	}
	return o.UnderlyingSymbol, true
}

// HasUnderlyingSymbol returns a boolean if a field has been set.
func (o *Option) HasUnderlyingSymbol() bool {
	if o != nil && o.UnderlyingSymbol != nil {
		return true
	}

	return false
}

// SetUnderlyingSymbol gets a reference to the given string and assigns it to the UnderlyingSymbol field.
func (o *Option) SetUnderlyingSymbol(v string) {
	o.UnderlyingSymbol = &v
}

func (o Option) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssetType != nil {
		toSerialize["assetType"] = o.AssetType
	}
	if o.Cusip != nil {
		toSerialize["cusip"] = o.Cusip
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.OptionDeliverables != nil {
		toSerialize["optionDeliverables"] = o.OptionDeliverables
	}
	if o.OptionMultiplier != nil {
		toSerialize["optionMultiplier"] = o.OptionMultiplier
	}
	if o.PutCall != nil {
		toSerialize["putCall"] = o.PutCall
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.UnderlyingSymbol != nil {
		toSerialize["underlyingSymbol"] = o.UnderlyingSymbol
	}
	return json.Marshal(toSerialize)
}

type NullableOption struct {
	value *Option
	isSet bool
}

func (v NullableOption) Get() *Option {
	return v.value
}

func (v *NullableOption) Set(val *Option) {
	v.value = val
	v.isSet = true
}

func (v NullableOption) IsSet() bool {
	return v.isSet
}

func (v *NullableOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOption(val *Option) *NullableOption {
	return &NullableOption{value: val, isSet: true}
}

func (v NullableOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


