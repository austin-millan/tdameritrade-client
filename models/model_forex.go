/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Forex struct for Forex
type Forex struct {
	Var52WkHighInDouble *float32 `json:"52WkHighInDouble,omitempty"`
	Var52WkLowInDouble *float32 `json:"52WkLowInDouble,omitempty"`
	AskPriceInDouble *float32 `json:"askPriceInDouble,omitempty"`
	BidPriceInDouble *float32 `json:"bidPriceInDouble,omitempty"`
	ChangeInDouble *float32 `json:"changeInDouble,omitempty"`
	ClosePriceInDouble *float32 `json:"closePriceInDouble,omitempty"`
	Description *string `json:"description,omitempty"`
	Digits *float32 `json:"digits,omitempty"`
	Exchange *string `json:"exchange,omitempty"`
	ExchangeName *string `json:"exchangeName,omitempty"`
	HighPriceInDouble *float32 `json:"highPriceInDouble,omitempty"`
	IsTradable *bool `json:"isTradable,omitempty"`
	LastPriceInDouble *float32 `json:"lastPriceInDouble,omitempty"`
	LowPriceInDouble *float32 `json:"lowPriceInDouble,omitempty"`
	Mark *float32 `json:"mark,omitempty"`
	MarketMaker *string `json:"marketMaker,omitempty"`
	OpenPriceInDouble *float32 `json:"openPriceInDouble,omitempty"`
	PercentChange *float32 `json:"percentChange,omitempty"`
	Product *string `json:"product,omitempty"`
	SecurityStatus *string `json:"securityStatus,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Tick *float32 `json:"tick,omitempty"`
	TickAmount *float32 `json:"tickAmount,omitempty"`
	TradingHours *string `json:"tradingHours,omitempty"`
}

// NewForex instantiates a new Forex object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForex() *Forex {
	this := Forex{}
	return &this
}

// NewForexWithDefaults instantiates a new Forex object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForexWithDefaults() *Forex {
	this := Forex{}
	return &this
}

// GetVar52WkHighInDouble returns the Var52WkHighInDouble field value if set, zero value otherwise.
func (o *Forex) GetVar52WkHighInDouble() float32 {
	if o == nil || o.Var52WkHighInDouble == nil {
		var ret float32
		return ret
	}
	return *o.Var52WkHighInDouble
}

// GetVar52WkHighInDoubleOk returns a tuple with the Var52WkHighInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetVar52WkHighInDoubleOk() (*float32, bool) {
	if o == nil || o.Var52WkHighInDouble == nil {
		return nil, false
	}
	return o.Var52WkHighInDouble, true
}

// HasVar52WkHighInDouble returns a boolean if a field has been set.
func (o *Forex) HasVar52WkHighInDouble() bool {
	if o != nil && o.Var52WkHighInDouble != nil {
		return true
	}

	return false
}

// SetVar52WkHighInDouble gets a reference to the given float32 and assigns it to the Var52WkHighInDouble field.
func (o *Forex) SetVar52WkHighInDouble(v float32) {
	o.Var52WkHighInDouble = &v
}

// GetVar52WkLowInDouble returns the Var52WkLowInDouble field value if set, zero value otherwise.
func (o *Forex) GetVar52WkLowInDouble() float32 {
	if o == nil || o.Var52WkLowInDouble == nil {
		var ret float32
		return ret
	}
	return *o.Var52WkLowInDouble
}

// GetVar52WkLowInDoubleOk returns a tuple with the Var52WkLowInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetVar52WkLowInDoubleOk() (*float32, bool) {
	if o == nil || o.Var52WkLowInDouble == nil {
		return nil, false
	}
	return o.Var52WkLowInDouble, true
}

// HasVar52WkLowInDouble returns a boolean if a field has been set.
func (o *Forex) HasVar52WkLowInDouble() bool {
	if o != nil && o.Var52WkLowInDouble != nil {
		return true
	}

	return false
}

// SetVar52WkLowInDouble gets a reference to the given float32 and assigns it to the Var52WkLowInDouble field.
func (o *Forex) SetVar52WkLowInDouble(v float32) {
	o.Var52WkLowInDouble = &v
}

// GetAskPriceInDouble returns the AskPriceInDouble field value if set, zero value otherwise.
func (o *Forex) GetAskPriceInDouble() float32 {
	if o == nil || o.AskPriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.AskPriceInDouble
}

// GetAskPriceInDoubleOk returns a tuple with the AskPriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetAskPriceInDoubleOk() (*float32, bool) {
	if o == nil || o.AskPriceInDouble == nil {
		return nil, false
	}
	return o.AskPriceInDouble, true
}

// HasAskPriceInDouble returns a boolean if a field has been set.
func (o *Forex) HasAskPriceInDouble() bool {
	if o != nil && o.AskPriceInDouble != nil {
		return true
	}

	return false
}

// SetAskPriceInDouble gets a reference to the given float32 and assigns it to the AskPriceInDouble field.
func (o *Forex) SetAskPriceInDouble(v float32) {
	o.AskPriceInDouble = &v
}

// GetBidPriceInDouble returns the BidPriceInDouble field value if set, zero value otherwise.
func (o *Forex) GetBidPriceInDouble() float32 {
	if o == nil || o.BidPriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.BidPriceInDouble
}

// GetBidPriceInDoubleOk returns a tuple with the BidPriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetBidPriceInDoubleOk() (*float32, bool) {
	if o == nil || o.BidPriceInDouble == nil {
		return nil, false
	}
	return o.BidPriceInDouble, true
}

// HasBidPriceInDouble returns a boolean if a field has been set.
func (o *Forex) HasBidPriceInDouble() bool {
	if o != nil && o.BidPriceInDouble != nil {
		return true
	}

	return false
}

// SetBidPriceInDouble gets a reference to the given float32 and assigns it to the BidPriceInDouble field.
func (o *Forex) SetBidPriceInDouble(v float32) {
	o.BidPriceInDouble = &v
}

// GetChangeInDouble returns the ChangeInDouble field value if set, zero value otherwise.
func (o *Forex) GetChangeInDouble() float32 {
	if o == nil || o.ChangeInDouble == nil {
		var ret float32
		return ret
	}
	return *o.ChangeInDouble
}

// GetChangeInDoubleOk returns a tuple with the ChangeInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetChangeInDoubleOk() (*float32, bool) {
	if o == nil || o.ChangeInDouble == nil {
		return nil, false
	}
	return o.ChangeInDouble, true
}

// HasChangeInDouble returns a boolean if a field has been set.
func (o *Forex) HasChangeInDouble() bool {
	if o != nil && o.ChangeInDouble != nil {
		return true
	}

	return false
}

// SetChangeInDouble gets a reference to the given float32 and assigns it to the ChangeInDouble field.
func (o *Forex) SetChangeInDouble(v float32) {
	o.ChangeInDouble = &v
}

// GetClosePriceInDouble returns the ClosePriceInDouble field value if set, zero value otherwise.
func (o *Forex) GetClosePriceInDouble() float32 {
	if o == nil || o.ClosePriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.ClosePriceInDouble
}

// GetClosePriceInDoubleOk returns a tuple with the ClosePriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetClosePriceInDoubleOk() (*float32, bool) {
	if o == nil || o.ClosePriceInDouble == nil {
		return nil, false
	}
	return o.ClosePriceInDouble, true
}

// HasClosePriceInDouble returns a boolean if a field has been set.
func (o *Forex) HasClosePriceInDouble() bool {
	if o != nil && o.ClosePriceInDouble != nil {
		return true
	}

	return false
}

// SetClosePriceInDouble gets a reference to the given float32 and assigns it to the ClosePriceInDouble field.
func (o *Forex) SetClosePriceInDouble(v float32) {
	o.ClosePriceInDouble = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Forex) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Forex) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Forex) SetDescription(v string) {
	o.Description = &v
}

// GetDigits returns the Digits field value if set, zero value otherwise.
func (o *Forex) GetDigits() float32 {
	if o == nil || o.Digits == nil {
		var ret float32
		return ret
	}
	return *o.Digits
}

// GetDigitsOk returns a tuple with the Digits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetDigitsOk() (*float32, bool) {
	if o == nil || o.Digits == nil {
		return nil, false
	}
	return o.Digits, true
}

// HasDigits returns a boolean if a field has been set.
func (o *Forex) HasDigits() bool {
	if o != nil && o.Digits != nil {
		return true
	}

	return false
}

// SetDigits gets a reference to the given float32 and assigns it to the Digits field.
func (o *Forex) SetDigits(v float32) {
	o.Digits = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *Forex) GetExchange() string {
	if o == nil || o.Exchange == nil {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetExchangeOk() (*string, bool) {
	if o == nil || o.Exchange == nil {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *Forex) HasExchange() bool {
	if o != nil && o.Exchange != nil {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *Forex) SetExchange(v string) {
	o.Exchange = &v
}

// GetExchangeName returns the ExchangeName field value if set, zero value otherwise.
func (o *Forex) GetExchangeName() string {
	if o == nil || o.ExchangeName == nil {
		var ret string
		return ret
	}
	return *o.ExchangeName
}

// GetExchangeNameOk returns a tuple with the ExchangeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetExchangeNameOk() (*string, bool) {
	if o == nil || o.ExchangeName == nil {
		return nil, false
	}
	return o.ExchangeName, true
}

// HasExchangeName returns a boolean if a field has been set.
func (o *Forex) HasExchangeName() bool {
	if o != nil && o.ExchangeName != nil {
		return true
	}

	return false
}

// SetExchangeName gets a reference to the given string and assigns it to the ExchangeName field.
func (o *Forex) SetExchangeName(v string) {
	o.ExchangeName = &v
}

// GetHighPriceInDouble returns the HighPriceInDouble field value if set, zero value otherwise.
func (o *Forex) GetHighPriceInDouble() float32 {
	if o == nil || o.HighPriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.HighPriceInDouble
}

// GetHighPriceInDoubleOk returns a tuple with the HighPriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetHighPriceInDoubleOk() (*float32, bool) {
	if o == nil || o.HighPriceInDouble == nil {
		return nil, false
	}
	return o.HighPriceInDouble, true
}

// HasHighPriceInDouble returns a boolean if a field has been set.
func (o *Forex) HasHighPriceInDouble() bool {
	if o != nil && o.HighPriceInDouble != nil {
		return true
	}

	return false
}

// SetHighPriceInDouble gets a reference to the given float32 and assigns it to the HighPriceInDouble field.
func (o *Forex) SetHighPriceInDouble(v float32) {
	o.HighPriceInDouble = &v
}

// GetIsTradable returns the IsTradable field value if set, zero value otherwise.
func (o *Forex) GetIsTradable() bool {
	if o == nil || o.IsTradable == nil {
		var ret bool
		return ret
	}
	return *o.IsTradable
}

// GetIsTradableOk returns a tuple with the IsTradable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetIsTradableOk() (*bool, bool) {
	if o == nil || o.IsTradable == nil {
		return nil, false
	}
	return o.IsTradable, true
}

// HasIsTradable returns a boolean if a field has been set.
func (o *Forex) HasIsTradable() bool {
	if o != nil && o.IsTradable != nil {
		return true
	}

	return false
}

// SetIsTradable gets a reference to the given bool and assigns it to the IsTradable field.
func (o *Forex) SetIsTradable(v bool) {
	o.IsTradable = &v
}

// GetLastPriceInDouble returns the LastPriceInDouble field value if set, zero value otherwise.
func (o *Forex) GetLastPriceInDouble() float32 {
	if o == nil || o.LastPriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.LastPriceInDouble
}

// GetLastPriceInDoubleOk returns a tuple with the LastPriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetLastPriceInDoubleOk() (*float32, bool) {
	if o == nil || o.LastPriceInDouble == nil {
		return nil, false
	}
	return o.LastPriceInDouble, true
}

// HasLastPriceInDouble returns a boolean if a field has been set.
func (o *Forex) HasLastPriceInDouble() bool {
	if o != nil && o.LastPriceInDouble != nil {
		return true
	}

	return false
}

// SetLastPriceInDouble gets a reference to the given float32 and assigns it to the LastPriceInDouble field.
func (o *Forex) SetLastPriceInDouble(v float32) {
	o.LastPriceInDouble = &v
}

// GetLowPriceInDouble returns the LowPriceInDouble field value if set, zero value otherwise.
func (o *Forex) GetLowPriceInDouble() float32 {
	if o == nil || o.LowPriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.LowPriceInDouble
}

// GetLowPriceInDoubleOk returns a tuple with the LowPriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetLowPriceInDoubleOk() (*float32, bool) {
	if o == nil || o.LowPriceInDouble == nil {
		return nil, false
	}
	return o.LowPriceInDouble, true
}

// HasLowPriceInDouble returns a boolean if a field has been set.
func (o *Forex) HasLowPriceInDouble() bool {
	if o != nil && o.LowPriceInDouble != nil {
		return true
	}

	return false
}

// SetLowPriceInDouble gets a reference to the given float32 and assigns it to the LowPriceInDouble field.
func (o *Forex) SetLowPriceInDouble(v float32) {
	o.LowPriceInDouble = &v
}

// GetMark returns the Mark field value if set, zero value otherwise.
func (o *Forex) GetMark() float32 {
	if o == nil || o.Mark == nil {
		var ret float32
		return ret
	}
	return *o.Mark
}

// GetMarkOk returns a tuple with the Mark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetMarkOk() (*float32, bool) {
	if o == nil || o.Mark == nil {
		return nil, false
	}
	return o.Mark, true
}

// HasMark returns a boolean if a field has been set.
func (o *Forex) HasMark() bool {
	if o != nil && o.Mark != nil {
		return true
	}

	return false
}

// SetMark gets a reference to the given float32 and assigns it to the Mark field.
func (o *Forex) SetMark(v float32) {
	o.Mark = &v
}

// GetMarketMaker returns the MarketMaker field value if set, zero value otherwise.
func (o *Forex) GetMarketMaker() string {
	if o == nil || o.MarketMaker == nil {
		var ret string
		return ret
	}
	return *o.MarketMaker
}

// GetMarketMakerOk returns a tuple with the MarketMaker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetMarketMakerOk() (*string, bool) {
	if o == nil || o.MarketMaker == nil {
		return nil, false
	}
	return o.MarketMaker, true
}

// HasMarketMaker returns a boolean if a field has been set.
func (o *Forex) HasMarketMaker() bool {
	if o != nil && o.MarketMaker != nil {
		return true
	}

	return false
}

// SetMarketMaker gets a reference to the given string and assigns it to the MarketMaker field.
func (o *Forex) SetMarketMaker(v string) {
	o.MarketMaker = &v
}

// GetOpenPriceInDouble returns the OpenPriceInDouble field value if set, zero value otherwise.
func (o *Forex) GetOpenPriceInDouble() float32 {
	if o == nil || o.OpenPriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.OpenPriceInDouble
}

// GetOpenPriceInDoubleOk returns a tuple with the OpenPriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetOpenPriceInDoubleOk() (*float32, bool) {
	if o == nil || o.OpenPriceInDouble == nil {
		return nil, false
	}
	return o.OpenPriceInDouble, true
}

// HasOpenPriceInDouble returns a boolean if a field has been set.
func (o *Forex) HasOpenPriceInDouble() bool {
	if o != nil && o.OpenPriceInDouble != nil {
		return true
	}

	return false
}

// SetOpenPriceInDouble gets a reference to the given float32 and assigns it to the OpenPriceInDouble field.
func (o *Forex) SetOpenPriceInDouble(v float32) {
	o.OpenPriceInDouble = &v
}

// GetPercentChange returns the PercentChange field value if set, zero value otherwise.
func (o *Forex) GetPercentChange() float32 {
	if o == nil || o.PercentChange == nil {
		var ret float32
		return ret
	}
	return *o.PercentChange
}

// GetPercentChangeOk returns a tuple with the PercentChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetPercentChangeOk() (*float32, bool) {
	if o == nil || o.PercentChange == nil {
		return nil, false
	}
	return o.PercentChange, true
}

// HasPercentChange returns a boolean if a field has been set.
func (o *Forex) HasPercentChange() bool {
	if o != nil && o.PercentChange != nil {
		return true
	}

	return false
}

// SetPercentChange gets a reference to the given float32 and assigns it to the PercentChange field.
func (o *Forex) SetPercentChange(v float32) {
	o.PercentChange = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *Forex) GetProduct() string {
	if o == nil || o.Product == nil {
		var ret string
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetProductOk() (*string, bool) {
	if o == nil || o.Product == nil {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *Forex) HasProduct() bool {
	if o != nil && o.Product != nil {
		return true
	}

	return false
}

// SetProduct gets a reference to the given string and assigns it to the Product field.
func (o *Forex) SetProduct(v string) {
	o.Product = &v
}

// GetSecurityStatus returns the SecurityStatus field value if set, zero value otherwise.
func (o *Forex) GetSecurityStatus() string {
	if o == nil || o.SecurityStatus == nil {
		var ret string
		return ret
	}
	return *o.SecurityStatus
}

// GetSecurityStatusOk returns a tuple with the SecurityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetSecurityStatusOk() (*string, bool) {
	if o == nil || o.SecurityStatus == nil {
		return nil, false
	}
	return o.SecurityStatus, true
}

// HasSecurityStatus returns a boolean if a field has been set.
func (o *Forex) HasSecurityStatus() bool {
	if o != nil && o.SecurityStatus != nil {
		return true
	}

	return false
}

// SetSecurityStatus gets a reference to the given string and assigns it to the SecurityStatus field.
func (o *Forex) SetSecurityStatus(v string) {
	o.SecurityStatus = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Forex) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Forex) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Forex) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTick returns the Tick field value if set, zero value otherwise.
func (o *Forex) GetTick() float32 {
	if o == nil || o.Tick == nil {
		var ret float32
		return ret
	}
	return *o.Tick
}

// GetTickOk returns a tuple with the Tick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetTickOk() (*float32, bool) {
	if o == nil || o.Tick == nil {
		return nil, false
	}
	return o.Tick, true
}

// HasTick returns a boolean if a field has been set.
func (o *Forex) HasTick() bool {
	if o != nil && o.Tick != nil {
		return true
	}

	return false
}

// SetTick gets a reference to the given float32 and assigns it to the Tick field.
func (o *Forex) SetTick(v float32) {
	o.Tick = &v
}

// GetTickAmount returns the TickAmount field value if set, zero value otherwise.
func (o *Forex) GetTickAmount() float32 {
	if o == nil || o.TickAmount == nil {
		var ret float32
		return ret
	}
	return *o.TickAmount
}

// GetTickAmountOk returns a tuple with the TickAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetTickAmountOk() (*float32, bool) {
	if o == nil || o.TickAmount == nil {
		return nil, false
	}
	return o.TickAmount, true
}

// HasTickAmount returns a boolean if a field has been set.
func (o *Forex) HasTickAmount() bool {
	if o != nil && o.TickAmount != nil {
		return true
	}

	return false
}

// SetTickAmount gets a reference to the given float32 and assigns it to the TickAmount field.
func (o *Forex) SetTickAmount(v float32) {
	o.TickAmount = &v
}

// GetTradingHours returns the TradingHours field value if set, zero value otherwise.
func (o *Forex) GetTradingHours() string {
	if o == nil || o.TradingHours == nil {
		var ret string
		return ret
	}
	return *o.TradingHours
}

// GetTradingHoursOk returns a tuple with the TradingHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Forex) GetTradingHoursOk() (*string, bool) {
	if o == nil || o.TradingHours == nil {
		return nil, false
	}
	return o.TradingHours, true
}

// HasTradingHours returns a boolean if a field has been set.
func (o *Forex) HasTradingHours() bool {
	if o != nil && o.TradingHours != nil {
		return true
	}

	return false
}

// SetTradingHours gets a reference to the given string and assigns it to the TradingHours field.
func (o *Forex) SetTradingHours(v string) {
	o.TradingHours = &v
}

func (o Forex) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Var52WkHighInDouble != nil {
		toSerialize["52WkHighInDouble"] = o.Var52WkHighInDouble
	}
	if o.Var52WkLowInDouble != nil {
		toSerialize["52WkLowInDouble"] = o.Var52WkLowInDouble
	}
	if o.AskPriceInDouble != nil {
		toSerialize["askPriceInDouble"] = o.AskPriceInDouble
	}
	if o.BidPriceInDouble != nil {
		toSerialize["bidPriceInDouble"] = o.BidPriceInDouble
	}
	if o.ChangeInDouble != nil {
		toSerialize["changeInDouble"] = o.ChangeInDouble
	}
	if o.ClosePriceInDouble != nil {
		toSerialize["closePriceInDouble"] = o.ClosePriceInDouble
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Digits != nil {
		toSerialize["digits"] = o.Digits
	}
	if o.Exchange != nil {
		toSerialize["exchange"] = o.Exchange
	}
	if o.ExchangeName != nil {
		toSerialize["exchangeName"] = o.ExchangeName
	}
	if o.HighPriceInDouble != nil {
		toSerialize["highPriceInDouble"] = o.HighPriceInDouble
	}
	if o.IsTradable != nil {
		toSerialize["isTradable"] = o.IsTradable
	}
	if o.LastPriceInDouble != nil {
		toSerialize["lastPriceInDouble"] = o.LastPriceInDouble
	}
	if o.LowPriceInDouble != nil {
		toSerialize["lowPriceInDouble"] = o.LowPriceInDouble
	}
	if o.Mark != nil {
		toSerialize["mark"] = o.Mark
	}
	if o.MarketMaker != nil {
		toSerialize["marketMaker"] = o.MarketMaker
	}
	if o.OpenPriceInDouble != nil {
		toSerialize["openPriceInDouble"] = o.OpenPriceInDouble
	}
	if o.PercentChange != nil {
		toSerialize["percentChange"] = o.PercentChange
	}
	if o.Product != nil {
		toSerialize["product"] = o.Product
	}
	if o.SecurityStatus != nil {
		toSerialize["securityStatus"] = o.SecurityStatus
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Tick != nil {
		toSerialize["tick"] = o.Tick
	}
	if o.TickAmount != nil {
		toSerialize["tickAmount"] = o.TickAmount
	}
	if o.TradingHours != nil {
		toSerialize["tradingHours"] = o.TradingHours
	}
	return json.Marshal(toSerialize)
}

type NullableForex struct {
	value *Forex
	isSet bool
}

func (v NullableForex) Get() *Forex {
	return v.value
}

func (v *NullableForex) Set(val *Forex) {
	v.value = val
	v.isSet = true
}

func (v NullableForex) IsSet() bool {
	return v.isSet
}

func (v *NullableForex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForex(val *Forex) *NullableForex {
	return &NullableForex{value: val, isSet: true}
}

func (v NullableForex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


