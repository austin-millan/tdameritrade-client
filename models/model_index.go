/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Index struct for Index
type Index struct {
	Var52WkHigh *float32 `json:"52WkHigh,omitempty"`
	Var52WkLow *float32 `json:"52WkLow,omitempty"`
	ClosePrice *float32 `json:"closePrice,omitempty"`
	Description *string `json:"description,omitempty"`
	Digits *float32 `json:"digits,omitempty"`
	Exchange *string `json:"exchange,omitempty"`
	ExchangeName *string `json:"exchangeName,omitempty"`
	HighPrice *float32 `json:"highPrice,omitempty"`
	LastPrice *float32 `json:"lastPrice,omitempty"`
	LowPrice *float32 `json:"lowPrice,omitempty"`
	NetChange *float32 `json:"netChange,omitempty"`
	OpenPrice *float32 `json:"openPrice,omitempty"`
	SecurityStatus *string `json:"securityStatus,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	TotalVolume *float32 `json:"totalVolume,omitempty"`
	TradeTimeInLong *float32 `json:"tradeTimeInLong,omitempty"`
}

// NewIndex instantiates a new Index object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndex() *Index {
	this := Index{}
	return &this
}

// NewIndexWithDefaults instantiates a new Index object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexWithDefaults() *Index {
	this := Index{}
	return &this
}

// GetVar52WkHigh returns the Var52WkHigh field value if set, zero value otherwise.
func (o *Index) GetVar52WkHigh() float32 {
	if o == nil || o.Var52WkHigh == nil {
		var ret float32
		return ret
	}
	return *o.Var52WkHigh
}

// GetVar52WkHighOk returns a tuple with the Var52WkHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetVar52WkHighOk() (*float32, bool) {
	if o == nil || o.Var52WkHigh == nil {
		return nil, false
	}
	return o.Var52WkHigh, true
}

// HasVar52WkHigh returns a boolean if a field has been set.
func (o *Index) HasVar52WkHigh() bool {
	if o != nil && o.Var52WkHigh != nil {
		return true
	}

	return false
}

// SetVar52WkHigh gets a reference to the given float32 and assigns it to the Var52WkHigh field.
func (o *Index) SetVar52WkHigh(v float32) {
	o.Var52WkHigh = &v
}

// GetVar52WkLow returns the Var52WkLow field value if set, zero value otherwise.
func (o *Index) GetVar52WkLow() float32 {
	if o == nil || o.Var52WkLow == nil {
		var ret float32
		return ret
	}
	return *o.Var52WkLow
}

// GetVar52WkLowOk returns a tuple with the Var52WkLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetVar52WkLowOk() (*float32, bool) {
	if o == nil || o.Var52WkLow == nil {
		return nil, false
	}
	return o.Var52WkLow, true
}

// HasVar52WkLow returns a boolean if a field has been set.
func (o *Index) HasVar52WkLow() bool {
	if o != nil && o.Var52WkLow != nil {
		return true
	}

	return false
}

// SetVar52WkLow gets a reference to the given float32 and assigns it to the Var52WkLow field.
func (o *Index) SetVar52WkLow(v float32) {
	o.Var52WkLow = &v
}

// GetClosePrice returns the ClosePrice field value if set, zero value otherwise.
func (o *Index) GetClosePrice() float32 {
	if o == nil || o.ClosePrice == nil {
		var ret float32
		return ret
	}
	return *o.ClosePrice
}

// GetClosePriceOk returns a tuple with the ClosePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetClosePriceOk() (*float32, bool) {
	if o == nil || o.ClosePrice == nil {
		return nil, false
	}
	return o.ClosePrice, true
}

// HasClosePrice returns a boolean if a field has been set.
func (o *Index) HasClosePrice() bool {
	if o != nil && o.ClosePrice != nil {
		return true
	}

	return false
}

// SetClosePrice gets a reference to the given float32 and assigns it to the ClosePrice field.
func (o *Index) SetClosePrice(v float32) {
	o.ClosePrice = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Index) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Index) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Index) SetDescription(v string) {
	o.Description = &v
}

// GetDigits returns the Digits field value if set, zero value otherwise.
func (o *Index) GetDigits() float32 {
	if o == nil || o.Digits == nil {
		var ret float32
		return ret
	}
	return *o.Digits
}

// GetDigitsOk returns a tuple with the Digits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetDigitsOk() (*float32, bool) {
	if o == nil || o.Digits == nil {
		return nil, false
	}
	return o.Digits, true
}

// HasDigits returns a boolean if a field has been set.
func (o *Index) HasDigits() bool {
	if o != nil && o.Digits != nil {
		return true
	}

	return false
}

// SetDigits gets a reference to the given float32 and assigns it to the Digits field.
func (o *Index) SetDigits(v float32) {
	o.Digits = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *Index) GetExchange() string {
	if o == nil || o.Exchange == nil {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetExchangeOk() (*string, bool) {
	if o == nil || o.Exchange == nil {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *Index) HasExchange() bool {
	if o != nil && o.Exchange != nil {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *Index) SetExchange(v string) {
	o.Exchange = &v
}

// GetExchangeName returns the ExchangeName field value if set, zero value otherwise.
func (o *Index) GetExchangeName() string {
	if o == nil || o.ExchangeName == nil {
		var ret string
		return ret
	}
	return *o.ExchangeName
}

// GetExchangeNameOk returns a tuple with the ExchangeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetExchangeNameOk() (*string, bool) {
	if o == nil || o.ExchangeName == nil {
		return nil, false
	}
	return o.ExchangeName, true
}

// HasExchangeName returns a boolean if a field has been set.
func (o *Index) HasExchangeName() bool {
	if o != nil && o.ExchangeName != nil {
		return true
	}

	return false
}

// SetExchangeName gets a reference to the given string and assigns it to the ExchangeName field.
func (o *Index) SetExchangeName(v string) {
	o.ExchangeName = &v
}

// GetHighPrice returns the HighPrice field value if set, zero value otherwise.
func (o *Index) GetHighPrice() float32 {
	if o == nil || o.HighPrice == nil {
		var ret float32
		return ret
	}
	return *o.HighPrice
}

// GetHighPriceOk returns a tuple with the HighPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetHighPriceOk() (*float32, bool) {
	if o == nil || o.HighPrice == nil {
		return nil, false
	}
	return o.HighPrice, true
}

// HasHighPrice returns a boolean if a field has been set.
func (o *Index) HasHighPrice() bool {
	if o != nil && o.HighPrice != nil {
		return true
	}

	return false
}

// SetHighPrice gets a reference to the given float32 and assigns it to the HighPrice field.
func (o *Index) SetHighPrice(v float32) {
	o.HighPrice = &v
}

// GetLastPrice returns the LastPrice field value if set, zero value otherwise.
func (o *Index) GetLastPrice() float32 {
	if o == nil || o.LastPrice == nil {
		var ret float32
		return ret
	}
	return *o.LastPrice
}

// GetLastPriceOk returns a tuple with the LastPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetLastPriceOk() (*float32, bool) {
	if o == nil || o.LastPrice == nil {
		return nil, false
	}
	return o.LastPrice, true
}

// HasLastPrice returns a boolean if a field has been set.
func (o *Index) HasLastPrice() bool {
	if o != nil && o.LastPrice != nil {
		return true
	}

	return false
}

// SetLastPrice gets a reference to the given float32 and assigns it to the LastPrice field.
func (o *Index) SetLastPrice(v float32) {
	o.LastPrice = &v
}

// GetLowPrice returns the LowPrice field value if set, zero value otherwise.
func (o *Index) GetLowPrice() float32 {
	if o == nil || o.LowPrice == nil {
		var ret float32
		return ret
	}
	return *o.LowPrice
}

// GetLowPriceOk returns a tuple with the LowPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetLowPriceOk() (*float32, bool) {
	if o == nil || o.LowPrice == nil {
		return nil, false
	}
	return o.LowPrice, true
}

// HasLowPrice returns a boolean if a field has been set.
func (o *Index) HasLowPrice() bool {
	if o != nil && o.LowPrice != nil {
		return true
	}

	return false
}

// SetLowPrice gets a reference to the given float32 and assigns it to the LowPrice field.
func (o *Index) SetLowPrice(v float32) {
	o.LowPrice = &v
}

// GetNetChange returns the NetChange field value if set, zero value otherwise.
func (o *Index) GetNetChange() float32 {
	if o == nil || o.NetChange == nil {
		var ret float32
		return ret
	}
	return *o.NetChange
}

// GetNetChangeOk returns a tuple with the NetChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetNetChangeOk() (*float32, bool) {
	if o == nil || o.NetChange == nil {
		return nil, false
	}
	return o.NetChange, true
}

// HasNetChange returns a boolean if a field has been set.
func (o *Index) HasNetChange() bool {
	if o != nil && o.NetChange != nil {
		return true
	}

	return false
}

// SetNetChange gets a reference to the given float32 and assigns it to the NetChange field.
func (o *Index) SetNetChange(v float32) {
	o.NetChange = &v
}

// GetOpenPrice returns the OpenPrice field value if set, zero value otherwise.
func (o *Index) GetOpenPrice() float32 {
	if o == nil || o.OpenPrice == nil {
		var ret float32
		return ret
	}
	return *o.OpenPrice
}

// GetOpenPriceOk returns a tuple with the OpenPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetOpenPriceOk() (*float32, bool) {
	if o == nil || o.OpenPrice == nil {
		return nil, false
	}
	return o.OpenPrice, true
}

// HasOpenPrice returns a boolean if a field has been set.
func (o *Index) HasOpenPrice() bool {
	if o != nil && o.OpenPrice != nil {
		return true
	}

	return false
}

// SetOpenPrice gets a reference to the given float32 and assigns it to the OpenPrice field.
func (o *Index) SetOpenPrice(v float32) {
	o.OpenPrice = &v
}

// GetSecurityStatus returns the SecurityStatus field value if set, zero value otherwise.
func (o *Index) GetSecurityStatus() string {
	if o == nil || o.SecurityStatus == nil {
		var ret string
		return ret
	}
	return *o.SecurityStatus
}

// GetSecurityStatusOk returns a tuple with the SecurityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetSecurityStatusOk() (*string, bool) {
	if o == nil || o.SecurityStatus == nil {
		return nil, false
	}
	return o.SecurityStatus, true
}

// HasSecurityStatus returns a boolean if a field has been set.
func (o *Index) HasSecurityStatus() bool {
	if o != nil && o.SecurityStatus != nil {
		return true
	}

	return false
}

// SetSecurityStatus gets a reference to the given string and assigns it to the SecurityStatus field.
func (o *Index) SetSecurityStatus(v string) {
	o.SecurityStatus = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Index) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Index) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Index) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTotalVolume returns the TotalVolume field value if set, zero value otherwise.
func (o *Index) GetTotalVolume() float32 {
	if o == nil || o.TotalVolume == nil {
		var ret float32
		return ret
	}
	return *o.TotalVolume
}

// GetTotalVolumeOk returns a tuple with the TotalVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetTotalVolumeOk() (*float32, bool) {
	if o == nil || o.TotalVolume == nil {
		return nil, false
	}
	return o.TotalVolume, true
}

// HasTotalVolume returns a boolean if a field has been set.
func (o *Index) HasTotalVolume() bool {
	if o != nil && o.TotalVolume != nil {
		return true
	}

	return false
}

// SetTotalVolume gets a reference to the given float32 and assigns it to the TotalVolume field.
func (o *Index) SetTotalVolume(v float32) {
	o.TotalVolume = &v
}

// GetTradeTimeInLong returns the TradeTimeInLong field value if set, zero value otherwise.
func (o *Index) GetTradeTimeInLong() float32 {
	if o == nil || o.TradeTimeInLong == nil {
		var ret float32
		return ret
	}
	return *o.TradeTimeInLong
}

// GetTradeTimeInLongOk returns a tuple with the TradeTimeInLong field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Index) GetTradeTimeInLongOk() (*float32, bool) {
	if o == nil || o.TradeTimeInLong == nil {
		return nil, false
	}
	return o.TradeTimeInLong, true
}

// HasTradeTimeInLong returns a boolean if a field has been set.
func (o *Index) HasTradeTimeInLong() bool {
	if o != nil && o.TradeTimeInLong != nil {
		return true
	}

	return false
}

// SetTradeTimeInLong gets a reference to the given float32 and assigns it to the TradeTimeInLong field.
func (o *Index) SetTradeTimeInLong(v float32) {
	o.TradeTimeInLong = &v
}

func (o Index) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Var52WkHigh != nil {
		toSerialize["52WkHigh"] = o.Var52WkHigh
	}
	if o.Var52WkLow != nil {
		toSerialize["52WkLow"] = o.Var52WkLow
	}
	if o.ClosePrice != nil {
		toSerialize["closePrice"] = o.ClosePrice
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Digits != nil {
		toSerialize["digits"] = o.Digits
	}
	if o.Exchange != nil {
		toSerialize["exchange"] = o.Exchange
	}
	if o.ExchangeName != nil {
		toSerialize["exchangeName"] = o.ExchangeName
	}
	if o.HighPrice != nil {
		toSerialize["highPrice"] = o.HighPrice
	}
	if o.LastPrice != nil {
		toSerialize["lastPrice"] = o.LastPrice
	}
	if o.LowPrice != nil {
		toSerialize["lowPrice"] = o.LowPrice
	}
	if o.NetChange != nil {
		toSerialize["netChange"] = o.NetChange
	}
	if o.OpenPrice != nil {
		toSerialize["openPrice"] = o.OpenPrice
	}
	if o.SecurityStatus != nil {
		toSerialize["securityStatus"] = o.SecurityStatus
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.TotalVolume != nil {
		toSerialize["totalVolume"] = o.TotalVolume
	}
	if o.TradeTimeInLong != nil {
		toSerialize["tradeTimeInLong"] = o.TradeTimeInLong
	}
	return json.Marshal(toSerialize)
}

type NullableIndex struct {
	value *Index
	isSet bool
}

func (v NullableIndex) Get() *Index {
	return v.value
}

func (v *NullableIndex) Set(val *Index) {
	v.value = val
	v.isSet = true
}

func (v NullableIndex) IsSet() bool {
	return v.isSet
}

func (v *NullableIndex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndex(val *Index) *NullableIndex {
	return &NullableIndex{value: val, isSet: true}
}

func (v NullableIndex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


