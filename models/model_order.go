/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Order struct for Order
type Order struct {
	AccountId *float32 `json:"accountId,omitempty"`
	ActivationPrice *float32 `json:"activationPrice,omitempty"`
	CancelTime *CashAccountCancelTime `json:"cancelTime,omitempty"`
	Cancelable *bool `json:"cancelable,omitempty"`
	ChildOrderStrategies *[]OrderChildOrderStrategies `json:"childOrderStrategies,omitempty"`
	CloseTime *string `json:"closeTime,omitempty"`
	ComplexOrderStrategyType *ComplexOrderStrategyType `json:"complexOrderStrategyType,omitempty"`
	DestinationLinkName *string `json:"destinationLinkName,omitempty"`
	Duration *Duration `json:"duration,omitempty"`
	Editable *bool `json:"editable,omitempty"`
	EnteredTime *string `json:"enteredTime,omitempty"`
	FilledQuantity *float32 `json:"filledQuantity,omitempty"`
	OrderActivityCollection *[]Execution `json:"orderActivityCollection,omitempty"`
	OrderId *float32 `json:"orderId,omitempty"`
	OrderLegCollection *[]OrderOrderLegCollection `json:"orderLegCollection,omitempty"`
	OrderStrategyType *OrderStrategyType `json:"orderStrategyType,omitempty"`
	OrderType *OrderType `json:"orderType,omitempty"`
	Price *float32 `json:"price,omitempty"`
	PriceLinkBasis *PriceLinkBasis `json:"priceLinkBasis,omitempty"`
	PriceLinkType *PriceLinkType `json:"priceLinkType,omitempty"`
	Quantity *float32 `json:"quantity,omitempty"`
	ReleaseTime *string `json:"releaseTime,omitempty"`
	RemainingQuantity *float32 `json:"remainingQuantity,omitempty"`
	ReplacingOrderCollection *[]map[string]interface{} `json:"replacingOrderCollection,omitempty"`
	RequestedDestination *DestinationExchange `json:"requestedDestination,omitempty"`
	Session *Session `json:"session,omitempty"`
	SpecialInstruction *SpecialInstruction `json:"specialInstruction,omitempty"`
	Status *OrderStatus `json:"status,omitempty"`
	StatusDescription *string `json:"statusDescription,omitempty"`
	StopPrice *float32 `json:"stopPrice,omitempty"`
	StopPriceLinkBasis *PriceLinkBasis `json:"stopPriceLinkBasis,omitempty"`
	StopPriceLinkType *PriceLinkType `json:"stopPriceLinkType,omitempty"`
	StopPriceOffset *float32 `json:"stopPriceOffset,omitempty"`
	StopType *StopType `json:"stopType,omitempty"`
	Tag *string `json:"tag,omitempty"`
	TaxLotMethod *TaxLotMethod `json:"taxLotMethod,omitempty"`
}

// NewOrder instantiates a new Order object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrder() *Order {
	this := Order{}
	return &this
}

// NewOrderWithDefaults instantiates a new Order object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderWithDefaults() *Order {
	this := Order{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *Order) GetAccountId() float32 {
	if o == nil || o.AccountId == nil {
		var ret float32
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetAccountIdOk() (*float32, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *Order) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given float32 and assigns it to the AccountId field.
func (o *Order) SetAccountId(v float32) {
	o.AccountId = &v
}

// GetActivationPrice returns the ActivationPrice field value if set, zero value otherwise.
func (o *Order) GetActivationPrice() float32 {
	if o == nil || o.ActivationPrice == nil {
		var ret float32
		return ret
	}
	return *o.ActivationPrice
}

// GetActivationPriceOk returns a tuple with the ActivationPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetActivationPriceOk() (*float32, bool) {
	if o == nil || o.ActivationPrice == nil {
		return nil, false
	}
	return o.ActivationPrice, true
}

// HasActivationPrice returns a boolean if a field has been set.
func (o *Order) HasActivationPrice() bool {
	if o != nil && o.ActivationPrice != nil {
		return true
	}

	return false
}

// SetActivationPrice gets a reference to the given float32 and assigns it to the ActivationPrice field.
func (o *Order) SetActivationPrice(v float32) {
	o.ActivationPrice = &v
}

// GetCancelTime returns the CancelTime field value if set, zero value otherwise.
func (o *Order) GetCancelTime() CashAccountCancelTime {
	if o == nil || o.CancelTime == nil {
		var ret CashAccountCancelTime
		return ret
	}
	return *o.CancelTime
}

// GetCancelTimeOk returns a tuple with the CancelTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCancelTimeOk() (*CashAccountCancelTime, bool) {
	if o == nil || o.CancelTime == nil {
		return nil, false
	}
	return o.CancelTime, true
}

// HasCancelTime returns a boolean if a field has been set.
func (o *Order) HasCancelTime() bool {
	if o != nil && o.CancelTime != nil {
		return true
	}

	return false
}

// SetCancelTime gets a reference to the given CashAccountCancelTime and assigns it to the CancelTime field.
func (o *Order) SetCancelTime(v CashAccountCancelTime) {
	o.CancelTime = &v
}

// GetCancelable returns the Cancelable field value if set, zero value otherwise.
func (o *Order) GetCancelable() bool {
	if o == nil || o.Cancelable == nil {
		var ret bool
		return ret
	}
	return *o.Cancelable
}

// GetCancelableOk returns a tuple with the Cancelable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCancelableOk() (*bool, bool) {
	if o == nil || o.Cancelable == nil {
		return nil, false
	}
	return o.Cancelable, true
}

// HasCancelable returns a boolean if a field has been set.
func (o *Order) HasCancelable() bool {
	if o != nil && o.Cancelable != nil {
		return true
	}

	return false
}

// SetCancelable gets a reference to the given bool and assigns it to the Cancelable field.
func (o *Order) SetCancelable(v bool) {
	o.Cancelable = &v
}

// GetChildOrderStrategies returns the ChildOrderStrategies field value if set, zero value otherwise.
func (o *Order) GetChildOrderStrategies() []OrderChildOrderStrategies {
	if o == nil || o.ChildOrderStrategies == nil {
		var ret []OrderChildOrderStrategies
		return ret
	}
	return *o.ChildOrderStrategies
}

// GetChildOrderStrategiesOk returns a tuple with the ChildOrderStrategies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetChildOrderStrategiesOk() (*[]OrderChildOrderStrategies, bool) {
	if o == nil || o.ChildOrderStrategies == nil {
		return nil, false
	}
	return o.ChildOrderStrategies, true
}

// HasChildOrderStrategies returns a boolean if a field has been set.
func (o *Order) HasChildOrderStrategies() bool {
	if o != nil && o.ChildOrderStrategies != nil {
		return true
	}

	return false
}

// SetChildOrderStrategies gets a reference to the given []OrderChildOrderStrategies and assigns it to the ChildOrderStrategies field.
func (o *Order) SetChildOrderStrategies(v []OrderChildOrderStrategies) {
	o.ChildOrderStrategies = &v
}

// GetCloseTime returns the CloseTime field value if set, zero value otherwise.
func (o *Order) GetCloseTime() string {
	if o == nil || o.CloseTime == nil {
		var ret string
		return ret
	}
	return *o.CloseTime
}

// GetCloseTimeOk returns a tuple with the CloseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCloseTimeOk() (*string, bool) {
	if o == nil || o.CloseTime == nil {
		return nil, false
	}
	return o.CloseTime, true
}

// HasCloseTime returns a boolean if a field has been set.
func (o *Order) HasCloseTime() bool {
	if o != nil && o.CloseTime != nil {
		return true
	}

	return false
}

// SetCloseTime gets a reference to the given string and assigns it to the CloseTime field.
func (o *Order) SetCloseTime(v string) {
	o.CloseTime = &v
}

// GetComplexOrderStrategyType returns the ComplexOrderStrategyType field value if set, zero value otherwise.
func (o *Order) GetComplexOrderStrategyType() ComplexOrderStrategyType {
	if o == nil || o.ComplexOrderStrategyType == nil {
		var ret ComplexOrderStrategyType
		return ret
	}
	return *o.ComplexOrderStrategyType
}

// GetComplexOrderStrategyTypeOk returns a tuple with the ComplexOrderStrategyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetComplexOrderStrategyTypeOk() (*ComplexOrderStrategyType, bool) {
	if o == nil || o.ComplexOrderStrategyType == nil {
		return nil, false
	}
	return o.ComplexOrderStrategyType, true
}

// HasComplexOrderStrategyType returns a boolean if a field has been set.
func (o *Order) HasComplexOrderStrategyType() bool {
	if o != nil && o.ComplexOrderStrategyType != nil {
		return true
	}

	return false
}

// SetComplexOrderStrategyType gets a reference to the given ComplexOrderStrategyType and assigns it to the ComplexOrderStrategyType field.
func (o *Order) SetComplexOrderStrategyType(v ComplexOrderStrategyType) {
	o.ComplexOrderStrategyType = &v
}

// GetDestinationLinkName returns the DestinationLinkName field value if set, zero value otherwise.
func (o *Order) GetDestinationLinkName() string {
	if o == nil || o.DestinationLinkName == nil {
		var ret string
		return ret
	}
	return *o.DestinationLinkName
}

// GetDestinationLinkNameOk returns a tuple with the DestinationLinkName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetDestinationLinkNameOk() (*string, bool) {
	if o == nil || o.DestinationLinkName == nil {
		return nil, false
	}
	return o.DestinationLinkName, true
}

// HasDestinationLinkName returns a boolean if a field has been set.
func (o *Order) HasDestinationLinkName() bool {
	if o != nil && o.DestinationLinkName != nil {
		return true
	}

	return false
}

// SetDestinationLinkName gets a reference to the given string and assigns it to the DestinationLinkName field.
func (o *Order) SetDestinationLinkName(v string) {
	o.DestinationLinkName = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *Order) GetDuration() Duration {
	if o == nil || o.Duration == nil {
		var ret Duration
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetDurationOk() (*Duration, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *Order) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given Duration and assigns it to the Duration field.
func (o *Order) SetDuration(v Duration) {
	o.Duration = &v
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *Order) GetEditable() bool {
	if o == nil || o.Editable == nil {
		var ret bool
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetEditableOk() (*bool, bool) {
	if o == nil || o.Editable == nil {
		return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *Order) HasEditable() bool {
	if o != nil && o.Editable != nil {
		return true
	}

	return false
}

// SetEditable gets a reference to the given bool and assigns it to the Editable field.
func (o *Order) SetEditable(v bool) {
	o.Editable = &v
}

// GetEnteredTime returns the EnteredTime field value if set, zero value otherwise.
func (o *Order) GetEnteredTime() string {
	if o == nil || o.EnteredTime == nil {
		var ret string
		return ret
	}
	return *o.EnteredTime
}

// GetEnteredTimeOk returns a tuple with the EnteredTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetEnteredTimeOk() (*string, bool) {
	if o == nil || o.EnteredTime == nil {
		return nil, false
	}
	return o.EnteredTime, true
}

// HasEnteredTime returns a boolean if a field has been set.
func (o *Order) HasEnteredTime() bool {
	if o != nil && o.EnteredTime != nil {
		return true
	}

	return false
}

// SetEnteredTime gets a reference to the given string and assigns it to the EnteredTime field.
func (o *Order) SetEnteredTime(v string) {
	o.EnteredTime = &v
}

// GetFilledQuantity returns the FilledQuantity field value if set, zero value otherwise.
func (o *Order) GetFilledQuantity() float32 {
	if o == nil || o.FilledQuantity == nil {
		var ret float32
		return ret
	}
	return *o.FilledQuantity
}

// GetFilledQuantityOk returns a tuple with the FilledQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetFilledQuantityOk() (*float32, bool) {
	if o == nil || o.FilledQuantity == nil {
		return nil, false
	}
	return o.FilledQuantity, true
}

// HasFilledQuantity returns a boolean if a field has been set.
func (o *Order) HasFilledQuantity() bool {
	if o != nil && o.FilledQuantity != nil {
		return true
	}

	return false
}

// SetFilledQuantity gets a reference to the given float32 and assigns it to the FilledQuantity field.
func (o *Order) SetFilledQuantity(v float32) {
	o.FilledQuantity = &v
}

// GetOrderActivityCollection returns the OrderActivityCollection field value if set, zero value otherwise.
func (o *Order) GetOrderActivityCollection() []Execution {
	if o == nil || o.OrderActivityCollection == nil {
		var ret []Execution
		return ret
	}
	return *o.OrderActivityCollection
}

// GetOrderActivityCollectionOk returns a tuple with the OrderActivityCollection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOrderActivityCollectionOk() (*[]Execution, bool) {
	if o == nil || o.OrderActivityCollection == nil {
		return nil, false
	}
	return o.OrderActivityCollection, true
}

// HasOrderActivityCollection returns a boolean if a field has been set.
func (o *Order) HasOrderActivityCollection() bool {
	if o != nil && o.OrderActivityCollection != nil {
		return true
	}

	return false
}

// SetOrderActivityCollection gets a reference to the given []Execution and assigns it to the OrderActivityCollection field.
func (o *Order) SetOrderActivityCollection(v []Execution) {
	o.OrderActivityCollection = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *Order) GetOrderId() float32 {
	if o == nil || o.OrderId == nil {
		var ret float32
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOrderIdOk() (*float32, bool) {
	if o == nil || o.OrderId == nil {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *Order) HasOrderId() bool {
	if o != nil && o.OrderId != nil {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given float32 and assigns it to the OrderId field.
func (o *Order) SetOrderId(v float32) {
	o.OrderId = &v
}

// GetOrderLegCollection returns the OrderLegCollection field value if set, zero value otherwise.
func (o *Order) GetOrderLegCollection() []OrderOrderLegCollection {
	if o == nil || o.OrderLegCollection == nil {
		var ret []OrderOrderLegCollection
		return ret
	}
	return *o.OrderLegCollection
}

// GetOrderLegCollectionOk returns a tuple with the OrderLegCollection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOrderLegCollectionOk() (*[]OrderOrderLegCollection, bool) {
	if o == nil || o.OrderLegCollection == nil {
		return nil, false
	}
	return o.OrderLegCollection, true
}

// HasOrderLegCollection returns a boolean if a field has been set.
func (o *Order) HasOrderLegCollection() bool {
	if o != nil && o.OrderLegCollection != nil {
		return true
	}

	return false
}

// SetOrderLegCollection gets a reference to the given []OrderOrderLegCollection and assigns it to the OrderLegCollection field.
func (o *Order) SetOrderLegCollection(v []OrderOrderLegCollection) {
	o.OrderLegCollection = &v
}

// GetOrderStrategyType returns the OrderStrategyType field value if set, zero value otherwise.
func (o *Order) GetOrderStrategyType() OrderStrategyType {
	if o == nil || o.OrderStrategyType == nil {
		var ret OrderStrategyType
		return ret
	}
	return *o.OrderStrategyType
}

// GetOrderStrategyTypeOk returns a tuple with the OrderStrategyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOrderStrategyTypeOk() (*OrderStrategyType, bool) {
	if o == nil || o.OrderStrategyType == nil {
		return nil, false
	}
	return o.OrderStrategyType, true
}

// HasOrderStrategyType returns a boolean if a field has been set.
func (o *Order) HasOrderStrategyType() bool {
	if o != nil && o.OrderStrategyType != nil {
		return true
	}

	return false
}

// SetOrderStrategyType gets a reference to the given OrderStrategyType and assigns it to the OrderStrategyType field.
func (o *Order) SetOrderStrategyType(v OrderStrategyType) {
	o.OrderStrategyType = &v
}

// GetOrderType returns the OrderType field value if set, zero value otherwise.
func (o *Order) GetOrderType() OrderType {
	if o == nil || o.OrderType == nil {
		var ret OrderType
		return ret
	}
	return *o.OrderType
}

// GetOrderTypeOk returns a tuple with the OrderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOrderTypeOk() (*OrderType, bool) {
	if o == nil || o.OrderType == nil {
		return nil, false
	}
	return o.OrderType, true
}

// HasOrderType returns a boolean if a field has been set.
func (o *Order) HasOrderType() bool {
	if o != nil && o.OrderType != nil {
		return true
	}

	return false
}

// SetOrderType gets a reference to the given OrderType and assigns it to the OrderType field.
func (o *Order) SetOrderType(v OrderType) {
	o.OrderType = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *Order) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetPriceOk() (*float32, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *Order) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *Order) SetPrice(v float32) {
	o.Price = &v
}

// GetPriceLinkBasis returns the PriceLinkBasis field value if set, zero value otherwise.
func (o *Order) GetPriceLinkBasis() PriceLinkBasis {
	if o == nil || o.PriceLinkBasis == nil {
		var ret PriceLinkBasis
		return ret
	}
	return *o.PriceLinkBasis
}

// GetPriceLinkBasisOk returns a tuple with the PriceLinkBasis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetPriceLinkBasisOk() (*PriceLinkBasis, bool) {
	if o == nil || o.PriceLinkBasis == nil {
		return nil, false
	}
	return o.PriceLinkBasis, true
}

// HasPriceLinkBasis returns a boolean if a field has been set.
func (o *Order) HasPriceLinkBasis() bool {
	if o != nil && o.PriceLinkBasis != nil {
		return true
	}

	return false
}

// SetPriceLinkBasis gets a reference to the given PriceLinkBasis and assigns it to the PriceLinkBasis field.
func (o *Order) SetPriceLinkBasis(v PriceLinkBasis) {
	o.PriceLinkBasis = &v
}

// GetPriceLinkType returns the PriceLinkType field value if set, zero value otherwise.
func (o *Order) GetPriceLinkType() PriceLinkType {
	if o == nil || o.PriceLinkType == nil {
		var ret PriceLinkType
		return ret
	}
	return *o.PriceLinkType
}

// GetPriceLinkTypeOk returns a tuple with the PriceLinkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetPriceLinkTypeOk() (*PriceLinkType, bool) {
	if o == nil || o.PriceLinkType == nil {
		return nil, false
	}
	return o.PriceLinkType, true
}

// HasPriceLinkType returns a boolean if a field has been set.
func (o *Order) HasPriceLinkType() bool {
	if o != nil && o.PriceLinkType != nil {
		return true
	}

	return false
}

// SetPriceLinkType gets a reference to the given PriceLinkType and assigns it to the PriceLinkType field.
func (o *Order) SetPriceLinkType(v PriceLinkType) {
	o.PriceLinkType = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *Order) GetQuantity() float32 {
	if o == nil || o.Quantity == nil {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetQuantityOk() (*float32, bool) {
	if o == nil || o.Quantity == nil {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *Order) HasQuantity() bool {
	if o != nil && o.Quantity != nil {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *Order) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetReleaseTime returns the ReleaseTime field value if set, zero value otherwise.
func (o *Order) GetReleaseTime() string {
	if o == nil || o.ReleaseTime == nil {
		var ret string
		return ret
	}
	return *o.ReleaseTime
}

// GetReleaseTimeOk returns a tuple with the ReleaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetReleaseTimeOk() (*string, bool) {
	if o == nil || o.ReleaseTime == nil {
		return nil, false
	}
	return o.ReleaseTime, true
}

// HasReleaseTime returns a boolean if a field has been set.
func (o *Order) HasReleaseTime() bool {
	if o != nil && o.ReleaseTime != nil {
		return true
	}

	return false
}

// SetReleaseTime gets a reference to the given string and assigns it to the ReleaseTime field.
func (o *Order) SetReleaseTime(v string) {
	o.ReleaseTime = &v
}

// GetRemainingQuantity returns the RemainingQuantity field value if set, zero value otherwise.
func (o *Order) GetRemainingQuantity() float32 {
	if o == nil || o.RemainingQuantity == nil {
		var ret float32
		return ret
	}
	return *o.RemainingQuantity
}

// GetRemainingQuantityOk returns a tuple with the RemainingQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetRemainingQuantityOk() (*float32, bool) {
	if o == nil || o.RemainingQuantity == nil {
		return nil, false
	}
	return o.RemainingQuantity, true
}

// HasRemainingQuantity returns a boolean if a field has been set.
func (o *Order) HasRemainingQuantity() bool {
	if o != nil && o.RemainingQuantity != nil {
		return true
	}

	return false
}

// SetRemainingQuantity gets a reference to the given float32 and assigns it to the RemainingQuantity field.
func (o *Order) SetRemainingQuantity(v float32) {
	o.RemainingQuantity = &v
}

// GetReplacingOrderCollection returns the ReplacingOrderCollection field value if set, zero value otherwise.
func (o *Order) GetReplacingOrderCollection() []map[string]interface{} {
	if o == nil || o.ReplacingOrderCollection == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.ReplacingOrderCollection
}

// GetReplacingOrderCollectionOk returns a tuple with the ReplacingOrderCollection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetReplacingOrderCollectionOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.ReplacingOrderCollection == nil {
		return nil, false
	}
	return o.ReplacingOrderCollection, true
}

// HasReplacingOrderCollection returns a boolean if a field has been set.
func (o *Order) HasReplacingOrderCollection() bool {
	if o != nil && o.ReplacingOrderCollection != nil {
		return true
	}

	return false
}

// SetReplacingOrderCollection gets a reference to the given []map[string]interface{} and assigns it to the ReplacingOrderCollection field.
func (o *Order) SetReplacingOrderCollection(v []map[string]interface{}) {
	o.ReplacingOrderCollection = &v
}

// GetRequestedDestination returns the RequestedDestination field value if set, zero value otherwise.
func (o *Order) GetRequestedDestination() DestinationExchange {
	if o == nil || o.RequestedDestination == nil {
		var ret DestinationExchange
		return ret
	}
	return *o.RequestedDestination
}

// GetRequestedDestinationOk returns a tuple with the RequestedDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetRequestedDestinationOk() (*DestinationExchange, bool) {
	if o == nil || o.RequestedDestination == nil {
		return nil, false
	}
	return o.RequestedDestination, true
}

// HasRequestedDestination returns a boolean if a field has been set.
func (o *Order) HasRequestedDestination() bool {
	if o != nil && o.RequestedDestination != nil {
		return true
	}

	return false
}

// SetRequestedDestination gets a reference to the given DestinationExchange and assigns it to the RequestedDestination field.
func (o *Order) SetRequestedDestination(v DestinationExchange) {
	o.RequestedDestination = &v
}

// GetSession returns the Session field value if set, zero value otherwise.
func (o *Order) GetSession() Session {
	if o == nil || o.Session == nil {
		var ret Session
		return ret
	}
	return *o.Session
}

// GetSessionOk returns a tuple with the Session field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetSessionOk() (*Session, bool) {
	if o == nil || o.Session == nil {
		return nil, false
	}
	return o.Session, true
}

// HasSession returns a boolean if a field has been set.
func (o *Order) HasSession() bool {
	if o != nil && o.Session != nil {
		return true
	}

	return false
}

// SetSession gets a reference to the given Session and assigns it to the Session field.
func (o *Order) SetSession(v Session) {
	o.Session = &v
}

// GetSpecialInstruction returns the SpecialInstruction field value if set, zero value otherwise.
func (o *Order) GetSpecialInstruction() SpecialInstruction {
	if o == nil || o.SpecialInstruction == nil {
		var ret SpecialInstruction
		return ret
	}
	return *o.SpecialInstruction
}

// GetSpecialInstructionOk returns a tuple with the SpecialInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetSpecialInstructionOk() (*SpecialInstruction, bool) {
	if o == nil || o.SpecialInstruction == nil {
		return nil, false
	}
	return o.SpecialInstruction, true
}

// HasSpecialInstruction returns a boolean if a field has been set.
func (o *Order) HasSpecialInstruction() bool {
	if o != nil && o.SpecialInstruction != nil {
		return true
	}

	return false
}

// SetSpecialInstruction gets a reference to the given SpecialInstruction and assigns it to the SpecialInstruction field.
func (o *Order) SetSpecialInstruction(v SpecialInstruction) {
	o.SpecialInstruction = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Order) GetStatus() OrderStatus {
	if o == nil || o.Status == nil {
		var ret OrderStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetStatusOk() (*OrderStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Order) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given OrderStatus and assigns it to the Status field.
func (o *Order) SetStatus(v OrderStatus) {
	o.Status = &v
}

// GetStatusDescription returns the StatusDescription field value if set, zero value otherwise.
func (o *Order) GetStatusDescription() string {
	if o == nil || o.StatusDescription == nil {
		var ret string
		return ret
	}
	return *o.StatusDescription
}

// GetStatusDescriptionOk returns a tuple with the StatusDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetStatusDescriptionOk() (*string, bool) {
	if o == nil || o.StatusDescription == nil {
		return nil, false
	}
	return o.StatusDescription, true
}

// HasStatusDescription returns a boolean if a field has been set.
func (o *Order) HasStatusDescription() bool {
	if o != nil && o.StatusDescription != nil {
		return true
	}

	return false
}

// SetStatusDescription gets a reference to the given string and assigns it to the StatusDescription field.
func (o *Order) SetStatusDescription(v string) {
	o.StatusDescription = &v
}

// GetStopPrice returns the StopPrice field value if set, zero value otherwise.
func (o *Order) GetStopPrice() float32 {
	if o == nil || o.StopPrice == nil {
		var ret float32
		return ret
	}
	return *o.StopPrice
}

// GetStopPriceOk returns a tuple with the StopPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetStopPriceOk() (*float32, bool) {
	if o == nil || o.StopPrice == nil {
		return nil, false
	}
	return o.StopPrice, true
}

// HasStopPrice returns a boolean if a field has been set.
func (o *Order) HasStopPrice() bool {
	if o != nil && o.StopPrice != nil {
		return true
	}

	return false
}

// SetStopPrice gets a reference to the given float32 and assigns it to the StopPrice field.
func (o *Order) SetStopPrice(v float32) {
	o.StopPrice = &v
}

// GetStopPriceLinkBasis returns the StopPriceLinkBasis field value if set, zero value otherwise.
func (o *Order) GetStopPriceLinkBasis() PriceLinkBasis {
	if o == nil || o.StopPriceLinkBasis == nil {
		var ret PriceLinkBasis
		return ret
	}
	return *o.StopPriceLinkBasis
}

// GetStopPriceLinkBasisOk returns a tuple with the StopPriceLinkBasis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetStopPriceLinkBasisOk() (*PriceLinkBasis, bool) {
	if o == nil || o.StopPriceLinkBasis == nil {
		return nil, false
	}
	return o.StopPriceLinkBasis, true
}

// HasStopPriceLinkBasis returns a boolean if a field has been set.
func (o *Order) HasStopPriceLinkBasis() bool {
	if o != nil && o.StopPriceLinkBasis != nil {
		return true
	}

	return false
}

// SetStopPriceLinkBasis gets a reference to the given PriceLinkBasis and assigns it to the StopPriceLinkBasis field.
func (o *Order) SetStopPriceLinkBasis(v PriceLinkBasis) {
	o.StopPriceLinkBasis = &v
}

// GetStopPriceLinkType returns the StopPriceLinkType field value if set, zero value otherwise.
func (o *Order) GetStopPriceLinkType() PriceLinkType {
	if o == nil || o.StopPriceLinkType == nil {
		var ret PriceLinkType
		return ret
	}
	return *o.StopPriceLinkType
}

// GetStopPriceLinkTypeOk returns a tuple with the StopPriceLinkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetStopPriceLinkTypeOk() (*PriceLinkType, bool) {
	if o == nil || o.StopPriceLinkType == nil {
		return nil, false
	}
	return o.StopPriceLinkType, true
}

// HasStopPriceLinkType returns a boolean if a field has been set.
func (o *Order) HasStopPriceLinkType() bool {
	if o != nil && o.StopPriceLinkType != nil {
		return true
	}

	return false
}

// SetStopPriceLinkType gets a reference to the given PriceLinkType and assigns it to the StopPriceLinkType field.
func (o *Order) SetStopPriceLinkType(v PriceLinkType) {
	o.StopPriceLinkType = &v
}

// GetStopPriceOffset returns the StopPriceOffset field value if set, zero value otherwise.
func (o *Order) GetStopPriceOffset() float32 {
	if o == nil || o.StopPriceOffset == nil {
		var ret float32
		return ret
	}
	return *o.StopPriceOffset
}

// GetStopPriceOffsetOk returns a tuple with the StopPriceOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetStopPriceOffsetOk() (*float32, bool) {
	if o == nil || o.StopPriceOffset == nil {
		return nil, false
	}
	return o.StopPriceOffset, true
}

// HasStopPriceOffset returns a boolean if a field has been set.
func (o *Order) HasStopPriceOffset() bool {
	if o != nil && o.StopPriceOffset != nil {
		return true
	}

	return false
}

// SetStopPriceOffset gets a reference to the given float32 and assigns it to the StopPriceOffset field.
func (o *Order) SetStopPriceOffset(v float32) {
	o.StopPriceOffset = &v
}

// GetStopType returns the StopType field value if set, zero value otherwise.
func (o *Order) GetStopType() StopType {
	if o == nil || o.StopType == nil {
		var ret StopType
		return ret
	}
	return *o.StopType
}

// GetStopTypeOk returns a tuple with the StopType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetStopTypeOk() (*StopType, bool) {
	if o == nil || o.StopType == nil {
		return nil, false
	}
	return o.StopType, true
}

// HasStopType returns a boolean if a field has been set.
func (o *Order) HasStopType() bool {
	if o != nil && o.StopType != nil {
		return true
	}

	return false
}

// SetStopType gets a reference to the given StopType and assigns it to the StopType field.
func (o *Order) SetStopType(v StopType) {
	o.StopType = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *Order) GetTag() string {
	if o == nil || o.Tag == nil {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTagOk() (*string, bool) {
	if o == nil || o.Tag == nil {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *Order) HasTag() bool {
	if o != nil && o.Tag != nil {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *Order) SetTag(v string) {
	o.Tag = &v
}

// GetTaxLotMethod returns the TaxLotMethod field value if set, zero value otherwise.
func (o *Order) GetTaxLotMethod() TaxLotMethod {
	if o == nil || o.TaxLotMethod == nil {
		var ret TaxLotMethod
		return ret
	}
	return *o.TaxLotMethod
}

// GetTaxLotMethodOk returns a tuple with the TaxLotMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTaxLotMethodOk() (*TaxLotMethod, bool) {
	if o == nil || o.TaxLotMethod == nil {
		return nil, false
	}
	return o.TaxLotMethod, true
}

// HasTaxLotMethod returns a boolean if a field has been set.
func (o *Order) HasTaxLotMethod() bool {
	if o != nil && o.TaxLotMethod != nil {
		return true
	}

	return false
}

// SetTaxLotMethod gets a reference to the given TaxLotMethod and assigns it to the TaxLotMethod field.
func (o *Order) SetTaxLotMethod(v TaxLotMethod) {
	o.TaxLotMethod = &v
}

func (o Order) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountId != nil {
		toSerialize["accountId"] = o.AccountId
	}
	if o.ActivationPrice != nil {
		toSerialize["activationPrice"] = o.ActivationPrice
	}
	if o.CancelTime != nil {
		toSerialize["cancelTime"] = o.CancelTime
	}
	if o.Cancelable != nil {
		toSerialize["cancelable"] = o.Cancelable
	}
	if o.ChildOrderStrategies != nil {
		toSerialize["childOrderStrategies"] = o.ChildOrderStrategies
	}
	if o.CloseTime != nil {
		toSerialize["closeTime"] = o.CloseTime
	}
	if o.ComplexOrderStrategyType != nil {
		toSerialize["complexOrderStrategyType"] = o.ComplexOrderStrategyType
	}
	if o.DestinationLinkName != nil {
		toSerialize["destinationLinkName"] = o.DestinationLinkName
	}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	if o.Editable != nil {
		toSerialize["editable"] = o.Editable
	}
	if o.EnteredTime != nil {
		toSerialize["enteredTime"] = o.EnteredTime
	}
	if o.FilledQuantity != nil {
		toSerialize["filledQuantity"] = o.FilledQuantity
	}
	if o.OrderActivityCollection != nil {
		toSerialize["orderActivityCollection"] = o.OrderActivityCollection
	}
	if o.OrderId != nil {
		toSerialize["orderId"] = o.OrderId
	}
	if o.OrderLegCollection != nil {
		toSerialize["orderLegCollection"] = o.OrderLegCollection
	}
	if o.OrderStrategyType != nil {
		toSerialize["orderStrategyType"] = o.OrderStrategyType
	}
	if o.OrderType != nil {
		toSerialize["orderType"] = o.OrderType
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.PriceLinkBasis != nil {
		toSerialize["priceLinkBasis"] = o.PriceLinkBasis
	}
	if o.PriceLinkType != nil {
		toSerialize["priceLinkType"] = o.PriceLinkType
	}
	if o.Quantity != nil {
		toSerialize["quantity"] = o.Quantity
	}
	if o.ReleaseTime != nil {
		toSerialize["releaseTime"] = o.ReleaseTime
	}
	if o.RemainingQuantity != nil {
		toSerialize["remainingQuantity"] = o.RemainingQuantity
	}
	if o.ReplacingOrderCollection != nil {
		toSerialize["replacingOrderCollection"] = o.ReplacingOrderCollection
	}
	if o.RequestedDestination != nil {
		toSerialize["requestedDestination"] = o.RequestedDestination
	}
	if o.Session != nil {
		toSerialize["session"] = o.Session
	}
	if o.SpecialInstruction != nil {
		toSerialize["specialInstruction"] = o.SpecialInstruction
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.StatusDescription != nil {
		toSerialize["statusDescription"] = o.StatusDescription
	}
	if o.StopPrice != nil {
		toSerialize["stopPrice"] = o.StopPrice
	}
	if o.StopPriceLinkBasis != nil {
		toSerialize["stopPriceLinkBasis"] = o.StopPriceLinkBasis
	}
	if o.StopPriceLinkType != nil {
		toSerialize["stopPriceLinkType"] = o.StopPriceLinkType
	}
	if o.StopPriceOffset != nil {
		toSerialize["stopPriceOffset"] = o.StopPriceOffset
	}
	if o.StopType != nil {
		toSerialize["stopType"] = o.StopType
	}
	if o.Tag != nil {
		toSerialize["tag"] = o.Tag
	}
	if o.TaxLotMethod != nil {
		toSerialize["taxLotMethod"] = o.TaxLotMethod
	}
	return json.Marshal(toSerialize)
}

type NullableOrder struct {
	value *Order
	isSet bool
}

func (v NullableOrder) Get() *Order {
	return v.value
}

func (v *NullableOrder) Set(val *Order) {
	v.value = val
	v.isSet = true
}

func (v NullableOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrder(val *Order) *NullableOrder {
	return &NullableOrder{value: val, isSet: true}
}

func (v NullableOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


