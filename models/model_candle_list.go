/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CandleList struct for CandleList
type CandleList struct {
	Candles *[]CandleListCandles `json:"candles,omitempty"`
	Empty *bool `json:"empty,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
}

// NewCandleList instantiates a new CandleList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCandleList() *CandleList {
	this := CandleList{}
	return &this
}

// NewCandleListWithDefaults instantiates a new CandleList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCandleListWithDefaults() *CandleList {
	this := CandleList{}
	return &this
}

// GetCandles returns the Candles field value if set, zero value otherwise.
func (o *CandleList) GetCandles() []CandleListCandles {
	if o == nil || o.Candles == nil {
		var ret []CandleListCandles
		return ret
	}
	return *o.Candles
}

// GetCandlesOk returns a tuple with the Candles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CandleList) GetCandlesOk() (*[]CandleListCandles, bool) {
	if o == nil || o.Candles == nil {
		return nil, false
	}
	return o.Candles, true
}

// HasCandles returns a boolean if a field has been set.
func (o *CandleList) HasCandles() bool {
	if o != nil && o.Candles != nil {
		return true
	}

	return false
}

// SetCandles gets a reference to the given []CandleListCandles and assigns it to the Candles field.
func (o *CandleList) SetCandles(v []CandleListCandles) {
	o.Candles = &v
}

// GetEmpty returns the Empty field value if set, zero value otherwise.
func (o *CandleList) GetEmpty() bool {
	if o == nil || o.Empty == nil {
		var ret bool
		return ret
	}
	return *o.Empty
}

// GetEmptyOk returns a tuple with the Empty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CandleList) GetEmptyOk() (*bool, bool) {
	if o == nil || o.Empty == nil {
		return nil, false
	}
	return o.Empty, true
}

// HasEmpty returns a boolean if a field has been set.
func (o *CandleList) HasEmpty() bool {
	if o != nil && o.Empty != nil {
		return true
	}

	return false
}

// SetEmpty gets a reference to the given bool and assigns it to the Empty field.
func (o *CandleList) SetEmpty(v bool) {
	o.Empty = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *CandleList) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CandleList) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *CandleList) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *CandleList) SetSymbol(v string) {
	o.Symbol = &v
}

func (o CandleList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Candles != nil {
		toSerialize["candles"] = o.Candles
	}
	if o.Empty != nil {
		toSerialize["empty"] = o.Empty
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	return json.Marshal(toSerialize)
}

type NullableCandleList struct {
	value *CandleList
	isSet bool
}

func (v NullableCandleList) Get() *CandleList {
	return v.value
}

func (v *NullableCandleList) Set(val *CandleList) {
	v.value = val
	v.isSet = true
}

func (v NullableCandleList) IsSet() bool {
	return v.isSet
}

func (v *NullableCandleList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCandleList(val *CandleList) *NullableCandleList {
	return &NullableCandleList{value: val, isSet: true}
}

func (v NullableCandleList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCandleList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


