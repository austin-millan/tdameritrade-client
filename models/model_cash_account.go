/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CashAccount struct for CashAccount
type CashAccount struct {
	AccountId *string `json:"accountId,omitempty"`
	CurrentBalances *CashAccountCurrentBalances `json:"currentBalances,omitempty"`
	InitialBalances *CashAccountInitialBalances `json:"initialBalances,omitempty"`
	IsClosingOnlyRestricted *bool `json:"isClosingOnlyRestricted,omitempty"`
	IsDayTrader *bool `json:"isDayTrader,omitempty"`
	OrderStrategies *[]CashAccountOrderStrategies `json:"orderStrategies,omitempty"`
	Positions *[]CashAccountPositions `json:"positions,omitempty"`
	ProjectedBalances *CashAccountCurrentBalances `json:"projectedBalances,omitempty"`
	RoundTrips *float32 `json:"roundTrips,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewCashAccount instantiates a new CashAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashAccount() *CashAccount {
	this := CashAccount{}
	return &this
}

// NewCashAccountWithDefaults instantiates a new CashAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashAccountWithDefaults() *CashAccount {
	this := CashAccount{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *CashAccount) GetAccountId() string {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccount) GetAccountIdOk() (*string, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *CashAccount) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *CashAccount) SetAccountId(v string) {
	o.AccountId = &v
}

// GetCurrentBalances returns the CurrentBalances field value if set, zero value otherwise.
func (o *CashAccount) GetCurrentBalances() CashAccountCurrentBalances {
	if o == nil || o.CurrentBalances == nil {
		var ret CashAccountCurrentBalances
		return ret
	}
	return *o.CurrentBalances
}

// GetCurrentBalancesOk returns a tuple with the CurrentBalances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccount) GetCurrentBalancesOk() (*CashAccountCurrentBalances, bool) {
	if o == nil || o.CurrentBalances == nil {
		return nil, false
	}
	return o.CurrentBalances, true
}

// HasCurrentBalances returns a boolean if a field has been set.
func (o *CashAccount) HasCurrentBalances() bool {
	if o != nil && o.CurrentBalances != nil {
		return true
	}

	return false
}

// SetCurrentBalances gets a reference to the given CashAccountCurrentBalances and assigns it to the CurrentBalances field.
func (o *CashAccount) SetCurrentBalances(v CashAccountCurrentBalances) {
	o.CurrentBalances = &v
}

// GetInitialBalances returns the InitialBalances field value if set, zero value otherwise.
func (o *CashAccount) GetInitialBalances() CashAccountInitialBalances {
	if o == nil || o.InitialBalances == nil {
		var ret CashAccountInitialBalances
		return ret
	}
	return *o.InitialBalances
}

// GetInitialBalancesOk returns a tuple with the InitialBalances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccount) GetInitialBalancesOk() (*CashAccountInitialBalances, bool) {
	if o == nil || o.InitialBalances == nil {
		return nil, false
	}
	return o.InitialBalances, true
}

// HasInitialBalances returns a boolean if a field has been set.
func (o *CashAccount) HasInitialBalances() bool {
	if o != nil && o.InitialBalances != nil {
		return true
	}

	return false
}

// SetInitialBalances gets a reference to the given CashAccountInitialBalances and assigns it to the InitialBalances field.
func (o *CashAccount) SetInitialBalances(v CashAccountInitialBalances) {
	o.InitialBalances = &v
}

// GetIsClosingOnlyRestricted returns the IsClosingOnlyRestricted field value if set, zero value otherwise.
func (o *CashAccount) GetIsClosingOnlyRestricted() bool {
	if o == nil || o.IsClosingOnlyRestricted == nil {
		var ret bool
		return ret
	}
	return *o.IsClosingOnlyRestricted
}

// GetIsClosingOnlyRestrictedOk returns a tuple with the IsClosingOnlyRestricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccount) GetIsClosingOnlyRestrictedOk() (*bool, bool) {
	if o == nil || o.IsClosingOnlyRestricted == nil {
		return nil, false
	}
	return o.IsClosingOnlyRestricted, true
}

// HasIsClosingOnlyRestricted returns a boolean if a field has been set.
func (o *CashAccount) HasIsClosingOnlyRestricted() bool {
	if o != nil && o.IsClosingOnlyRestricted != nil {
		return true
	}

	return false
}

// SetIsClosingOnlyRestricted gets a reference to the given bool and assigns it to the IsClosingOnlyRestricted field.
func (o *CashAccount) SetIsClosingOnlyRestricted(v bool) {
	o.IsClosingOnlyRestricted = &v
}

// GetIsDayTrader returns the IsDayTrader field value if set, zero value otherwise.
func (o *CashAccount) GetIsDayTrader() bool {
	if o == nil || o.IsDayTrader == nil {
		var ret bool
		return ret
	}
	return *o.IsDayTrader
}

// GetIsDayTraderOk returns a tuple with the IsDayTrader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccount) GetIsDayTraderOk() (*bool, bool) {
	if o == nil || o.IsDayTrader == nil {
		return nil, false
	}
	return o.IsDayTrader, true
}

// HasIsDayTrader returns a boolean if a field has been set.
func (o *CashAccount) HasIsDayTrader() bool {
	if o != nil && o.IsDayTrader != nil {
		return true
	}

	return false
}

// SetIsDayTrader gets a reference to the given bool and assigns it to the IsDayTrader field.
func (o *CashAccount) SetIsDayTrader(v bool) {
	o.IsDayTrader = &v
}

// GetOrderStrategies returns the OrderStrategies field value if set, zero value otherwise.
func (o *CashAccount) GetOrderStrategies() []CashAccountOrderStrategies {
	if o == nil || o.OrderStrategies == nil {
		var ret []CashAccountOrderStrategies
		return ret
	}
	return *o.OrderStrategies
}

// GetOrderStrategiesOk returns a tuple with the OrderStrategies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccount) GetOrderStrategiesOk() (*[]CashAccountOrderStrategies, bool) {
	if o == nil || o.OrderStrategies == nil {
		return nil, false
	}
	return o.OrderStrategies, true
}

// HasOrderStrategies returns a boolean if a field has been set.
func (o *CashAccount) HasOrderStrategies() bool {
	if o != nil && o.OrderStrategies != nil {
		return true
	}

	return false
}

// SetOrderStrategies gets a reference to the given []CashAccountOrderStrategies and assigns it to the OrderStrategies field.
func (o *CashAccount) SetOrderStrategies(v []CashAccountOrderStrategies) {
	o.OrderStrategies = &v
}

// GetPositions returns the Positions field value if set, zero value otherwise.
func (o *CashAccount) GetPositions() []CashAccountPositions {
	if o == nil || o.Positions == nil {
		var ret []CashAccountPositions
		return ret
	}
	return *o.Positions
}

// GetPositionsOk returns a tuple with the Positions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccount) GetPositionsOk() (*[]CashAccountPositions, bool) {
	if o == nil || o.Positions == nil {
		return nil, false
	}
	return o.Positions, true
}

// HasPositions returns a boolean if a field has been set.
func (o *CashAccount) HasPositions() bool {
	if o != nil && o.Positions != nil {
		return true
	}

	return false
}

// SetPositions gets a reference to the given []CashAccountPositions and assigns it to the Positions field.
func (o *CashAccount) SetPositions(v []CashAccountPositions) {
	o.Positions = &v
}

// GetProjectedBalances returns the ProjectedBalances field value if set, zero value otherwise.
func (o *CashAccount) GetProjectedBalances() CashAccountCurrentBalances {
	if o == nil || o.ProjectedBalances == nil {
		var ret CashAccountCurrentBalances
		return ret
	}
	return *o.ProjectedBalances
}

// GetProjectedBalancesOk returns a tuple with the ProjectedBalances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccount) GetProjectedBalancesOk() (*CashAccountCurrentBalances, bool) {
	if o == nil || o.ProjectedBalances == nil {
		return nil, false
	}
	return o.ProjectedBalances, true
}

// HasProjectedBalances returns a boolean if a field has been set.
func (o *CashAccount) HasProjectedBalances() bool {
	if o != nil && o.ProjectedBalances != nil {
		return true
	}

	return false
}

// SetProjectedBalances gets a reference to the given CashAccountCurrentBalances and assigns it to the ProjectedBalances field.
func (o *CashAccount) SetProjectedBalances(v CashAccountCurrentBalances) {
	o.ProjectedBalances = &v
}

// GetRoundTrips returns the RoundTrips field value if set, zero value otherwise.
func (o *CashAccount) GetRoundTrips() float32 {
	if o == nil || o.RoundTrips == nil {
		var ret float32
		return ret
	}
	return *o.RoundTrips
}

// GetRoundTripsOk returns a tuple with the RoundTrips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccount) GetRoundTripsOk() (*float32, bool) {
	if o == nil || o.RoundTrips == nil {
		return nil, false
	}
	return o.RoundTrips, true
}

// HasRoundTrips returns a boolean if a field has been set.
func (o *CashAccount) HasRoundTrips() bool {
	if o != nil && o.RoundTrips != nil {
		return true
	}

	return false
}

// SetRoundTrips gets a reference to the given float32 and assigns it to the RoundTrips field.
func (o *CashAccount) SetRoundTrips(v float32) {
	o.RoundTrips = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CashAccount) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccount) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CashAccount) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CashAccount) SetType(v string) {
	o.Type = &v
}

func (o CashAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountId != nil {
		toSerialize["accountId"] = o.AccountId
	}
	if o.CurrentBalances != nil {
		toSerialize["currentBalances"] = o.CurrentBalances
	}
	if o.InitialBalances != nil {
		toSerialize["initialBalances"] = o.InitialBalances
	}
	if o.IsClosingOnlyRestricted != nil {
		toSerialize["isClosingOnlyRestricted"] = o.IsClosingOnlyRestricted
	}
	if o.IsDayTrader != nil {
		toSerialize["isDayTrader"] = o.IsDayTrader
	}
	if o.OrderStrategies != nil {
		toSerialize["orderStrategies"] = o.OrderStrategies
	}
	if o.Positions != nil {
		toSerialize["positions"] = o.Positions
	}
	if o.ProjectedBalances != nil {
		toSerialize["projectedBalances"] = o.ProjectedBalances
	}
	if o.RoundTrips != nil {
		toSerialize["roundTrips"] = o.RoundTrips
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableCashAccount struct {
	value *CashAccount
	isSet bool
}

func (v NullableCashAccount) Get() *CashAccount {
	return v.value
}

func (v *NullableCashAccount) Set(val *CashAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableCashAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableCashAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashAccount(val *CashAccount) *NullableCashAccount {
	return &NullableCashAccount{value: val, isSet: true}
}

func (v NullableCashAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


