/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CashAccountCurrentBalances struct for CashAccountCurrentBalances
type CashAccountCurrentBalances struct {
	AccruedInterest *float32 `json:"accruedInterest,omitempty"`
	BondValue *float32 `json:"bondValue,omitempty"`
	CashAvailableForTrading *float32 `json:"cashAvailableForTrading,omitempty"`
	CashAvailableForWithdrawal *float32 `json:"cashAvailableForWithdrawal,omitempty"`
	CashBalance *float32 `json:"cashBalance,omitempty"`
	CashCall *float32 `json:"cashCall,omitempty"`
	CashDebitCallValue *float32 `json:"cashDebitCallValue,omitempty"`
	CashReceipts *float32 `json:"cashReceipts,omitempty"`
	LiquidationValue *float32 `json:"liquidationValue,omitempty"`
	LongMarketValue *float32 `json:"longMarketValue,omitempty"`
	LongNonMarginableMarketValue *float32 `json:"longNonMarginableMarketValue,omitempty"`
	LongOptionMarketValue *float32 `json:"longOptionMarketValue,omitempty"`
	MoneyMarketFund *float32 `json:"moneyMarketFund,omitempty"`
	MutualFundValue *float32 `json:"mutualFundValue,omitempty"`
	PendingDeposits *float32 `json:"pendingDeposits,omitempty"`
	Savings *float32 `json:"savings,omitempty"`
	ShortMarketValue *float32 `json:"shortMarketValue,omitempty"`
	ShortOptionMarketValue *float32 `json:"shortOptionMarketValue,omitempty"`
	TotalCash *float32 `json:"totalCash,omitempty"`
	UnsettledCash *float32 `json:"unsettledCash,omitempty"`
}

// NewCashAccountCurrentBalances instantiates a new CashAccountCurrentBalances object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashAccountCurrentBalances() *CashAccountCurrentBalances {
	this := CashAccountCurrentBalances{}
	return &this
}

// NewCashAccountCurrentBalancesWithDefaults instantiates a new CashAccountCurrentBalances object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashAccountCurrentBalancesWithDefaults() *CashAccountCurrentBalances {
	this := CashAccountCurrentBalances{}
	return &this
}

// GetAccruedInterest returns the AccruedInterest field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetAccruedInterest() float32 {
	if o == nil || o.AccruedInterest == nil {
		var ret float32
		return ret
	}
	return *o.AccruedInterest
}

// GetAccruedInterestOk returns a tuple with the AccruedInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetAccruedInterestOk() (*float32, bool) {
	if o == nil || o.AccruedInterest == nil {
		return nil, false
	}
	return o.AccruedInterest, true
}

// HasAccruedInterest returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasAccruedInterest() bool {
	if o != nil && o.AccruedInterest != nil {
		return true
	}

	return false
}

// SetAccruedInterest gets a reference to the given float32 and assigns it to the AccruedInterest field.
func (o *CashAccountCurrentBalances) SetAccruedInterest(v float32) {
	o.AccruedInterest = &v
}

// GetBondValue returns the BondValue field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetBondValue() float32 {
	if o == nil || o.BondValue == nil {
		var ret float32
		return ret
	}
	return *o.BondValue
}

// GetBondValueOk returns a tuple with the BondValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetBondValueOk() (*float32, bool) {
	if o == nil || o.BondValue == nil {
		return nil, false
	}
	return o.BondValue, true
}

// HasBondValue returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasBondValue() bool {
	if o != nil && o.BondValue != nil {
		return true
	}

	return false
}

// SetBondValue gets a reference to the given float32 and assigns it to the BondValue field.
func (o *CashAccountCurrentBalances) SetBondValue(v float32) {
	o.BondValue = &v
}

// GetCashAvailableForTrading returns the CashAvailableForTrading field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetCashAvailableForTrading() float32 {
	if o == nil || o.CashAvailableForTrading == nil {
		var ret float32
		return ret
	}
	return *o.CashAvailableForTrading
}

// GetCashAvailableForTradingOk returns a tuple with the CashAvailableForTrading field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetCashAvailableForTradingOk() (*float32, bool) {
	if o == nil || o.CashAvailableForTrading == nil {
		return nil, false
	}
	return o.CashAvailableForTrading, true
}

// HasCashAvailableForTrading returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasCashAvailableForTrading() bool {
	if o != nil && o.CashAvailableForTrading != nil {
		return true
	}

	return false
}

// SetCashAvailableForTrading gets a reference to the given float32 and assigns it to the CashAvailableForTrading field.
func (o *CashAccountCurrentBalances) SetCashAvailableForTrading(v float32) {
	o.CashAvailableForTrading = &v
}

// GetCashAvailableForWithdrawal returns the CashAvailableForWithdrawal field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetCashAvailableForWithdrawal() float32 {
	if o == nil || o.CashAvailableForWithdrawal == nil {
		var ret float32
		return ret
	}
	return *o.CashAvailableForWithdrawal
}

// GetCashAvailableForWithdrawalOk returns a tuple with the CashAvailableForWithdrawal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetCashAvailableForWithdrawalOk() (*float32, bool) {
	if o == nil || o.CashAvailableForWithdrawal == nil {
		return nil, false
	}
	return o.CashAvailableForWithdrawal, true
}

// HasCashAvailableForWithdrawal returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasCashAvailableForWithdrawal() bool {
	if o != nil && o.CashAvailableForWithdrawal != nil {
		return true
	}

	return false
}

// SetCashAvailableForWithdrawal gets a reference to the given float32 and assigns it to the CashAvailableForWithdrawal field.
func (o *CashAccountCurrentBalances) SetCashAvailableForWithdrawal(v float32) {
	o.CashAvailableForWithdrawal = &v
}

// GetCashBalance returns the CashBalance field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetCashBalance() float32 {
	if o == nil || o.CashBalance == nil {
		var ret float32
		return ret
	}
	return *o.CashBalance
}

// GetCashBalanceOk returns a tuple with the CashBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetCashBalanceOk() (*float32, bool) {
	if o == nil || o.CashBalance == nil {
		return nil, false
	}
	return o.CashBalance, true
}

// HasCashBalance returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasCashBalance() bool {
	if o != nil && o.CashBalance != nil {
		return true
	}

	return false
}

// SetCashBalance gets a reference to the given float32 and assigns it to the CashBalance field.
func (o *CashAccountCurrentBalances) SetCashBalance(v float32) {
	o.CashBalance = &v
}

// GetCashCall returns the CashCall field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetCashCall() float32 {
	if o == nil || o.CashCall == nil {
		var ret float32
		return ret
	}
	return *o.CashCall
}

// GetCashCallOk returns a tuple with the CashCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetCashCallOk() (*float32, bool) {
	if o == nil || o.CashCall == nil {
		return nil, false
	}
	return o.CashCall, true
}

// HasCashCall returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasCashCall() bool {
	if o != nil && o.CashCall != nil {
		return true
	}

	return false
}

// SetCashCall gets a reference to the given float32 and assigns it to the CashCall field.
func (o *CashAccountCurrentBalances) SetCashCall(v float32) {
	o.CashCall = &v
}

// GetCashDebitCallValue returns the CashDebitCallValue field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetCashDebitCallValue() float32 {
	if o == nil || o.CashDebitCallValue == nil {
		var ret float32
		return ret
	}
	return *o.CashDebitCallValue
}

// GetCashDebitCallValueOk returns a tuple with the CashDebitCallValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetCashDebitCallValueOk() (*float32, bool) {
	if o == nil || o.CashDebitCallValue == nil {
		return nil, false
	}
	return o.CashDebitCallValue, true
}

// HasCashDebitCallValue returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasCashDebitCallValue() bool {
	if o != nil && o.CashDebitCallValue != nil {
		return true
	}

	return false
}

// SetCashDebitCallValue gets a reference to the given float32 and assigns it to the CashDebitCallValue field.
func (o *CashAccountCurrentBalances) SetCashDebitCallValue(v float32) {
	o.CashDebitCallValue = &v
}

// GetCashReceipts returns the CashReceipts field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetCashReceipts() float32 {
	if o == nil || o.CashReceipts == nil {
		var ret float32
		return ret
	}
	return *o.CashReceipts
}

// GetCashReceiptsOk returns a tuple with the CashReceipts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetCashReceiptsOk() (*float32, bool) {
	if o == nil || o.CashReceipts == nil {
		return nil, false
	}
	return o.CashReceipts, true
}

// HasCashReceipts returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasCashReceipts() bool {
	if o != nil && o.CashReceipts != nil {
		return true
	}

	return false
}

// SetCashReceipts gets a reference to the given float32 and assigns it to the CashReceipts field.
func (o *CashAccountCurrentBalances) SetCashReceipts(v float32) {
	o.CashReceipts = &v
}

// GetLiquidationValue returns the LiquidationValue field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetLiquidationValue() float32 {
	if o == nil || o.LiquidationValue == nil {
		var ret float32
		return ret
	}
	return *o.LiquidationValue
}

// GetLiquidationValueOk returns a tuple with the LiquidationValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetLiquidationValueOk() (*float32, bool) {
	if o == nil || o.LiquidationValue == nil {
		return nil, false
	}
	return o.LiquidationValue, true
}

// HasLiquidationValue returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasLiquidationValue() bool {
	if o != nil && o.LiquidationValue != nil {
		return true
	}

	return false
}

// SetLiquidationValue gets a reference to the given float32 and assigns it to the LiquidationValue field.
func (o *CashAccountCurrentBalances) SetLiquidationValue(v float32) {
	o.LiquidationValue = &v
}

// GetLongMarketValue returns the LongMarketValue field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetLongMarketValue() float32 {
	if o == nil || o.LongMarketValue == nil {
		var ret float32
		return ret
	}
	return *o.LongMarketValue
}

// GetLongMarketValueOk returns a tuple with the LongMarketValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetLongMarketValueOk() (*float32, bool) {
	if o == nil || o.LongMarketValue == nil {
		return nil, false
	}
	return o.LongMarketValue, true
}

// HasLongMarketValue returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasLongMarketValue() bool {
	if o != nil && o.LongMarketValue != nil {
		return true
	}

	return false
}

// SetLongMarketValue gets a reference to the given float32 and assigns it to the LongMarketValue field.
func (o *CashAccountCurrentBalances) SetLongMarketValue(v float32) {
	o.LongMarketValue = &v
}

// GetLongNonMarginableMarketValue returns the LongNonMarginableMarketValue field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetLongNonMarginableMarketValue() float32 {
	if o == nil || o.LongNonMarginableMarketValue == nil {
		var ret float32
		return ret
	}
	return *o.LongNonMarginableMarketValue
}

// GetLongNonMarginableMarketValueOk returns a tuple with the LongNonMarginableMarketValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetLongNonMarginableMarketValueOk() (*float32, bool) {
	if o == nil || o.LongNonMarginableMarketValue == nil {
		return nil, false
	}
	return o.LongNonMarginableMarketValue, true
}

// HasLongNonMarginableMarketValue returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasLongNonMarginableMarketValue() bool {
	if o != nil && o.LongNonMarginableMarketValue != nil {
		return true
	}

	return false
}

// SetLongNonMarginableMarketValue gets a reference to the given float32 and assigns it to the LongNonMarginableMarketValue field.
func (o *CashAccountCurrentBalances) SetLongNonMarginableMarketValue(v float32) {
	o.LongNonMarginableMarketValue = &v
}

// GetLongOptionMarketValue returns the LongOptionMarketValue field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetLongOptionMarketValue() float32 {
	if o == nil || o.LongOptionMarketValue == nil {
		var ret float32
		return ret
	}
	return *o.LongOptionMarketValue
}

// GetLongOptionMarketValueOk returns a tuple with the LongOptionMarketValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetLongOptionMarketValueOk() (*float32, bool) {
	if o == nil || o.LongOptionMarketValue == nil {
		return nil, false
	}
	return o.LongOptionMarketValue, true
}

// HasLongOptionMarketValue returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasLongOptionMarketValue() bool {
	if o != nil && o.LongOptionMarketValue != nil {
		return true
	}

	return false
}

// SetLongOptionMarketValue gets a reference to the given float32 and assigns it to the LongOptionMarketValue field.
func (o *CashAccountCurrentBalances) SetLongOptionMarketValue(v float32) {
	o.LongOptionMarketValue = &v
}

// GetMoneyMarketFund returns the MoneyMarketFund field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetMoneyMarketFund() float32 {
	if o == nil || o.MoneyMarketFund == nil {
		var ret float32
		return ret
	}
	return *o.MoneyMarketFund
}

// GetMoneyMarketFundOk returns a tuple with the MoneyMarketFund field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetMoneyMarketFundOk() (*float32, bool) {
	if o == nil || o.MoneyMarketFund == nil {
		return nil, false
	}
	return o.MoneyMarketFund, true
}

// HasMoneyMarketFund returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasMoneyMarketFund() bool {
	if o != nil && o.MoneyMarketFund != nil {
		return true
	}

	return false
}

// SetMoneyMarketFund gets a reference to the given float32 and assigns it to the MoneyMarketFund field.
func (o *CashAccountCurrentBalances) SetMoneyMarketFund(v float32) {
	o.MoneyMarketFund = &v
}

// GetMutualFundValue returns the MutualFundValue field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetMutualFundValue() float32 {
	if o == nil || o.MutualFundValue == nil {
		var ret float32
		return ret
	}
	return *o.MutualFundValue
}

// GetMutualFundValueOk returns a tuple with the MutualFundValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetMutualFundValueOk() (*float32, bool) {
	if o == nil || o.MutualFundValue == nil {
		return nil, false
	}
	return o.MutualFundValue, true
}

// HasMutualFundValue returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasMutualFundValue() bool {
	if o != nil && o.MutualFundValue != nil {
		return true
	}

	return false
}

// SetMutualFundValue gets a reference to the given float32 and assigns it to the MutualFundValue field.
func (o *CashAccountCurrentBalances) SetMutualFundValue(v float32) {
	o.MutualFundValue = &v
}

// GetPendingDeposits returns the PendingDeposits field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetPendingDeposits() float32 {
	if o == nil || o.PendingDeposits == nil {
		var ret float32
		return ret
	}
	return *o.PendingDeposits
}

// GetPendingDepositsOk returns a tuple with the PendingDeposits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetPendingDepositsOk() (*float32, bool) {
	if o == nil || o.PendingDeposits == nil {
		return nil, false
	}
	return o.PendingDeposits, true
}

// HasPendingDeposits returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasPendingDeposits() bool {
	if o != nil && o.PendingDeposits != nil {
		return true
	}

	return false
}

// SetPendingDeposits gets a reference to the given float32 and assigns it to the PendingDeposits field.
func (o *CashAccountCurrentBalances) SetPendingDeposits(v float32) {
	o.PendingDeposits = &v
}

// GetSavings returns the Savings field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetSavings() float32 {
	if o == nil || o.Savings == nil {
		var ret float32
		return ret
	}
	return *o.Savings
}

// GetSavingsOk returns a tuple with the Savings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetSavingsOk() (*float32, bool) {
	if o == nil || o.Savings == nil {
		return nil, false
	}
	return o.Savings, true
}

// HasSavings returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasSavings() bool {
	if o != nil && o.Savings != nil {
		return true
	}

	return false
}

// SetSavings gets a reference to the given float32 and assigns it to the Savings field.
func (o *CashAccountCurrentBalances) SetSavings(v float32) {
	o.Savings = &v
}

// GetShortMarketValue returns the ShortMarketValue field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetShortMarketValue() float32 {
	if o == nil || o.ShortMarketValue == nil {
		var ret float32
		return ret
	}
	return *o.ShortMarketValue
}

// GetShortMarketValueOk returns a tuple with the ShortMarketValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetShortMarketValueOk() (*float32, bool) {
	if o == nil || o.ShortMarketValue == nil {
		return nil, false
	}
	return o.ShortMarketValue, true
}

// HasShortMarketValue returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasShortMarketValue() bool {
	if o != nil && o.ShortMarketValue != nil {
		return true
	}

	return false
}

// SetShortMarketValue gets a reference to the given float32 and assigns it to the ShortMarketValue field.
func (o *CashAccountCurrentBalances) SetShortMarketValue(v float32) {
	o.ShortMarketValue = &v
}

// GetShortOptionMarketValue returns the ShortOptionMarketValue field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetShortOptionMarketValue() float32 {
	if o == nil || o.ShortOptionMarketValue == nil {
		var ret float32
		return ret
	}
	return *o.ShortOptionMarketValue
}

// GetShortOptionMarketValueOk returns a tuple with the ShortOptionMarketValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetShortOptionMarketValueOk() (*float32, bool) {
	if o == nil || o.ShortOptionMarketValue == nil {
		return nil, false
	}
	return o.ShortOptionMarketValue, true
}

// HasShortOptionMarketValue returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasShortOptionMarketValue() bool {
	if o != nil && o.ShortOptionMarketValue != nil {
		return true
	}

	return false
}

// SetShortOptionMarketValue gets a reference to the given float32 and assigns it to the ShortOptionMarketValue field.
func (o *CashAccountCurrentBalances) SetShortOptionMarketValue(v float32) {
	o.ShortOptionMarketValue = &v
}

// GetTotalCash returns the TotalCash field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetTotalCash() float32 {
	if o == nil || o.TotalCash == nil {
		var ret float32
		return ret
	}
	return *o.TotalCash
}

// GetTotalCashOk returns a tuple with the TotalCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetTotalCashOk() (*float32, bool) {
	if o == nil || o.TotalCash == nil {
		return nil, false
	}
	return o.TotalCash, true
}

// HasTotalCash returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasTotalCash() bool {
	if o != nil && o.TotalCash != nil {
		return true
	}

	return false
}

// SetTotalCash gets a reference to the given float32 and assigns it to the TotalCash field.
func (o *CashAccountCurrentBalances) SetTotalCash(v float32) {
	o.TotalCash = &v
}

// GetUnsettledCash returns the UnsettledCash field value if set, zero value otherwise.
func (o *CashAccountCurrentBalances) GetUnsettledCash() float32 {
	if o == nil || o.UnsettledCash == nil {
		var ret float32
		return ret
	}
	return *o.UnsettledCash
}

// GetUnsettledCashOk returns a tuple with the UnsettledCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountCurrentBalances) GetUnsettledCashOk() (*float32, bool) {
	if o == nil || o.UnsettledCash == nil {
		return nil, false
	}
	return o.UnsettledCash, true
}

// HasUnsettledCash returns a boolean if a field has been set.
func (o *CashAccountCurrentBalances) HasUnsettledCash() bool {
	if o != nil && o.UnsettledCash != nil {
		return true
	}

	return false
}

// SetUnsettledCash gets a reference to the given float32 and assigns it to the UnsettledCash field.
func (o *CashAccountCurrentBalances) SetUnsettledCash(v float32) {
	o.UnsettledCash = &v
}

func (o CashAccountCurrentBalances) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccruedInterest != nil {
		toSerialize["accruedInterest"] = o.AccruedInterest
	}
	if o.BondValue != nil {
		toSerialize["bondValue"] = o.BondValue
	}
	if o.CashAvailableForTrading != nil {
		toSerialize["cashAvailableForTrading"] = o.CashAvailableForTrading
	}
	if o.CashAvailableForWithdrawal != nil {
		toSerialize["cashAvailableForWithdrawal"] = o.CashAvailableForWithdrawal
	}
	if o.CashBalance != nil {
		toSerialize["cashBalance"] = o.CashBalance
	}
	if o.CashCall != nil {
		toSerialize["cashCall"] = o.CashCall
	}
	if o.CashDebitCallValue != nil {
		toSerialize["cashDebitCallValue"] = o.CashDebitCallValue
	}
	if o.CashReceipts != nil {
		toSerialize["cashReceipts"] = o.CashReceipts
	}
	if o.LiquidationValue != nil {
		toSerialize["liquidationValue"] = o.LiquidationValue
	}
	if o.LongMarketValue != nil {
		toSerialize["longMarketValue"] = o.LongMarketValue
	}
	if o.LongNonMarginableMarketValue != nil {
		toSerialize["longNonMarginableMarketValue"] = o.LongNonMarginableMarketValue
	}
	if o.LongOptionMarketValue != nil {
		toSerialize["longOptionMarketValue"] = o.LongOptionMarketValue
	}
	if o.MoneyMarketFund != nil {
		toSerialize["moneyMarketFund"] = o.MoneyMarketFund
	}
	if o.MutualFundValue != nil {
		toSerialize["mutualFundValue"] = o.MutualFundValue
	}
	if o.PendingDeposits != nil {
		toSerialize["pendingDeposits"] = o.PendingDeposits
	}
	if o.Savings != nil {
		toSerialize["savings"] = o.Savings
	}
	if o.ShortMarketValue != nil {
		toSerialize["shortMarketValue"] = o.ShortMarketValue
	}
	if o.ShortOptionMarketValue != nil {
		toSerialize["shortOptionMarketValue"] = o.ShortOptionMarketValue
	}
	if o.TotalCash != nil {
		toSerialize["totalCash"] = o.TotalCash
	}
	if o.UnsettledCash != nil {
		toSerialize["unsettledCash"] = o.UnsettledCash
	}
	return json.Marshal(toSerialize)
}

type NullableCashAccountCurrentBalances struct {
	value *CashAccountCurrentBalances
	isSet bool
}

func (v NullableCashAccountCurrentBalances) Get() *CashAccountCurrentBalances {
	return v.value
}

func (v *NullableCashAccountCurrentBalances) Set(val *CashAccountCurrentBalances) {
	v.value = val
	v.isSet = true
}

func (v NullableCashAccountCurrentBalances) IsSet() bool {
	return v.isSet
}

func (v *NullableCashAccountCurrentBalances) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashAccountCurrentBalances(val *CashAccountCurrentBalances) *NullableCashAccountCurrentBalances {
	return &NullableCashAccountCurrentBalances{value: val, isSet: true}
}

func (v NullableCashAccountCurrentBalances) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashAccountCurrentBalances) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


