/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CandleListCandles struct for CandleListCandles
type CandleListCandles struct {
	Close *float32 `json:"close,omitempty"`
	Datetime *float32 `json:"datetime,omitempty"`
	High *float32 `json:"high,omitempty"`
	Low *float32 `json:"low,omitempty"`
	Open *float32 `json:"open,omitempty"`
	Volume *float32 `json:"volume,omitempty"`
}

// NewCandleListCandles instantiates a new CandleListCandles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCandleListCandles() *CandleListCandles {
	this := CandleListCandles{}
	return &this
}

// NewCandleListCandlesWithDefaults instantiates a new CandleListCandles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCandleListCandlesWithDefaults() *CandleListCandles {
	this := CandleListCandles{}
	return &this
}

// GetClose returns the Close field value if set, zero value otherwise.
func (o *CandleListCandles) GetClose() float32 {
	if o == nil || o.Close == nil {
		var ret float32
		return ret
	}
	return *o.Close
}

// GetCloseOk returns a tuple with the Close field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CandleListCandles) GetCloseOk() (*float32, bool) {
	if o == nil || o.Close == nil {
		return nil, false
	}
	return o.Close, true
}

// HasClose returns a boolean if a field has been set.
func (o *CandleListCandles) HasClose() bool {
	if o != nil && o.Close != nil {
		return true
	}

	return false
}

// SetClose gets a reference to the given float32 and assigns it to the Close field.
func (o *CandleListCandles) SetClose(v float32) {
	o.Close = &v
}

// GetDatetime returns the Datetime field value if set, zero value otherwise.
func (o *CandleListCandles) GetDatetime() float32 {
	if o == nil || o.Datetime == nil {
		var ret float32
		return ret
	}
	return *o.Datetime
}

// GetDatetimeOk returns a tuple with the Datetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CandleListCandles) GetDatetimeOk() (*float32, bool) {
	if o == nil || o.Datetime == nil {
		return nil, false
	}
	return o.Datetime, true
}

// HasDatetime returns a boolean if a field has been set.
func (o *CandleListCandles) HasDatetime() bool {
	if o != nil && o.Datetime != nil {
		return true
	}

	return false
}

// SetDatetime gets a reference to the given float32 and assigns it to the Datetime field.
func (o *CandleListCandles) SetDatetime(v float32) {
	o.Datetime = &v
}

// GetHigh returns the High field value if set, zero value otherwise.
func (o *CandleListCandles) GetHigh() float32 {
	if o == nil || o.High == nil {
		var ret float32
		return ret
	}
	return *o.High
}

// GetHighOk returns a tuple with the High field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CandleListCandles) GetHighOk() (*float32, bool) {
	if o == nil || o.High == nil {
		return nil, false
	}
	return o.High, true
}

// HasHigh returns a boolean if a field has been set.
func (o *CandleListCandles) HasHigh() bool {
	if o != nil && o.High != nil {
		return true
	}

	return false
}

// SetHigh gets a reference to the given float32 and assigns it to the High field.
func (o *CandleListCandles) SetHigh(v float32) {
	o.High = &v
}

// GetLow returns the Low field value if set, zero value otherwise.
func (o *CandleListCandles) GetLow() float32 {
	if o == nil || o.Low == nil {
		var ret float32
		return ret
	}
	return *o.Low
}

// GetLowOk returns a tuple with the Low field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CandleListCandles) GetLowOk() (*float32, bool) {
	if o == nil || o.Low == nil {
		return nil, false
	}
	return o.Low, true
}

// HasLow returns a boolean if a field has been set.
func (o *CandleListCandles) HasLow() bool {
	if o != nil && o.Low != nil {
		return true
	}

	return false
}

// SetLow gets a reference to the given float32 and assigns it to the Low field.
func (o *CandleListCandles) SetLow(v float32) {
	o.Low = &v
}

// GetOpen returns the Open field value if set, zero value otherwise.
func (o *CandleListCandles) GetOpen() float32 {
	if o == nil || o.Open == nil {
		var ret float32
		return ret
	}
	return *o.Open
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CandleListCandles) GetOpenOk() (*float32, bool) {
	if o == nil || o.Open == nil {
		return nil, false
	}
	return o.Open, true
}

// HasOpen returns a boolean if a field has been set.
func (o *CandleListCandles) HasOpen() bool {
	if o != nil && o.Open != nil {
		return true
	}

	return false
}

// SetOpen gets a reference to the given float32 and assigns it to the Open field.
func (o *CandleListCandles) SetOpen(v float32) {
	o.Open = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *CandleListCandles) GetVolume() float32 {
	if o == nil || o.Volume == nil {
		var ret float32
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CandleListCandles) GetVolumeOk() (*float32, bool) {
	if o == nil || o.Volume == nil {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *CandleListCandles) HasVolume() bool {
	if o != nil && o.Volume != nil {
		return true
	}

	return false
}

// SetVolume gets a reference to the given float32 and assigns it to the Volume field.
func (o *CandleListCandles) SetVolume(v float32) {
	o.Volume = &v
}

func (o CandleListCandles) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Close != nil {
		toSerialize["close"] = o.Close
	}
	if o.Datetime != nil {
		toSerialize["datetime"] = o.Datetime
	}
	if o.High != nil {
		toSerialize["high"] = o.High
	}
	if o.Low != nil {
		toSerialize["low"] = o.Low
	}
	if o.Open != nil {
		toSerialize["open"] = o.Open
	}
	if o.Volume != nil {
		toSerialize["volume"] = o.Volume
	}
	return json.Marshal(toSerialize)
}

type NullableCandleListCandles struct {
	value *CandleListCandles
	isSet bool
}

func (v NullableCandleListCandles) Get() *CandleListCandles {
	return v.value
}

func (v *NullableCandleListCandles) Set(val *CandleListCandles) {
	v.value = val
	v.isSet = true
}

func (v NullableCandleListCandles) IsSet() bool {
	return v.isSet
}

func (v *NullableCandleListCandles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCandleListCandles(val *CandleListCandles) *NullableCandleListCandles {
	return &NullableCandleListCandles{value: val, isSet: true}
}

func (v NullableCandleListCandles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCandleListCandles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


