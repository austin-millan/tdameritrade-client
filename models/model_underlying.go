/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Underlying struct for Underlying
type Underlying struct {
	Ask *float32 `json:"ask,omitempty"`
	AskSize *float32 `json:"askSize,omitempty"`
	Bid *float32 `json:"bid,omitempty"`
	BidSize *float32 `json:"bidSize,omitempty"`
	Change *float32 `json:"change,omitempty"`
	Close *float32 `json:"close,omitempty"`
	Delayed *bool `json:"delayed,omitempty"`
	Description *string `json:"description,omitempty"`
	ExchangeName *string `json:"exchangeName,omitempty"`
	FiftyTwoWeekHigh *float32 `json:"fiftyTwoWeekHigh,omitempty"`
	FiftyTwoWeekLow *float32 `json:"fiftyTwoWeekLow,omitempty"`
	HighPrice *float32 `json:"highPrice,omitempty"`
	Last *float32 `json:"last,omitempty"`
	LowPrice *float32 `json:"lowPrice,omitempty"`
	Mark *float32 `json:"mark,omitempty"`
	MarkChange *float32 `json:"markChange,omitempty"`
	MarkPercentChange *float32 `json:"markPercentChange,omitempty"`
	OpenPrice *float32 `json:"openPrice,omitempty"`
	PercentChange *float32 `json:"percentChange,omitempty"`
	QuoteTime *float32 `json:"quoteTime,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	TotalVolume *float32 `json:"totalVolume,omitempty"`
	TradeTime *float32 `json:"tradeTime,omitempty"`
}

// NewUnderlying instantiates a new Underlying object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnderlying() *Underlying {
	this := Underlying{}
	return &this
}

// NewUnderlyingWithDefaults instantiates a new Underlying object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnderlyingWithDefaults() *Underlying {
	this := Underlying{}
	return &this
}

// GetAsk returns the Ask field value if set, zero value otherwise.
func (o *Underlying) GetAsk() float32 {
	if o == nil || o.Ask == nil {
		var ret float32
		return ret
	}
	return *o.Ask
}

// GetAskOk returns a tuple with the Ask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetAskOk() (*float32, bool) {
	if o == nil || o.Ask == nil {
		return nil, false
	}
	return o.Ask, true
}

// HasAsk returns a boolean if a field has been set.
func (o *Underlying) HasAsk() bool {
	if o != nil && o.Ask != nil {
		return true
	}

	return false
}

// SetAsk gets a reference to the given float32 and assigns it to the Ask field.
func (o *Underlying) SetAsk(v float32) {
	o.Ask = &v
}

// GetAskSize returns the AskSize field value if set, zero value otherwise.
func (o *Underlying) GetAskSize() float32 {
	if o == nil || o.AskSize == nil {
		var ret float32
		return ret
	}
	return *o.AskSize
}

// GetAskSizeOk returns a tuple with the AskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetAskSizeOk() (*float32, bool) {
	if o == nil || o.AskSize == nil {
		return nil, false
	}
	return o.AskSize, true
}

// HasAskSize returns a boolean if a field has been set.
func (o *Underlying) HasAskSize() bool {
	if o != nil && o.AskSize != nil {
		return true
	}

	return false
}

// SetAskSize gets a reference to the given float32 and assigns it to the AskSize field.
func (o *Underlying) SetAskSize(v float32) {
	o.AskSize = &v
}

// GetBid returns the Bid field value if set, zero value otherwise.
func (o *Underlying) GetBid() float32 {
	if o == nil || o.Bid == nil {
		var ret float32
		return ret
	}
	return *o.Bid
}

// GetBidOk returns a tuple with the Bid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetBidOk() (*float32, bool) {
	if o == nil || o.Bid == nil {
		return nil, false
	}
	return o.Bid, true
}

// HasBid returns a boolean if a field has been set.
func (o *Underlying) HasBid() bool {
	if o != nil && o.Bid != nil {
		return true
	}

	return false
}

// SetBid gets a reference to the given float32 and assigns it to the Bid field.
func (o *Underlying) SetBid(v float32) {
	o.Bid = &v
}

// GetBidSize returns the BidSize field value if set, zero value otherwise.
func (o *Underlying) GetBidSize() float32 {
	if o == nil || o.BidSize == nil {
		var ret float32
		return ret
	}
	return *o.BidSize
}

// GetBidSizeOk returns a tuple with the BidSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetBidSizeOk() (*float32, bool) {
	if o == nil || o.BidSize == nil {
		return nil, false
	}
	return o.BidSize, true
}

// HasBidSize returns a boolean if a field has been set.
func (o *Underlying) HasBidSize() bool {
	if o != nil && o.BidSize != nil {
		return true
	}

	return false
}

// SetBidSize gets a reference to the given float32 and assigns it to the BidSize field.
func (o *Underlying) SetBidSize(v float32) {
	o.BidSize = &v
}

// GetChange returns the Change field value if set, zero value otherwise.
func (o *Underlying) GetChange() float32 {
	if o == nil || o.Change == nil {
		var ret float32
		return ret
	}
	return *o.Change
}

// GetChangeOk returns a tuple with the Change field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetChangeOk() (*float32, bool) {
	if o == nil || o.Change == nil {
		return nil, false
	}
	return o.Change, true
}

// HasChange returns a boolean if a field has been set.
func (o *Underlying) HasChange() bool {
	if o != nil && o.Change != nil {
		return true
	}

	return false
}

// SetChange gets a reference to the given float32 and assigns it to the Change field.
func (o *Underlying) SetChange(v float32) {
	o.Change = &v
}

// GetClose returns the Close field value if set, zero value otherwise.
func (o *Underlying) GetClose() float32 {
	if o == nil || o.Close == nil {
		var ret float32
		return ret
	}
	return *o.Close
}

// GetCloseOk returns a tuple with the Close field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetCloseOk() (*float32, bool) {
	if o == nil || o.Close == nil {
		return nil, false
	}
	return o.Close, true
}

// HasClose returns a boolean if a field has been set.
func (o *Underlying) HasClose() bool {
	if o != nil && o.Close != nil {
		return true
	}

	return false
}

// SetClose gets a reference to the given float32 and assigns it to the Close field.
func (o *Underlying) SetClose(v float32) {
	o.Close = &v
}

// GetDelayed returns the Delayed field value if set, zero value otherwise.
func (o *Underlying) GetDelayed() bool {
	if o == nil || o.Delayed == nil {
		var ret bool
		return ret
	}
	return *o.Delayed
}

// GetDelayedOk returns a tuple with the Delayed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetDelayedOk() (*bool, bool) {
	if o == nil || o.Delayed == nil {
		return nil, false
	}
	return o.Delayed, true
}

// HasDelayed returns a boolean if a field has been set.
func (o *Underlying) HasDelayed() bool {
	if o != nil && o.Delayed != nil {
		return true
	}

	return false
}

// SetDelayed gets a reference to the given bool and assigns it to the Delayed field.
func (o *Underlying) SetDelayed(v bool) {
	o.Delayed = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Underlying) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Underlying) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Underlying) SetDescription(v string) {
	o.Description = &v
}

// GetExchangeName returns the ExchangeName field value if set, zero value otherwise.
func (o *Underlying) GetExchangeName() string {
	if o == nil || o.ExchangeName == nil {
		var ret string
		return ret
	}
	return *o.ExchangeName
}

// GetExchangeNameOk returns a tuple with the ExchangeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetExchangeNameOk() (*string, bool) {
	if o == nil || o.ExchangeName == nil {
		return nil, false
	}
	return o.ExchangeName, true
}

// HasExchangeName returns a boolean if a field has been set.
func (o *Underlying) HasExchangeName() bool {
	if o != nil && o.ExchangeName != nil {
		return true
	}

	return false
}

// SetExchangeName gets a reference to the given string and assigns it to the ExchangeName field.
func (o *Underlying) SetExchangeName(v string) {
	o.ExchangeName = &v
}

// GetFiftyTwoWeekHigh returns the FiftyTwoWeekHigh field value if set, zero value otherwise.
func (o *Underlying) GetFiftyTwoWeekHigh() float32 {
	if o == nil || o.FiftyTwoWeekHigh == nil {
		var ret float32
		return ret
	}
	return *o.FiftyTwoWeekHigh
}

// GetFiftyTwoWeekHighOk returns a tuple with the FiftyTwoWeekHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetFiftyTwoWeekHighOk() (*float32, bool) {
	if o == nil || o.FiftyTwoWeekHigh == nil {
		return nil, false
	}
	return o.FiftyTwoWeekHigh, true
}

// HasFiftyTwoWeekHigh returns a boolean if a field has been set.
func (o *Underlying) HasFiftyTwoWeekHigh() bool {
	if o != nil && o.FiftyTwoWeekHigh != nil {
		return true
	}

	return false
}

// SetFiftyTwoWeekHigh gets a reference to the given float32 and assigns it to the FiftyTwoWeekHigh field.
func (o *Underlying) SetFiftyTwoWeekHigh(v float32) {
	o.FiftyTwoWeekHigh = &v
}

// GetFiftyTwoWeekLow returns the FiftyTwoWeekLow field value if set, zero value otherwise.
func (o *Underlying) GetFiftyTwoWeekLow() float32 {
	if o == nil || o.FiftyTwoWeekLow == nil {
		var ret float32
		return ret
	}
	return *o.FiftyTwoWeekLow
}

// GetFiftyTwoWeekLowOk returns a tuple with the FiftyTwoWeekLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetFiftyTwoWeekLowOk() (*float32, bool) {
	if o == nil || o.FiftyTwoWeekLow == nil {
		return nil, false
	}
	return o.FiftyTwoWeekLow, true
}

// HasFiftyTwoWeekLow returns a boolean if a field has been set.
func (o *Underlying) HasFiftyTwoWeekLow() bool {
	if o != nil && o.FiftyTwoWeekLow != nil {
		return true
	}

	return false
}

// SetFiftyTwoWeekLow gets a reference to the given float32 and assigns it to the FiftyTwoWeekLow field.
func (o *Underlying) SetFiftyTwoWeekLow(v float32) {
	o.FiftyTwoWeekLow = &v
}

// GetHighPrice returns the HighPrice field value if set, zero value otherwise.
func (o *Underlying) GetHighPrice() float32 {
	if o == nil || o.HighPrice == nil {
		var ret float32
		return ret
	}
	return *o.HighPrice
}

// GetHighPriceOk returns a tuple with the HighPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetHighPriceOk() (*float32, bool) {
	if o == nil || o.HighPrice == nil {
		return nil, false
	}
	return o.HighPrice, true
}

// HasHighPrice returns a boolean if a field has been set.
func (o *Underlying) HasHighPrice() bool {
	if o != nil && o.HighPrice != nil {
		return true
	}

	return false
}

// SetHighPrice gets a reference to the given float32 and assigns it to the HighPrice field.
func (o *Underlying) SetHighPrice(v float32) {
	o.HighPrice = &v
}

// GetLast returns the Last field value if set, zero value otherwise.
func (o *Underlying) GetLast() float32 {
	if o == nil || o.Last == nil {
		var ret float32
		return ret
	}
	return *o.Last
}

// GetLastOk returns a tuple with the Last field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetLastOk() (*float32, bool) {
	if o == nil || o.Last == nil {
		return nil, false
	}
	return o.Last, true
}

// HasLast returns a boolean if a field has been set.
func (o *Underlying) HasLast() bool {
	if o != nil && o.Last != nil {
		return true
	}

	return false
}

// SetLast gets a reference to the given float32 and assigns it to the Last field.
func (o *Underlying) SetLast(v float32) {
	o.Last = &v
}

// GetLowPrice returns the LowPrice field value if set, zero value otherwise.
func (o *Underlying) GetLowPrice() float32 {
	if o == nil || o.LowPrice == nil {
		var ret float32
		return ret
	}
	return *o.LowPrice
}

// GetLowPriceOk returns a tuple with the LowPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetLowPriceOk() (*float32, bool) {
	if o == nil || o.LowPrice == nil {
		return nil, false
	}
	return o.LowPrice, true
}

// HasLowPrice returns a boolean if a field has been set.
func (o *Underlying) HasLowPrice() bool {
	if o != nil && o.LowPrice != nil {
		return true
	}

	return false
}

// SetLowPrice gets a reference to the given float32 and assigns it to the LowPrice field.
func (o *Underlying) SetLowPrice(v float32) {
	o.LowPrice = &v
}

// GetMark returns the Mark field value if set, zero value otherwise.
func (o *Underlying) GetMark() float32 {
	if o == nil || o.Mark == nil {
		var ret float32
		return ret
	}
	return *o.Mark
}

// GetMarkOk returns a tuple with the Mark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetMarkOk() (*float32, bool) {
	if o == nil || o.Mark == nil {
		return nil, false
	}
	return o.Mark, true
}

// HasMark returns a boolean if a field has been set.
func (o *Underlying) HasMark() bool {
	if o != nil && o.Mark != nil {
		return true
	}

	return false
}

// SetMark gets a reference to the given float32 and assigns it to the Mark field.
func (o *Underlying) SetMark(v float32) {
	o.Mark = &v
}

// GetMarkChange returns the MarkChange field value if set, zero value otherwise.
func (o *Underlying) GetMarkChange() float32 {
	if o == nil || o.MarkChange == nil {
		var ret float32
		return ret
	}
	return *o.MarkChange
}

// GetMarkChangeOk returns a tuple with the MarkChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetMarkChangeOk() (*float32, bool) {
	if o == nil || o.MarkChange == nil {
		return nil, false
	}
	return o.MarkChange, true
}

// HasMarkChange returns a boolean if a field has been set.
func (o *Underlying) HasMarkChange() bool {
	if o != nil && o.MarkChange != nil {
		return true
	}

	return false
}

// SetMarkChange gets a reference to the given float32 and assigns it to the MarkChange field.
func (o *Underlying) SetMarkChange(v float32) {
	o.MarkChange = &v
}

// GetMarkPercentChange returns the MarkPercentChange field value if set, zero value otherwise.
func (o *Underlying) GetMarkPercentChange() float32 {
	if o == nil || o.MarkPercentChange == nil {
		var ret float32
		return ret
	}
	return *o.MarkPercentChange
}

// GetMarkPercentChangeOk returns a tuple with the MarkPercentChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetMarkPercentChangeOk() (*float32, bool) {
	if o == nil || o.MarkPercentChange == nil {
		return nil, false
	}
	return o.MarkPercentChange, true
}

// HasMarkPercentChange returns a boolean if a field has been set.
func (o *Underlying) HasMarkPercentChange() bool {
	if o != nil && o.MarkPercentChange != nil {
		return true
	}

	return false
}

// SetMarkPercentChange gets a reference to the given float32 and assigns it to the MarkPercentChange field.
func (o *Underlying) SetMarkPercentChange(v float32) {
	o.MarkPercentChange = &v
}

// GetOpenPrice returns the OpenPrice field value if set, zero value otherwise.
func (o *Underlying) GetOpenPrice() float32 {
	if o == nil || o.OpenPrice == nil {
		var ret float32
		return ret
	}
	return *o.OpenPrice
}

// GetOpenPriceOk returns a tuple with the OpenPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetOpenPriceOk() (*float32, bool) {
	if o == nil || o.OpenPrice == nil {
		return nil, false
	}
	return o.OpenPrice, true
}

// HasOpenPrice returns a boolean if a field has been set.
func (o *Underlying) HasOpenPrice() bool {
	if o != nil && o.OpenPrice != nil {
		return true
	}

	return false
}

// SetOpenPrice gets a reference to the given float32 and assigns it to the OpenPrice field.
func (o *Underlying) SetOpenPrice(v float32) {
	o.OpenPrice = &v
}

// GetPercentChange returns the PercentChange field value if set, zero value otherwise.
func (o *Underlying) GetPercentChange() float32 {
	if o == nil || o.PercentChange == nil {
		var ret float32
		return ret
	}
	return *o.PercentChange
}

// GetPercentChangeOk returns a tuple with the PercentChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetPercentChangeOk() (*float32, bool) {
	if o == nil || o.PercentChange == nil {
		return nil, false
	}
	return o.PercentChange, true
}

// HasPercentChange returns a boolean if a field has been set.
func (o *Underlying) HasPercentChange() bool {
	if o != nil && o.PercentChange != nil {
		return true
	}

	return false
}

// SetPercentChange gets a reference to the given float32 and assigns it to the PercentChange field.
func (o *Underlying) SetPercentChange(v float32) {
	o.PercentChange = &v
}

// GetQuoteTime returns the QuoteTime field value if set, zero value otherwise.
func (o *Underlying) GetQuoteTime() float32 {
	if o == nil || o.QuoteTime == nil {
		var ret float32
		return ret
	}
	return *o.QuoteTime
}

// GetQuoteTimeOk returns a tuple with the QuoteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetQuoteTimeOk() (*float32, bool) {
	if o == nil || o.QuoteTime == nil {
		return nil, false
	}
	return o.QuoteTime, true
}

// HasQuoteTime returns a boolean if a field has been set.
func (o *Underlying) HasQuoteTime() bool {
	if o != nil && o.QuoteTime != nil {
		return true
	}

	return false
}

// SetQuoteTime gets a reference to the given float32 and assigns it to the QuoteTime field.
func (o *Underlying) SetQuoteTime(v float32) {
	o.QuoteTime = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Underlying) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Underlying) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Underlying) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTotalVolume returns the TotalVolume field value if set, zero value otherwise.
func (o *Underlying) GetTotalVolume() float32 {
	if o == nil || o.TotalVolume == nil {
		var ret float32
		return ret
	}
	return *o.TotalVolume
}

// GetTotalVolumeOk returns a tuple with the TotalVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetTotalVolumeOk() (*float32, bool) {
	if o == nil || o.TotalVolume == nil {
		return nil, false
	}
	return o.TotalVolume, true
}

// HasTotalVolume returns a boolean if a field has been set.
func (o *Underlying) HasTotalVolume() bool {
	if o != nil && o.TotalVolume != nil {
		return true
	}

	return false
}

// SetTotalVolume gets a reference to the given float32 and assigns it to the TotalVolume field.
func (o *Underlying) SetTotalVolume(v float32) {
	o.TotalVolume = &v
}

// GetTradeTime returns the TradeTime field value if set, zero value otherwise.
func (o *Underlying) GetTradeTime() float32 {
	if o == nil || o.TradeTime == nil {
		var ret float32
		return ret
	}
	return *o.TradeTime
}

// GetTradeTimeOk returns a tuple with the TradeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Underlying) GetTradeTimeOk() (*float32, bool) {
	if o == nil || o.TradeTime == nil {
		return nil, false
	}
	return o.TradeTime, true
}

// HasTradeTime returns a boolean if a field has been set.
func (o *Underlying) HasTradeTime() bool {
	if o != nil && o.TradeTime != nil {
		return true
	}

	return false
}

// SetTradeTime gets a reference to the given float32 and assigns it to the TradeTime field.
func (o *Underlying) SetTradeTime(v float32) {
	o.TradeTime = &v
}

func (o Underlying) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ask != nil {
		toSerialize["ask"] = o.Ask
	}
	if o.AskSize != nil {
		toSerialize["askSize"] = o.AskSize
	}
	if o.Bid != nil {
		toSerialize["bid"] = o.Bid
	}
	if o.BidSize != nil {
		toSerialize["bidSize"] = o.BidSize
	}
	if o.Change != nil {
		toSerialize["change"] = o.Change
	}
	if o.Close != nil {
		toSerialize["close"] = o.Close
	}
	if o.Delayed != nil {
		toSerialize["delayed"] = o.Delayed
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.ExchangeName != nil {
		toSerialize["exchangeName"] = o.ExchangeName
	}
	if o.FiftyTwoWeekHigh != nil {
		toSerialize["fiftyTwoWeekHigh"] = o.FiftyTwoWeekHigh
	}
	if o.FiftyTwoWeekLow != nil {
		toSerialize["fiftyTwoWeekLow"] = o.FiftyTwoWeekLow
	}
	if o.HighPrice != nil {
		toSerialize["highPrice"] = o.HighPrice
	}
	if o.Last != nil {
		toSerialize["last"] = o.Last
	}
	if o.LowPrice != nil {
		toSerialize["lowPrice"] = o.LowPrice
	}
	if o.Mark != nil {
		toSerialize["mark"] = o.Mark
	}
	if o.MarkChange != nil {
		toSerialize["markChange"] = o.MarkChange
	}
	if o.MarkPercentChange != nil {
		toSerialize["markPercentChange"] = o.MarkPercentChange
	}
	if o.OpenPrice != nil {
		toSerialize["openPrice"] = o.OpenPrice
	}
	if o.PercentChange != nil {
		toSerialize["percentChange"] = o.PercentChange
	}
	if o.QuoteTime != nil {
		toSerialize["quoteTime"] = o.QuoteTime
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.TotalVolume != nil {
		toSerialize["totalVolume"] = o.TotalVolume
	}
	if o.TradeTime != nil {
		toSerialize["tradeTime"] = o.TradeTime
	}
	return json.Marshal(toSerialize)
}

type NullableUnderlying struct {
	value *Underlying
	isSet bool
}

func (v NullableUnderlying) Get() *Underlying {
	return v.value
}

func (v *NullableUnderlying) Set(val *Underlying) {
	v.value = val
	v.isSet = true
}

func (v NullableUnderlying) IsSet() bool {
	return v.isSet
}

func (v *NullableUnderlying) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnderlying(val *Underlying) *NullableUnderlying {
	return &NullableUnderlying{value: val, isSet: true}
}

func (v NullableUnderlying) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnderlying) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


