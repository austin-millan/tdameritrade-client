/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FundamentalData struct for FundamentalData
type FundamentalData struct {
	Beta *float32 `json:"beta,omitempty"`
	BookValuePerShare *float32 `json:"bookValuePerShare,omitempty"`
	CurrentRatio *float32 `json:"currentRatio,omitempty"`
	DivGrowthRate3Year *float32 `json:"divGrowthRate3Year,omitempty"`
	DividendAmount *float32 `json:"dividendAmount,omitempty"`
	DividendDate *string `json:"dividendDate,omitempty"`
	DividendPayAmount *float32 `json:"dividendPayAmount,omitempty"`
	DividendPayDate *string `json:"dividendPayDate,omitempty"`
	DividendYield *float32 `json:"dividendYield,omitempty"`
	EpsChange *float32 `json:"epsChange,omitempty"`
	EpsChangePercentTTM *float32 `json:"epsChangePercentTTM,omitempty"`
	EpsChangeYear *float32 `json:"epsChangeYear,omitempty"`
	EpsTTM *float32 `json:"epsTTM,omitempty"`
	GrossMarginMRQ *float32 `json:"grossMarginMRQ,omitempty"`
	GrossMarginTTM *float32 `json:"grossMarginTTM,omitempty"`
	High52 *float32 `json:"high52,omitempty"`
	InterestCoverage *float32 `json:"interestCoverage,omitempty"`
	Low52 *float32 `json:"low52,omitempty"`
	LtDebtToEquity *float32 `json:"ltDebtToEquity,omitempty"`
	MarketCap *float32 `json:"marketCap,omitempty"`
	MarketCapFloat *float32 `json:"marketCapFloat,omitempty"`
	NetProfitMarginMRQ *float32 `json:"netProfitMarginMRQ,omitempty"`
	NetProfitMarginTTM *float32 `json:"netProfitMarginTTM,omitempty"`
	OperatingMarginMRQ *float32 `json:"operatingMarginMRQ,omitempty"`
	OperatingMarginTTM *float32 `json:"operatingMarginTTM,omitempty"`
	PbRatio *float32 `json:"pbRatio,omitempty"`
	PcfRatio *float32 `json:"pcfRatio,omitempty"`
	PeRatio *float32 `json:"peRatio,omitempty"`
	PegRatio *float32 `json:"pegRatio,omitempty"`
	PrRatio *float32 `json:"prRatio,omitempty"`
	QuickRatio *float32 `json:"quickRatio,omitempty"`
	ReturnOnAssets *float32 `json:"returnOnAssets,omitempty"`
	ReturnOnEquity *float32 `json:"returnOnEquity,omitempty"`
	ReturnOnInvestment *float32 `json:"returnOnInvestment,omitempty"`
	RevChangeIn *float32 `json:"revChangeIn,omitempty"`
	RevChangeTTM *float32 `json:"revChangeTTM,omitempty"`
	RevChangeYear *float32 `json:"revChangeYear,omitempty"`
	SharesOutstanding *float32 `json:"sharesOutstanding,omitempty"`
	ShortIntDayToCover *float32 `json:"shortIntDayToCover,omitempty"`
	ShortIntToFloat *float32 `json:"shortIntToFloat,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	TotalDebtToCapital *float32 `json:"totalDebtToCapital,omitempty"`
	TotalDebtToEquity *float32 `json:"totalDebtToEquity,omitempty"`
	Vol10DayAvg *float32 `json:"vol10DayAvg,omitempty"`
	Vol1DayAvg *float32 `json:"vol1DayAvg,omitempty"`
	Vol3MonthAvg *float32 `json:"vol3MonthAvg,omitempty"`
}

// NewFundamentalData instantiates a new FundamentalData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalData() *FundamentalData {
	this := FundamentalData{}
	return &this
}

// NewFundamentalDataWithDefaults instantiates a new FundamentalData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalDataWithDefaults() *FundamentalData {
	this := FundamentalData{}
	return &this
}

// GetBeta returns the Beta field value if set, zero value otherwise.
func (o *FundamentalData) GetBeta() float32 {
	if o == nil || o.Beta == nil {
		var ret float32
		return ret
	}
	return *o.Beta
}

// GetBetaOk returns a tuple with the Beta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetBetaOk() (*float32, bool) {
	if o == nil || o.Beta == nil {
		return nil, false
	}
	return o.Beta, true
}

// HasBeta returns a boolean if a field has been set.
func (o *FundamentalData) HasBeta() bool {
	if o != nil && o.Beta != nil {
		return true
	}

	return false
}

// SetBeta gets a reference to the given float32 and assigns it to the Beta field.
func (o *FundamentalData) SetBeta(v float32) {
	o.Beta = &v
}

// GetBookValuePerShare returns the BookValuePerShare field value if set, zero value otherwise.
func (o *FundamentalData) GetBookValuePerShare() float32 {
	if o == nil || o.BookValuePerShare == nil {
		var ret float32
		return ret
	}
	return *o.BookValuePerShare
}

// GetBookValuePerShareOk returns a tuple with the BookValuePerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetBookValuePerShareOk() (*float32, bool) {
	if o == nil || o.BookValuePerShare == nil {
		return nil, false
	}
	return o.BookValuePerShare, true
}

// HasBookValuePerShare returns a boolean if a field has been set.
func (o *FundamentalData) HasBookValuePerShare() bool {
	if o != nil && o.BookValuePerShare != nil {
		return true
	}

	return false
}

// SetBookValuePerShare gets a reference to the given float32 and assigns it to the BookValuePerShare field.
func (o *FundamentalData) SetBookValuePerShare(v float32) {
	o.BookValuePerShare = &v
}

// GetCurrentRatio returns the CurrentRatio field value if set, zero value otherwise.
func (o *FundamentalData) GetCurrentRatio() float32 {
	if o == nil || o.CurrentRatio == nil {
		var ret float32
		return ret
	}
	return *o.CurrentRatio
}

// GetCurrentRatioOk returns a tuple with the CurrentRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetCurrentRatioOk() (*float32, bool) {
	if o == nil || o.CurrentRatio == nil {
		return nil, false
	}
	return o.CurrentRatio, true
}

// HasCurrentRatio returns a boolean if a field has been set.
func (o *FundamentalData) HasCurrentRatio() bool {
	if o != nil && o.CurrentRatio != nil {
		return true
	}

	return false
}

// SetCurrentRatio gets a reference to the given float32 and assigns it to the CurrentRatio field.
func (o *FundamentalData) SetCurrentRatio(v float32) {
	o.CurrentRatio = &v
}

// GetDivGrowthRate3Year returns the DivGrowthRate3Year field value if set, zero value otherwise.
func (o *FundamentalData) GetDivGrowthRate3Year() float32 {
	if o == nil || o.DivGrowthRate3Year == nil {
		var ret float32
		return ret
	}
	return *o.DivGrowthRate3Year
}

// GetDivGrowthRate3YearOk returns a tuple with the DivGrowthRate3Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetDivGrowthRate3YearOk() (*float32, bool) {
	if o == nil || o.DivGrowthRate3Year == nil {
		return nil, false
	}
	return o.DivGrowthRate3Year, true
}

// HasDivGrowthRate3Year returns a boolean if a field has been set.
func (o *FundamentalData) HasDivGrowthRate3Year() bool {
	if o != nil && o.DivGrowthRate3Year != nil {
		return true
	}

	return false
}

// SetDivGrowthRate3Year gets a reference to the given float32 and assigns it to the DivGrowthRate3Year field.
func (o *FundamentalData) SetDivGrowthRate3Year(v float32) {
	o.DivGrowthRate3Year = &v
}

// GetDividendAmount returns the DividendAmount field value if set, zero value otherwise.
func (o *FundamentalData) GetDividendAmount() float32 {
	if o == nil || o.DividendAmount == nil {
		var ret float32
		return ret
	}
	return *o.DividendAmount
}

// GetDividendAmountOk returns a tuple with the DividendAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetDividendAmountOk() (*float32, bool) {
	if o == nil || o.DividendAmount == nil {
		return nil, false
	}
	return o.DividendAmount, true
}

// HasDividendAmount returns a boolean if a field has been set.
func (o *FundamentalData) HasDividendAmount() bool {
	if o != nil && o.DividendAmount != nil {
		return true
	}

	return false
}

// SetDividendAmount gets a reference to the given float32 and assigns it to the DividendAmount field.
func (o *FundamentalData) SetDividendAmount(v float32) {
	o.DividendAmount = &v
}

// GetDividendDate returns the DividendDate field value if set, zero value otherwise.
func (o *FundamentalData) GetDividendDate() string {
	if o == nil || o.DividendDate == nil {
		var ret string
		return ret
	}
	return *o.DividendDate
}

// GetDividendDateOk returns a tuple with the DividendDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetDividendDateOk() (*string, bool) {
	if o == nil || o.DividendDate == nil {
		return nil, false
	}
	return o.DividendDate, true
}

// HasDividendDate returns a boolean if a field has been set.
func (o *FundamentalData) HasDividendDate() bool {
	if o != nil && o.DividendDate != nil {
		return true
	}

	return false
}

// SetDividendDate gets a reference to the given string and assigns it to the DividendDate field.
func (o *FundamentalData) SetDividendDate(v string) {
	o.DividendDate = &v
}

// GetDividendPayAmount returns the DividendPayAmount field value if set, zero value otherwise.
func (o *FundamentalData) GetDividendPayAmount() float32 {
	if o == nil || o.DividendPayAmount == nil {
		var ret float32
		return ret
	}
	return *o.DividendPayAmount
}

// GetDividendPayAmountOk returns a tuple with the DividendPayAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetDividendPayAmountOk() (*float32, bool) {
	if o == nil || o.DividendPayAmount == nil {
		return nil, false
	}
	return o.DividendPayAmount, true
}

// HasDividendPayAmount returns a boolean if a field has been set.
func (o *FundamentalData) HasDividendPayAmount() bool {
	if o != nil && o.DividendPayAmount != nil {
		return true
	}

	return false
}

// SetDividendPayAmount gets a reference to the given float32 and assigns it to the DividendPayAmount field.
func (o *FundamentalData) SetDividendPayAmount(v float32) {
	o.DividendPayAmount = &v
}

// GetDividendPayDate returns the DividendPayDate field value if set, zero value otherwise.
func (o *FundamentalData) GetDividendPayDate() string {
	if o == nil || o.DividendPayDate == nil {
		var ret string
		return ret
	}
	return *o.DividendPayDate
}

// GetDividendPayDateOk returns a tuple with the DividendPayDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetDividendPayDateOk() (*string, bool) {
	if o == nil || o.DividendPayDate == nil {
		return nil, false
	}
	return o.DividendPayDate, true
}

// HasDividendPayDate returns a boolean if a field has been set.
func (o *FundamentalData) HasDividendPayDate() bool {
	if o != nil && o.DividendPayDate != nil {
		return true
	}

	return false
}

// SetDividendPayDate gets a reference to the given string and assigns it to the DividendPayDate field.
func (o *FundamentalData) SetDividendPayDate(v string) {
	o.DividendPayDate = &v
}

// GetDividendYield returns the DividendYield field value if set, zero value otherwise.
func (o *FundamentalData) GetDividendYield() float32 {
	if o == nil || o.DividendYield == nil {
		var ret float32
		return ret
	}
	return *o.DividendYield
}

// GetDividendYieldOk returns a tuple with the DividendYield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetDividendYieldOk() (*float32, bool) {
	if o == nil || o.DividendYield == nil {
		return nil, false
	}
	return o.DividendYield, true
}

// HasDividendYield returns a boolean if a field has been set.
func (o *FundamentalData) HasDividendYield() bool {
	if o != nil && o.DividendYield != nil {
		return true
	}

	return false
}

// SetDividendYield gets a reference to the given float32 and assigns it to the DividendYield field.
func (o *FundamentalData) SetDividendYield(v float32) {
	o.DividendYield = &v
}

// GetEpsChange returns the EpsChange field value if set, zero value otherwise.
func (o *FundamentalData) GetEpsChange() float32 {
	if o == nil || o.EpsChange == nil {
		var ret float32
		return ret
	}
	return *o.EpsChange
}

// GetEpsChangeOk returns a tuple with the EpsChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetEpsChangeOk() (*float32, bool) {
	if o == nil || o.EpsChange == nil {
		return nil, false
	}
	return o.EpsChange, true
}

// HasEpsChange returns a boolean if a field has been set.
func (o *FundamentalData) HasEpsChange() bool {
	if o != nil && o.EpsChange != nil {
		return true
	}

	return false
}

// SetEpsChange gets a reference to the given float32 and assigns it to the EpsChange field.
func (o *FundamentalData) SetEpsChange(v float32) {
	o.EpsChange = &v
}

// GetEpsChangePercentTTM returns the EpsChangePercentTTM field value if set, zero value otherwise.
func (o *FundamentalData) GetEpsChangePercentTTM() float32 {
	if o == nil || o.EpsChangePercentTTM == nil {
		var ret float32
		return ret
	}
	return *o.EpsChangePercentTTM
}

// GetEpsChangePercentTTMOk returns a tuple with the EpsChangePercentTTM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetEpsChangePercentTTMOk() (*float32, bool) {
	if o == nil || o.EpsChangePercentTTM == nil {
		return nil, false
	}
	return o.EpsChangePercentTTM, true
}

// HasEpsChangePercentTTM returns a boolean if a field has been set.
func (o *FundamentalData) HasEpsChangePercentTTM() bool {
	if o != nil && o.EpsChangePercentTTM != nil {
		return true
	}

	return false
}

// SetEpsChangePercentTTM gets a reference to the given float32 and assigns it to the EpsChangePercentTTM field.
func (o *FundamentalData) SetEpsChangePercentTTM(v float32) {
	o.EpsChangePercentTTM = &v
}

// GetEpsChangeYear returns the EpsChangeYear field value if set, zero value otherwise.
func (o *FundamentalData) GetEpsChangeYear() float32 {
	if o == nil || o.EpsChangeYear == nil {
		var ret float32
		return ret
	}
	return *o.EpsChangeYear
}

// GetEpsChangeYearOk returns a tuple with the EpsChangeYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetEpsChangeYearOk() (*float32, bool) {
	if o == nil || o.EpsChangeYear == nil {
		return nil, false
	}
	return o.EpsChangeYear, true
}

// HasEpsChangeYear returns a boolean if a field has been set.
func (o *FundamentalData) HasEpsChangeYear() bool {
	if o != nil && o.EpsChangeYear != nil {
		return true
	}

	return false
}

// SetEpsChangeYear gets a reference to the given float32 and assigns it to the EpsChangeYear field.
func (o *FundamentalData) SetEpsChangeYear(v float32) {
	o.EpsChangeYear = &v
}

// GetEpsTTM returns the EpsTTM field value if set, zero value otherwise.
func (o *FundamentalData) GetEpsTTM() float32 {
	if o == nil || o.EpsTTM == nil {
		var ret float32
		return ret
	}
	return *o.EpsTTM
}

// GetEpsTTMOk returns a tuple with the EpsTTM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetEpsTTMOk() (*float32, bool) {
	if o == nil || o.EpsTTM == nil {
		return nil, false
	}
	return o.EpsTTM, true
}

// HasEpsTTM returns a boolean if a field has been set.
func (o *FundamentalData) HasEpsTTM() bool {
	if o != nil && o.EpsTTM != nil {
		return true
	}

	return false
}

// SetEpsTTM gets a reference to the given float32 and assigns it to the EpsTTM field.
func (o *FundamentalData) SetEpsTTM(v float32) {
	o.EpsTTM = &v
}

// GetGrossMarginMRQ returns the GrossMarginMRQ field value if set, zero value otherwise.
func (o *FundamentalData) GetGrossMarginMRQ() float32 {
	if o == nil || o.GrossMarginMRQ == nil {
		var ret float32
		return ret
	}
	return *o.GrossMarginMRQ
}

// GetGrossMarginMRQOk returns a tuple with the GrossMarginMRQ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetGrossMarginMRQOk() (*float32, bool) {
	if o == nil || o.GrossMarginMRQ == nil {
		return nil, false
	}
	return o.GrossMarginMRQ, true
}

// HasGrossMarginMRQ returns a boolean if a field has been set.
func (o *FundamentalData) HasGrossMarginMRQ() bool {
	if o != nil && o.GrossMarginMRQ != nil {
		return true
	}

	return false
}

// SetGrossMarginMRQ gets a reference to the given float32 and assigns it to the GrossMarginMRQ field.
func (o *FundamentalData) SetGrossMarginMRQ(v float32) {
	o.GrossMarginMRQ = &v
}

// GetGrossMarginTTM returns the GrossMarginTTM field value if set, zero value otherwise.
func (o *FundamentalData) GetGrossMarginTTM() float32 {
	if o == nil || o.GrossMarginTTM == nil {
		var ret float32
		return ret
	}
	return *o.GrossMarginTTM
}

// GetGrossMarginTTMOk returns a tuple with the GrossMarginTTM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetGrossMarginTTMOk() (*float32, bool) {
	if o == nil || o.GrossMarginTTM == nil {
		return nil, false
	}
	return o.GrossMarginTTM, true
}

// HasGrossMarginTTM returns a boolean if a field has been set.
func (o *FundamentalData) HasGrossMarginTTM() bool {
	if o != nil && o.GrossMarginTTM != nil {
		return true
	}

	return false
}

// SetGrossMarginTTM gets a reference to the given float32 and assigns it to the GrossMarginTTM field.
func (o *FundamentalData) SetGrossMarginTTM(v float32) {
	o.GrossMarginTTM = &v
}

// GetHigh52 returns the High52 field value if set, zero value otherwise.
func (o *FundamentalData) GetHigh52() float32 {
	if o == nil || o.High52 == nil {
		var ret float32
		return ret
	}
	return *o.High52
}

// GetHigh52Ok returns a tuple with the High52 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetHigh52Ok() (*float32, bool) {
	if o == nil || o.High52 == nil {
		return nil, false
	}
	return o.High52, true
}

// HasHigh52 returns a boolean if a field has been set.
func (o *FundamentalData) HasHigh52() bool {
	if o != nil && o.High52 != nil {
		return true
	}

	return false
}

// SetHigh52 gets a reference to the given float32 and assigns it to the High52 field.
func (o *FundamentalData) SetHigh52(v float32) {
	o.High52 = &v
}

// GetInterestCoverage returns the InterestCoverage field value if set, zero value otherwise.
func (o *FundamentalData) GetInterestCoverage() float32 {
	if o == nil || o.InterestCoverage == nil {
		var ret float32
		return ret
	}
	return *o.InterestCoverage
}

// GetInterestCoverageOk returns a tuple with the InterestCoverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetInterestCoverageOk() (*float32, bool) {
	if o == nil || o.InterestCoverage == nil {
		return nil, false
	}
	return o.InterestCoverage, true
}

// HasInterestCoverage returns a boolean if a field has been set.
func (o *FundamentalData) HasInterestCoverage() bool {
	if o != nil && o.InterestCoverage != nil {
		return true
	}

	return false
}

// SetInterestCoverage gets a reference to the given float32 and assigns it to the InterestCoverage field.
func (o *FundamentalData) SetInterestCoverage(v float32) {
	o.InterestCoverage = &v
}

// GetLow52 returns the Low52 field value if set, zero value otherwise.
func (o *FundamentalData) GetLow52() float32 {
	if o == nil || o.Low52 == nil {
		var ret float32
		return ret
	}
	return *o.Low52
}

// GetLow52Ok returns a tuple with the Low52 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetLow52Ok() (*float32, bool) {
	if o == nil || o.Low52 == nil {
		return nil, false
	}
	return o.Low52, true
}

// HasLow52 returns a boolean if a field has been set.
func (o *FundamentalData) HasLow52() bool {
	if o != nil && o.Low52 != nil {
		return true
	}

	return false
}

// SetLow52 gets a reference to the given float32 and assigns it to the Low52 field.
func (o *FundamentalData) SetLow52(v float32) {
	o.Low52 = &v
}

// GetLtDebtToEquity returns the LtDebtToEquity field value if set, zero value otherwise.
func (o *FundamentalData) GetLtDebtToEquity() float32 {
	if o == nil || o.LtDebtToEquity == nil {
		var ret float32
		return ret
	}
	return *o.LtDebtToEquity
}

// GetLtDebtToEquityOk returns a tuple with the LtDebtToEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetLtDebtToEquityOk() (*float32, bool) {
	if o == nil || o.LtDebtToEquity == nil {
		return nil, false
	}
	return o.LtDebtToEquity, true
}

// HasLtDebtToEquity returns a boolean if a field has been set.
func (o *FundamentalData) HasLtDebtToEquity() bool {
	if o != nil && o.LtDebtToEquity != nil {
		return true
	}

	return false
}

// SetLtDebtToEquity gets a reference to the given float32 and assigns it to the LtDebtToEquity field.
func (o *FundamentalData) SetLtDebtToEquity(v float32) {
	o.LtDebtToEquity = &v
}

// GetMarketCap returns the MarketCap field value if set, zero value otherwise.
func (o *FundamentalData) GetMarketCap() float32 {
	if o == nil || o.MarketCap == nil {
		var ret float32
		return ret
	}
	return *o.MarketCap
}

// GetMarketCapOk returns a tuple with the MarketCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetMarketCapOk() (*float32, bool) {
	if o == nil || o.MarketCap == nil {
		return nil, false
	}
	return o.MarketCap, true
}

// HasMarketCap returns a boolean if a field has been set.
func (o *FundamentalData) HasMarketCap() bool {
	if o != nil && o.MarketCap != nil {
		return true
	}

	return false
}

// SetMarketCap gets a reference to the given float32 and assigns it to the MarketCap field.
func (o *FundamentalData) SetMarketCap(v float32) {
	o.MarketCap = &v
}

// GetMarketCapFloat returns the MarketCapFloat field value if set, zero value otherwise.
func (o *FundamentalData) GetMarketCapFloat() float32 {
	if o == nil || o.MarketCapFloat == nil {
		var ret float32
		return ret
	}
	return *o.MarketCapFloat
}

// GetMarketCapFloatOk returns a tuple with the MarketCapFloat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetMarketCapFloatOk() (*float32, bool) {
	if o == nil || o.MarketCapFloat == nil {
		return nil, false
	}
	return o.MarketCapFloat, true
}

// HasMarketCapFloat returns a boolean if a field has been set.
func (o *FundamentalData) HasMarketCapFloat() bool {
	if o != nil && o.MarketCapFloat != nil {
		return true
	}

	return false
}

// SetMarketCapFloat gets a reference to the given float32 and assigns it to the MarketCapFloat field.
func (o *FundamentalData) SetMarketCapFloat(v float32) {
	o.MarketCapFloat = &v
}

// GetNetProfitMarginMRQ returns the NetProfitMarginMRQ field value if set, zero value otherwise.
func (o *FundamentalData) GetNetProfitMarginMRQ() float32 {
	if o == nil || o.NetProfitMarginMRQ == nil {
		var ret float32
		return ret
	}
	return *o.NetProfitMarginMRQ
}

// GetNetProfitMarginMRQOk returns a tuple with the NetProfitMarginMRQ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetNetProfitMarginMRQOk() (*float32, bool) {
	if o == nil || o.NetProfitMarginMRQ == nil {
		return nil, false
	}
	return o.NetProfitMarginMRQ, true
}

// HasNetProfitMarginMRQ returns a boolean if a field has been set.
func (o *FundamentalData) HasNetProfitMarginMRQ() bool {
	if o != nil && o.NetProfitMarginMRQ != nil {
		return true
	}

	return false
}

// SetNetProfitMarginMRQ gets a reference to the given float32 and assigns it to the NetProfitMarginMRQ field.
func (o *FundamentalData) SetNetProfitMarginMRQ(v float32) {
	o.NetProfitMarginMRQ = &v
}

// GetNetProfitMarginTTM returns the NetProfitMarginTTM field value if set, zero value otherwise.
func (o *FundamentalData) GetNetProfitMarginTTM() float32 {
	if o == nil || o.NetProfitMarginTTM == nil {
		var ret float32
		return ret
	}
	return *o.NetProfitMarginTTM
}

// GetNetProfitMarginTTMOk returns a tuple with the NetProfitMarginTTM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetNetProfitMarginTTMOk() (*float32, bool) {
	if o == nil || o.NetProfitMarginTTM == nil {
		return nil, false
	}
	return o.NetProfitMarginTTM, true
}

// HasNetProfitMarginTTM returns a boolean if a field has been set.
func (o *FundamentalData) HasNetProfitMarginTTM() bool {
	if o != nil && o.NetProfitMarginTTM != nil {
		return true
	}

	return false
}

// SetNetProfitMarginTTM gets a reference to the given float32 and assigns it to the NetProfitMarginTTM field.
func (o *FundamentalData) SetNetProfitMarginTTM(v float32) {
	o.NetProfitMarginTTM = &v
}

// GetOperatingMarginMRQ returns the OperatingMarginMRQ field value if set, zero value otherwise.
func (o *FundamentalData) GetOperatingMarginMRQ() float32 {
	if o == nil || o.OperatingMarginMRQ == nil {
		var ret float32
		return ret
	}
	return *o.OperatingMarginMRQ
}

// GetOperatingMarginMRQOk returns a tuple with the OperatingMarginMRQ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetOperatingMarginMRQOk() (*float32, bool) {
	if o == nil || o.OperatingMarginMRQ == nil {
		return nil, false
	}
	return o.OperatingMarginMRQ, true
}

// HasOperatingMarginMRQ returns a boolean if a field has been set.
func (o *FundamentalData) HasOperatingMarginMRQ() bool {
	if o != nil && o.OperatingMarginMRQ != nil {
		return true
	}

	return false
}

// SetOperatingMarginMRQ gets a reference to the given float32 and assigns it to the OperatingMarginMRQ field.
func (o *FundamentalData) SetOperatingMarginMRQ(v float32) {
	o.OperatingMarginMRQ = &v
}

// GetOperatingMarginTTM returns the OperatingMarginTTM field value if set, zero value otherwise.
func (o *FundamentalData) GetOperatingMarginTTM() float32 {
	if o == nil || o.OperatingMarginTTM == nil {
		var ret float32
		return ret
	}
	return *o.OperatingMarginTTM
}

// GetOperatingMarginTTMOk returns a tuple with the OperatingMarginTTM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetOperatingMarginTTMOk() (*float32, bool) {
	if o == nil || o.OperatingMarginTTM == nil {
		return nil, false
	}
	return o.OperatingMarginTTM, true
}

// HasOperatingMarginTTM returns a boolean if a field has been set.
func (o *FundamentalData) HasOperatingMarginTTM() bool {
	if o != nil && o.OperatingMarginTTM != nil {
		return true
	}

	return false
}

// SetOperatingMarginTTM gets a reference to the given float32 and assigns it to the OperatingMarginTTM field.
func (o *FundamentalData) SetOperatingMarginTTM(v float32) {
	o.OperatingMarginTTM = &v
}

// GetPbRatio returns the PbRatio field value if set, zero value otherwise.
func (o *FundamentalData) GetPbRatio() float32 {
	if o == nil || o.PbRatio == nil {
		var ret float32
		return ret
	}
	return *o.PbRatio
}

// GetPbRatioOk returns a tuple with the PbRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetPbRatioOk() (*float32, bool) {
	if o == nil || o.PbRatio == nil {
		return nil, false
	}
	return o.PbRatio, true
}

// HasPbRatio returns a boolean if a field has been set.
func (o *FundamentalData) HasPbRatio() bool {
	if o != nil && o.PbRatio != nil {
		return true
	}

	return false
}

// SetPbRatio gets a reference to the given float32 and assigns it to the PbRatio field.
func (o *FundamentalData) SetPbRatio(v float32) {
	o.PbRatio = &v
}

// GetPcfRatio returns the PcfRatio field value if set, zero value otherwise.
func (o *FundamentalData) GetPcfRatio() float32 {
	if o == nil || o.PcfRatio == nil {
		var ret float32
		return ret
	}
	return *o.PcfRatio
}

// GetPcfRatioOk returns a tuple with the PcfRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetPcfRatioOk() (*float32, bool) {
	if o == nil || o.PcfRatio == nil {
		return nil, false
	}
	return o.PcfRatio, true
}

// HasPcfRatio returns a boolean if a field has been set.
func (o *FundamentalData) HasPcfRatio() bool {
	if o != nil && o.PcfRatio != nil {
		return true
	}

	return false
}

// SetPcfRatio gets a reference to the given float32 and assigns it to the PcfRatio field.
func (o *FundamentalData) SetPcfRatio(v float32) {
	o.PcfRatio = &v
}

// GetPeRatio returns the PeRatio field value if set, zero value otherwise.
func (o *FundamentalData) GetPeRatio() float32 {
	if o == nil || o.PeRatio == nil {
		var ret float32
		return ret
	}
	return *o.PeRatio
}

// GetPeRatioOk returns a tuple with the PeRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetPeRatioOk() (*float32, bool) {
	if o == nil || o.PeRatio == nil {
		return nil, false
	}
	return o.PeRatio, true
}

// HasPeRatio returns a boolean if a field has been set.
func (o *FundamentalData) HasPeRatio() bool {
	if o != nil && o.PeRatio != nil {
		return true
	}

	return false
}

// SetPeRatio gets a reference to the given float32 and assigns it to the PeRatio field.
func (o *FundamentalData) SetPeRatio(v float32) {
	o.PeRatio = &v
}

// GetPegRatio returns the PegRatio field value if set, zero value otherwise.
func (o *FundamentalData) GetPegRatio() float32 {
	if o == nil || o.PegRatio == nil {
		var ret float32
		return ret
	}
	return *o.PegRatio
}

// GetPegRatioOk returns a tuple with the PegRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetPegRatioOk() (*float32, bool) {
	if o == nil || o.PegRatio == nil {
		return nil, false
	}
	return o.PegRatio, true
}

// HasPegRatio returns a boolean if a field has been set.
func (o *FundamentalData) HasPegRatio() bool {
	if o != nil && o.PegRatio != nil {
		return true
	}

	return false
}

// SetPegRatio gets a reference to the given float32 and assigns it to the PegRatio field.
func (o *FundamentalData) SetPegRatio(v float32) {
	o.PegRatio = &v
}

// GetPrRatio returns the PrRatio field value if set, zero value otherwise.
func (o *FundamentalData) GetPrRatio() float32 {
	if o == nil || o.PrRatio == nil {
		var ret float32
		return ret
	}
	return *o.PrRatio
}

// GetPrRatioOk returns a tuple with the PrRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetPrRatioOk() (*float32, bool) {
	if o == nil || o.PrRatio == nil {
		return nil, false
	}
	return o.PrRatio, true
}

// HasPrRatio returns a boolean if a field has been set.
func (o *FundamentalData) HasPrRatio() bool {
	if o != nil && o.PrRatio != nil {
		return true
	}

	return false
}

// SetPrRatio gets a reference to the given float32 and assigns it to the PrRatio field.
func (o *FundamentalData) SetPrRatio(v float32) {
	o.PrRatio = &v
}

// GetQuickRatio returns the QuickRatio field value if set, zero value otherwise.
func (o *FundamentalData) GetQuickRatio() float32 {
	if o == nil || o.QuickRatio == nil {
		var ret float32
		return ret
	}
	return *o.QuickRatio
}

// GetQuickRatioOk returns a tuple with the QuickRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetQuickRatioOk() (*float32, bool) {
	if o == nil || o.QuickRatio == nil {
		return nil, false
	}
	return o.QuickRatio, true
}

// HasQuickRatio returns a boolean if a field has been set.
func (o *FundamentalData) HasQuickRatio() bool {
	if o != nil && o.QuickRatio != nil {
		return true
	}

	return false
}

// SetQuickRatio gets a reference to the given float32 and assigns it to the QuickRatio field.
func (o *FundamentalData) SetQuickRatio(v float32) {
	o.QuickRatio = &v
}

// GetReturnOnAssets returns the ReturnOnAssets field value if set, zero value otherwise.
func (o *FundamentalData) GetReturnOnAssets() float32 {
	if o == nil || o.ReturnOnAssets == nil {
		var ret float32
		return ret
	}
	return *o.ReturnOnAssets
}

// GetReturnOnAssetsOk returns a tuple with the ReturnOnAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetReturnOnAssetsOk() (*float32, bool) {
	if o == nil || o.ReturnOnAssets == nil {
		return nil, false
	}
	return o.ReturnOnAssets, true
}

// HasReturnOnAssets returns a boolean if a field has been set.
func (o *FundamentalData) HasReturnOnAssets() bool {
	if o != nil && o.ReturnOnAssets != nil {
		return true
	}

	return false
}

// SetReturnOnAssets gets a reference to the given float32 and assigns it to the ReturnOnAssets field.
func (o *FundamentalData) SetReturnOnAssets(v float32) {
	o.ReturnOnAssets = &v
}

// GetReturnOnEquity returns the ReturnOnEquity field value if set, zero value otherwise.
func (o *FundamentalData) GetReturnOnEquity() float32 {
	if o == nil || o.ReturnOnEquity == nil {
		var ret float32
		return ret
	}
	return *o.ReturnOnEquity
}

// GetReturnOnEquityOk returns a tuple with the ReturnOnEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetReturnOnEquityOk() (*float32, bool) {
	if o == nil || o.ReturnOnEquity == nil {
		return nil, false
	}
	return o.ReturnOnEquity, true
}

// HasReturnOnEquity returns a boolean if a field has been set.
func (o *FundamentalData) HasReturnOnEquity() bool {
	if o != nil && o.ReturnOnEquity != nil {
		return true
	}

	return false
}

// SetReturnOnEquity gets a reference to the given float32 and assigns it to the ReturnOnEquity field.
func (o *FundamentalData) SetReturnOnEquity(v float32) {
	o.ReturnOnEquity = &v
}

// GetReturnOnInvestment returns the ReturnOnInvestment field value if set, zero value otherwise.
func (o *FundamentalData) GetReturnOnInvestment() float32 {
	if o == nil || o.ReturnOnInvestment == nil {
		var ret float32
		return ret
	}
	return *o.ReturnOnInvestment
}

// GetReturnOnInvestmentOk returns a tuple with the ReturnOnInvestment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetReturnOnInvestmentOk() (*float32, bool) {
	if o == nil || o.ReturnOnInvestment == nil {
		return nil, false
	}
	return o.ReturnOnInvestment, true
}

// HasReturnOnInvestment returns a boolean if a field has been set.
func (o *FundamentalData) HasReturnOnInvestment() bool {
	if o != nil && o.ReturnOnInvestment != nil {
		return true
	}

	return false
}

// SetReturnOnInvestment gets a reference to the given float32 and assigns it to the ReturnOnInvestment field.
func (o *FundamentalData) SetReturnOnInvestment(v float32) {
	o.ReturnOnInvestment = &v
}

// GetRevChangeIn returns the RevChangeIn field value if set, zero value otherwise.
func (o *FundamentalData) GetRevChangeIn() float32 {
	if o == nil || o.RevChangeIn == nil {
		var ret float32
		return ret
	}
	return *o.RevChangeIn
}

// GetRevChangeInOk returns a tuple with the RevChangeIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetRevChangeInOk() (*float32, bool) {
	if o == nil || o.RevChangeIn == nil {
		return nil, false
	}
	return o.RevChangeIn, true
}

// HasRevChangeIn returns a boolean if a field has been set.
func (o *FundamentalData) HasRevChangeIn() bool {
	if o != nil && o.RevChangeIn != nil {
		return true
	}

	return false
}

// SetRevChangeIn gets a reference to the given float32 and assigns it to the RevChangeIn field.
func (o *FundamentalData) SetRevChangeIn(v float32) {
	o.RevChangeIn = &v
}

// GetRevChangeTTM returns the RevChangeTTM field value if set, zero value otherwise.
func (o *FundamentalData) GetRevChangeTTM() float32 {
	if o == nil || o.RevChangeTTM == nil {
		var ret float32
		return ret
	}
	return *o.RevChangeTTM
}

// GetRevChangeTTMOk returns a tuple with the RevChangeTTM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetRevChangeTTMOk() (*float32, bool) {
	if o == nil || o.RevChangeTTM == nil {
		return nil, false
	}
	return o.RevChangeTTM, true
}

// HasRevChangeTTM returns a boolean if a field has been set.
func (o *FundamentalData) HasRevChangeTTM() bool {
	if o != nil && o.RevChangeTTM != nil {
		return true
	}

	return false
}

// SetRevChangeTTM gets a reference to the given float32 and assigns it to the RevChangeTTM field.
func (o *FundamentalData) SetRevChangeTTM(v float32) {
	o.RevChangeTTM = &v
}

// GetRevChangeYear returns the RevChangeYear field value if set, zero value otherwise.
func (o *FundamentalData) GetRevChangeYear() float32 {
	if o == nil || o.RevChangeYear == nil {
		var ret float32
		return ret
	}
	return *o.RevChangeYear
}

// GetRevChangeYearOk returns a tuple with the RevChangeYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetRevChangeYearOk() (*float32, bool) {
	if o == nil || o.RevChangeYear == nil {
		return nil, false
	}
	return o.RevChangeYear, true
}

// HasRevChangeYear returns a boolean if a field has been set.
func (o *FundamentalData) HasRevChangeYear() bool {
	if o != nil && o.RevChangeYear != nil {
		return true
	}

	return false
}

// SetRevChangeYear gets a reference to the given float32 and assigns it to the RevChangeYear field.
func (o *FundamentalData) SetRevChangeYear(v float32) {
	o.RevChangeYear = &v
}

// GetSharesOutstanding returns the SharesOutstanding field value if set, zero value otherwise.
func (o *FundamentalData) GetSharesOutstanding() float32 {
	if o == nil || o.SharesOutstanding == nil {
		var ret float32
		return ret
	}
	return *o.SharesOutstanding
}

// GetSharesOutstandingOk returns a tuple with the SharesOutstanding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetSharesOutstandingOk() (*float32, bool) {
	if o == nil || o.SharesOutstanding == nil {
		return nil, false
	}
	return o.SharesOutstanding, true
}

// HasSharesOutstanding returns a boolean if a field has been set.
func (o *FundamentalData) HasSharesOutstanding() bool {
	if o != nil && o.SharesOutstanding != nil {
		return true
	}

	return false
}

// SetSharesOutstanding gets a reference to the given float32 and assigns it to the SharesOutstanding field.
func (o *FundamentalData) SetSharesOutstanding(v float32) {
	o.SharesOutstanding = &v
}

// GetShortIntDayToCover returns the ShortIntDayToCover field value if set, zero value otherwise.
func (o *FundamentalData) GetShortIntDayToCover() float32 {
	if o == nil || o.ShortIntDayToCover == nil {
		var ret float32
		return ret
	}
	return *o.ShortIntDayToCover
}

// GetShortIntDayToCoverOk returns a tuple with the ShortIntDayToCover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetShortIntDayToCoverOk() (*float32, bool) {
	if o == nil || o.ShortIntDayToCover == nil {
		return nil, false
	}
	return o.ShortIntDayToCover, true
}

// HasShortIntDayToCover returns a boolean if a field has been set.
func (o *FundamentalData) HasShortIntDayToCover() bool {
	if o != nil && o.ShortIntDayToCover != nil {
		return true
	}

	return false
}

// SetShortIntDayToCover gets a reference to the given float32 and assigns it to the ShortIntDayToCover field.
func (o *FundamentalData) SetShortIntDayToCover(v float32) {
	o.ShortIntDayToCover = &v
}

// GetShortIntToFloat returns the ShortIntToFloat field value if set, zero value otherwise.
func (o *FundamentalData) GetShortIntToFloat() float32 {
	if o == nil || o.ShortIntToFloat == nil {
		var ret float32
		return ret
	}
	return *o.ShortIntToFloat
}

// GetShortIntToFloatOk returns a tuple with the ShortIntToFloat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetShortIntToFloatOk() (*float32, bool) {
	if o == nil || o.ShortIntToFloat == nil {
		return nil, false
	}
	return o.ShortIntToFloat, true
}

// HasShortIntToFloat returns a boolean if a field has been set.
func (o *FundamentalData) HasShortIntToFloat() bool {
	if o != nil && o.ShortIntToFloat != nil {
		return true
	}

	return false
}

// SetShortIntToFloat gets a reference to the given float32 and assigns it to the ShortIntToFloat field.
func (o *FundamentalData) SetShortIntToFloat(v float32) {
	o.ShortIntToFloat = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *FundamentalData) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *FundamentalData) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *FundamentalData) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTotalDebtToCapital returns the TotalDebtToCapital field value if set, zero value otherwise.
func (o *FundamentalData) GetTotalDebtToCapital() float32 {
	if o == nil || o.TotalDebtToCapital == nil {
		var ret float32
		return ret
	}
	return *o.TotalDebtToCapital
}

// GetTotalDebtToCapitalOk returns a tuple with the TotalDebtToCapital field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetTotalDebtToCapitalOk() (*float32, bool) {
	if o == nil || o.TotalDebtToCapital == nil {
		return nil, false
	}
	return o.TotalDebtToCapital, true
}

// HasTotalDebtToCapital returns a boolean if a field has been set.
func (o *FundamentalData) HasTotalDebtToCapital() bool {
	if o != nil && o.TotalDebtToCapital != nil {
		return true
	}

	return false
}

// SetTotalDebtToCapital gets a reference to the given float32 and assigns it to the TotalDebtToCapital field.
func (o *FundamentalData) SetTotalDebtToCapital(v float32) {
	o.TotalDebtToCapital = &v
}

// GetTotalDebtToEquity returns the TotalDebtToEquity field value if set, zero value otherwise.
func (o *FundamentalData) GetTotalDebtToEquity() float32 {
	if o == nil || o.TotalDebtToEquity == nil {
		var ret float32
		return ret
	}
	return *o.TotalDebtToEquity
}

// GetTotalDebtToEquityOk returns a tuple with the TotalDebtToEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetTotalDebtToEquityOk() (*float32, bool) {
	if o == nil || o.TotalDebtToEquity == nil {
		return nil, false
	}
	return o.TotalDebtToEquity, true
}

// HasTotalDebtToEquity returns a boolean if a field has been set.
func (o *FundamentalData) HasTotalDebtToEquity() bool {
	if o != nil && o.TotalDebtToEquity != nil {
		return true
	}

	return false
}

// SetTotalDebtToEquity gets a reference to the given float32 and assigns it to the TotalDebtToEquity field.
func (o *FundamentalData) SetTotalDebtToEquity(v float32) {
	o.TotalDebtToEquity = &v
}

// GetVol10DayAvg returns the Vol10DayAvg field value if set, zero value otherwise.
func (o *FundamentalData) GetVol10DayAvg() float32 {
	if o == nil || o.Vol10DayAvg == nil {
		var ret float32
		return ret
	}
	return *o.Vol10DayAvg
}

// GetVol10DayAvgOk returns a tuple with the Vol10DayAvg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetVol10DayAvgOk() (*float32, bool) {
	if o == nil || o.Vol10DayAvg == nil {
		return nil, false
	}
	return o.Vol10DayAvg, true
}

// HasVol10DayAvg returns a boolean if a field has been set.
func (o *FundamentalData) HasVol10DayAvg() bool {
	if o != nil && o.Vol10DayAvg != nil {
		return true
	}

	return false
}

// SetVol10DayAvg gets a reference to the given float32 and assigns it to the Vol10DayAvg field.
func (o *FundamentalData) SetVol10DayAvg(v float32) {
	o.Vol10DayAvg = &v
}

// GetVol1DayAvg returns the Vol1DayAvg field value if set, zero value otherwise.
func (o *FundamentalData) GetVol1DayAvg() float32 {
	if o == nil || o.Vol1DayAvg == nil {
		var ret float32
		return ret
	}
	return *o.Vol1DayAvg
}

// GetVol1DayAvgOk returns a tuple with the Vol1DayAvg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetVol1DayAvgOk() (*float32, bool) {
	if o == nil || o.Vol1DayAvg == nil {
		return nil, false
	}
	return o.Vol1DayAvg, true
}

// HasVol1DayAvg returns a boolean if a field has been set.
func (o *FundamentalData) HasVol1DayAvg() bool {
	if o != nil && o.Vol1DayAvg != nil {
		return true
	}

	return false
}

// SetVol1DayAvg gets a reference to the given float32 and assigns it to the Vol1DayAvg field.
func (o *FundamentalData) SetVol1DayAvg(v float32) {
	o.Vol1DayAvg = &v
}

// GetVol3MonthAvg returns the Vol3MonthAvg field value if set, zero value otherwise.
func (o *FundamentalData) GetVol3MonthAvg() float32 {
	if o == nil || o.Vol3MonthAvg == nil {
		var ret float32
		return ret
	}
	return *o.Vol3MonthAvg
}

// GetVol3MonthAvgOk returns a tuple with the Vol3MonthAvg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalData) GetVol3MonthAvgOk() (*float32, bool) {
	if o == nil || o.Vol3MonthAvg == nil {
		return nil, false
	}
	return o.Vol3MonthAvg, true
}

// HasVol3MonthAvg returns a boolean if a field has been set.
func (o *FundamentalData) HasVol3MonthAvg() bool {
	if o != nil && o.Vol3MonthAvg != nil {
		return true
	}

	return false
}

// SetVol3MonthAvg gets a reference to the given float32 and assigns it to the Vol3MonthAvg field.
func (o *FundamentalData) SetVol3MonthAvg(v float32) {
	o.Vol3MonthAvg = &v
}

func (o FundamentalData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Beta != nil {
		toSerialize["beta"] = o.Beta
	}
	if o.BookValuePerShare != nil {
		toSerialize["bookValuePerShare"] = o.BookValuePerShare
	}
	if o.CurrentRatio != nil {
		toSerialize["currentRatio"] = o.CurrentRatio
	}
	if o.DivGrowthRate3Year != nil {
		toSerialize["divGrowthRate3Year"] = o.DivGrowthRate3Year
	}
	if o.DividendAmount != nil {
		toSerialize["dividendAmount"] = o.DividendAmount
	}
	if o.DividendDate != nil {
		toSerialize["dividendDate"] = o.DividendDate
	}
	if o.DividendPayAmount != nil {
		toSerialize["dividendPayAmount"] = o.DividendPayAmount
	}
	if o.DividendPayDate != nil {
		toSerialize["dividendPayDate"] = o.DividendPayDate
	}
	if o.DividendYield != nil {
		toSerialize["dividendYield"] = o.DividendYield
	}
	if o.EpsChange != nil {
		toSerialize["epsChange"] = o.EpsChange
	}
	if o.EpsChangePercentTTM != nil {
		toSerialize["epsChangePercentTTM"] = o.EpsChangePercentTTM
	}
	if o.EpsChangeYear != nil {
		toSerialize["epsChangeYear"] = o.EpsChangeYear
	}
	if o.EpsTTM != nil {
		toSerialize["epsTTM"] = o.EpsTTM
	}
	if o.GrossMarginMRQ != nil {
		toSerialize["grossMarginMRQ"] = o.GrossMarginMRQ
	}
	if o.GrossMarginTTM != nil {
		toSerialize["grossMarginTTM"] = o.GrossMarginTTM
	}
	if o.High52 != nil {
		toSerialize["high52"] = o.High52
	}
	if o.InterestCoverage != nil {
		toSerialize["interestCoverage"] = o.InterestCoverage
	}
	if o.Low52 != nil {
		toSerialize["low52"] = o.Low52
	}
	if o.LtDebtToEquity != nil {
		toSerialize["ltDebtToEquity"] = o.LtDebtToEquity
	}
	if o.MarketCap != nil {
		toSerialize["marketCap"] = o.MarketCap
	}
	if o.MarketCapFloat != nil {
		toSerialize["marketCapFloat"] = o.MarketCapFloat
	}
	if o.NetProfitMarginMRQ != nil {
		toSerialize["netProfitMarginMRQ"] = o.NetProfitMarginMRQ
	}
	if o.NetProfitMarginTTM != nil {
		toSerialize["netProfitMarginTTM"] = o.NetProfitMarginTTM
	}
	if o.OperatingMarginMRQ != nil {
		toSerialize["operatingMarginMRQ"] = o.OperatingMarginMRQ
	}
	if o.OperatingMarginTTM != nil {
		toSerialize["operatingMarginTTM"] = o.OperatingMarginTTM
	}
	if o.PbRatio != nil {
		toSerialize["pbRatio"] = o.PbRatio
	}
	if o.PcfRatio != nil {
		toSerialize["pcfRatio"] = o.PcfRatio
	}
	if o.PeRatio != nil {
		toSerialize["peRatio"] = o.PeRatio
	}
	if o.PegRatio != nil {
		toSerialize["pegRatio"] = o.PegRatio
	}
	if o.PrRatio != nil {
		toSerialize["prRatio"] = o.PrRatio
	}
	if o.QuickRatio != nil {
		toSerialize["quickRatio"] = o.QuickRatio
	}
	if o.ReturnOnAssets != nil {
		toSerialize["returnOnAssets"] = o.ReturnOnAssets
	}
	if o.ReturnOnEquity != nil {
		toSerialize["returnOnEquity"] = o.ReturnOnEquity
	}
	if o.ReturnOnInvestment != nil {
		toSerialize["returnOnInvestment"] = o.ReturnOnInvestment
	}
	if o.RevChangeIn != nil {
		toSerialize["revChangeIn"] = o.RevChangeIn
	}
	if o.RevChangeTTM != nil {
		toSerialize["revChangeTTM"] = o.RevChangeTTM
	}
	if o.RevChangeYear != nil {
		toSerialize["revChangeYear"] = o.RevChangeYear
	}
	if o.SharesOutstanding != nil {
		toSerialize["sharesOutstanding"] = o.SharesOutstanding
	}
	if o.ShortIntDayToCover != nil {
		toSerialize["shortIntDayToCover"] = o.ShortIntDayToCover
	}
	if o.ShortIntToFloat != nil {
		toSerialize["shortIntToFloat"] = o.ShortIntToFloat
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.TotalDebtToCapital != nil {
		toSerialize["totalDebtToCapital"] = o.TotalDebtToCapital
	}
	if o.TotalDebtToEquity != nil {
		toSerialize["totalDebtToEquity"] = o.TotalDebtToEquity
	}
	if o.Vol10DayAvg != nil {
		toSerialize["vol10DayAvg"] = o.Vol10DayAvg
	}
	if o.Vol1DayAvg != nil {
		toSerialize["vol1DayAvg"] = o.Vol1DayAvg
	}
	if o.Vol3MonthAvg != nil {
		toSerialize["vol3MonthAvg"] = o.Vol3MonthAvg
	}
	return json.Marshal(toSerialize)
}

type NullableFundamentalData struct {
	value *FundamentalData
	isSet bool
}

func (v NullableFundamentalData) Get() *FundamentalData {
	return v.value
}

func (v *NullableFundamentalData) Set(val *FundamentalData) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalData) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalData(val *FundamentalData) *NullableFundamentalData {
	return &NullableFundamentalData{value: val, isSet: true}
}

func (v NullableFundamentalData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


