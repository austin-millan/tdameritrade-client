/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Future struct for Future
type Future struct {
	AskId *string `json:"askId,omitempty"`
	AskPriceInDouble *float32 `json:"askPriceInDouble,omitempty"`
	BidId *string `json:"bidId,omitempty"`
	BidPriceInDouble *float32 `json:"bidPriceInDouble,omitempty"`
	ChangeInDouble *float32 `json:"changeInDouble,omitempty"`
	ClosePriceInDouble *float32 `json:"closePriceInDouble,omitempty"`
	Description *string `json:"description,omitempty"`
	Exchange *string `json:"exchange,omitempty"`
	ExchangeName *string `json:"exchangeName,omitempty"`
	FutureActiveSymbol *string `json:"futureActiveSymbol,omitempty"`
	FutureExpirationDate *string `json:"futureExpirationDate,omitempty"`
	FutureIsActive *bool `json:"futureIsActive,omitempty"`
	FutureIsTradable *bool `json:"futureIsTradable,omitempty"`
	FutureMultiplier *float32 `json:"futureMultiplier,omitempty"`
	FuturePercentChange *float32 `json:"futurePercentChange,omitempty"`
	FuturePriceFormat *string `json:"futurePriceFormat,omitempty"`
	FutureSettlementPrice *float32 `json:"futureSettlementPrice,omitempty"`
	FutureTradingHours *string `json:"futureTradingHours,omitempty"`
	HighPriceInDouble *float32 `json:"highPriceInDouble,omitempty"`
	LastId *string `json:"lastId,omitempty"`
	LastPriceInDouble *float32 `json:"lastPriceInDouble,omitempty"`
	LowPriceInDouble *float32 `json:"lowPriceInDouble,omitempty"`
	Mark *float32 `json:"mark,omitempty"`
	OpenInterest *float32 `json:"openInterest,omitempty"`
	OpenPriceInDouble *float32 `json:"openPriceInDouble,omitempty"`
	Product *string `json:"product,omitempty"`
	SecurityStatus *string `json:"securityStatus,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Tick *float32 `json:"tick,omitempty"`
	TickAmount *float32 `json:"tickAmount,omitempty"`
}

// NewFuture instantiates a new Future object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFuture() *Future {
	this := Future{}
	return &this
}

// NewFutureWithDefaults instantiates a new Future object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFutureWithDefaults() *Future {
	this := Future{}
	return &this
}

// GetAskId returns the AskId field value if set, zero value otherwise.
func (o *Future) GetAskId() string {
	if o == nil || o.AskId == nil {
		var ret string
		return ret
	}
	return *o.AskId
}

// GetAskIdOk returns a tuple with the AskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetAskIdOk() (*string, bool) {
	if o == nil || o.AskId == nil {
		return nil, false
	}
	return o.AskId, true
}

// HasAskId returns a boolean if a field has been set.
func (o *Future) HasAskId() bool {
	if o != nil && o.AskId != nil {
		return true
	}

	return false
}

// SetAskId gets a reference to the given string and assigns it to the AskId field.
func (o *Future) SetAskId(v string) {
	o.AskId = &v
}

// GetAskPriceInDouble returns the AskPriceInDouble field value if set, zero value otherwise.
func (o *Future) GetAskPriceInDouble() float32 {
	if o == nil || o.AskPriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.AskPriceInDouble
}

// GetAskPriceInDoubleOk returns a tuple with the AskPriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetAskPriceInDoubleOk() (*float32, bool) {
	if o == nil || o.AskPriceInDouble == nil {
		return nil, false
	}
	return o.AskPriceInDouble, true
}

// HasAskPriceInDouble returns a boolean if a field has been set.
func (o *Future) HasAskPriceInDouble() bool {
	if o != nil && o.AskPriceInDouble != nil {
		return true
	}

	return false
}

// SetAskPriceInDouble gets a reference to the given float32 and assigns it to the AskPriceInDouble field.
func (o *Future) SetAskPriceInDouble(v float32) {
	o.AskPriceInDouble = &v
}

// GetBidId returns the BidId field value if set, zero value otherwise.
func (o *Future) GetBidId() string {
	if o == nil || o.BidId == nil {
		var ret string
		return ret
	}
	return *o.BidId
}

// GetBidIdOk returns a tuple with the BidId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetBidIdOk() (*string, bool) {
	if o == nil || o.BidId == nil {
		return nil, false
	}
	return o.BidId, true
}

// HasBidId returns a boolean if a field has been set.
func (o *Future) HasBidId() bool {
	if o != nil && o.BidId != nil {
		return true
	}

	return false
}

// SetBidId gets a reference to the given string and assigns it to the BidId field.
func (o *Future) SetBidId(v string) {
	o.BidId = &v
}

// GetBidPriceInDouble returns the BidPriceInDouble field value if set, zero value otherwise.
func (o *Future) GetBidPriceInDouble() float32 {
	if o == nil || o.BidPriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.BidPriceInDouble
}

// GetBidPriceInDoubleOk returns a tuple with the BidPriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetBidPriceInDoubleOk() (*float32, bool) {
	if o == nil || o.BidPriceInDouble == nil {
		return nil, false
	}
	return o.BidPriceInDouble, true
}

// HasBidPriceInDouble returns a boolean if a field has been set.
func (o *Future) HasBidPriceInDouble() bool {
	if o != nil && o.BidPriceInDouble != nil {
		return true
	}

	return false
}

// SetBidPriceInDouble gets a reference to the given float32 and assigns it to the BidPriceInDouble field.
func (o *Future) SetBidPriceInDouble(v float32) {
	o.BidPriceInDouble = &v
}

// GetChangeInDouble returns the ChangeInDouble field value if set, zero value otherwise.
func (o *Future) GetChangeInDouble() float32 {
	if o == nil || o.ChangeInDouble == nil {
		var ret float32
		return ret
	}
	return *o.ChangeInDouble
}

// GetChangeInDoubleOk returns a tuple with the ChangeInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetChangeInDoubleOk() (*float32, bool) {
	if o == nil || o.ChangeInDouble == nil {
		return nil, false
	}
	return o.ChangeInDouble, true
}

// HasChangeInDouble returns a boolean if a field has been set.
func (o *Future) HasChangeInDouble() bool {
	if o != nil && o.ChangeInDouble != nil {
		return true
	}

	return false
}

// SetChangeInDouble gets a reference to the given float32 and assigns it to the ChangeInDouble field.
func (o *Future) SetChangeInDouble(v float32) {
	o.ChangeInDouble = &v
}

// GetClosePriceInDouble returns the ClosePriceInDouble field value if set, zero value otherwise.
func (o *Future) GetClosePriceInDouble() float32 {
	if o == nil || o.ClosePriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.ClosePriceInDouble
}

// GetClosePriceInDoubleOk returns a tuple with the ClosePriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetClosePriceInDoubleOk() (*float32, bool) {
	if o == nil || o.ClosePriceInDouble == nil {
		return nil, false
	}
	return o.ClosePriceInDouble, true
}

// HasClosePriceInDouble returns a boolean if a field has been set.
func (o *Future) HasClosePriceInDouble() bool {
	if o != nil && o.ClosePriceInDouble != nil {
		return true
	}

	return false
}

// SetClosePriceInDouble gets a reference to the given float32 and assigns it to the ClosePriceInDouble field.
func (o *Future) SetClosePriceInDouble(v float32) {
	o.ClosePriceInDouble = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Future) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Future) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Future) SetDescription(v string) {
	o.Description = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *Future) GetExchange() string {
	if o == nil || o.Exchange == nil {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetExchangeOk() (*string, bool) {
	if o == nil || o.Exchange == nil {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *Future) HasExchange() bool {
	if o != nil && o.Exchange != nil {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *Future) SetExchange(v string) {
	o.Exchange = &v
}

// GetExchangeName returns the ExchangeName field value if set, zero value otherwise.
func (o *Future) GetExchangeName() string {
	if o == nil || o.ExchangeName == nil {
		var ret string
		return ret
	}
	return *o.ExchangeName
}

// GetExchangeNameOk returns a tuple with the ExchangeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetExchangeNameOk() (*string, bool) {
	if o == nil || o.ExchangeName == nil {
		return nil, false
	}
	return o.ExchangeName, true
}

// HasExchangeName returns a boolean if a field has been set.
func (o *Future) HasExchangeName() bool {
	if o != nil && o.ExchangeName != nil {
		return true
	}

	return false
}

// SetExchangeName gets a reference to the given string and assigns it to the ExchangeName field.
func (o *Future) SetExchangeName(v string) {
	o.ExchangeName = &v
}

// GetFutureActiveSymbol returns the FutureActiveSymbol field value if set, zero value otherwise.
func (o *Future) GetFutureActiveSymbol() string {
	if o == nil || o.FutureActiveSymbol == nil {
		var ret string
		return ret
	}
	return *o.FutureActiveSymbol
}

// GetFutureActiveSymbolOk returns a tuple with the FutureActiveSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetFutureActiveSymbolOk() (*string, bool) {
	if o == nil || o.FutureActiveSymbol == nil {
		return nil, false
	}
	return o.FutureActiveSymbol, true
}

// HasFutureActiveSymbol returns a boolean if a field has been set.
func (o *Future) HasFutureActiveSymbol() bool {
	if o != nil && o.FutureActiveSymbol != nil {
		return true
	}

	return false
}

// SetFutureActiveSymbol gets a reference to the given string and assigns it to the FutureActiveSymbol field.
func (o *Future) SetFutureActiveSymbol(v string) {
	o.FutureActiveSymbol = &v
}

// GetFutureExpirationDate returns the FutureExpirationDate field value if set, zero value otherwise.
func (o *Future) GetFutureExpirationDate() string {
	if o == nil || o.FutureExpirationDate == nil {
		var ret string
		return ret
	}
	return *o.FutureExpirationDate
}

// GetFutureExpirationDateOk returns a tuple with the FutureExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetFutureExpirationDateOk() (*string, bool) {
	if o == nil || o.FutureExpirationDate == nil {
		return nil, false
	}
	return o.FutureExpirationDate, true
}

// HasFutureExpirationDate returns a boolean if a field has been set.
func (o *Future) HasFutureExpirationDate() bool {
	if o != nil && o.FutureExpirationDate != nil {
		return true
	}

	return false
}

// SetFutureExpirationDate gets a reference to the given string and assigns it to the FutureExpirationDate field.
func (o *Future) SetFutureExpirationDate(v string) {
	o.FutureExpirationDate = &v
}

// GetFutureIsActive returns the FutureIsActive field value if set, zero value otherwise.
func (o *Future) GetFutureIsActive() bool {
	if o == nil || o.FutureIsActive == nil {
		var ret bool
		return ret
	}
	return *o.FutureIsActive
}

// GetFutureIsActiveOk returns a tuple with the FutureIsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetFutureIsActiveOk() (*bool, bool) {
	if o == nil || o.FutureIsActive == nil {
		return nil, false
	}
	return o.FutureIsActive, true
}

// HasFutureIsActive returns a boolean if a field has been set.
func (o *Future) HasFutureIsActive() bool {
	if o != nil && o.FutureIsActive != nil {
		return true
	}

	return false
}

// SetFutureIsActive gets a reference to the given bool and assigns it to the FutureIsActive field.
func (o *Future) SetFutureIsActive(v bool) {
	o.FutureIsActive = &v
}

// GetFutureIsTradable returns the FutureIsTradable field value if set, zero value otherwise.
func (o *Future) GetFutureIsTradable() bool {
	if o == nil || o.FutureIsTradable == nil {
		var ret bool
		return ret
	}
	return *o.FutureIsTradable
}

// GetFutureIsTradableOk returns a tuple with the FutureIsTradable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetFutureIsTradableOk() (*bool, bool) {
	if o == nil || o.FutureIsTradable == nil {
		return nil, false
	}
	return o.FutureIsTradable, true
}

// HasFutureIsTradable returns a boolean if a field has been set.
func (o *Future) HasFutureIsTradable() bool {
	if o != nil && o.FutureIsTradable != nil {
		return true
	}

	return false
}

// SetFutureIsTradable gets a reference to the given bool and assigns it to the FutureIsTradable field.
func (o *Future) SetFutureIsTradable(v bool) {
	o.FutureIsTradable = &v
}

// GetFutureMultiplier returns the FutureMultiplier field value if set, zero value otherwise.
func (o *Future) GetFutureMultiplier() float32 {
	if o == nil || o.FutureMultiplier == nil {
		var ret float32
		return ret
	}
	return *o.FutureMultiplier
}

// GetFutureMultiplierOk returns a tuple with the FutureMultiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetFutureMultiplierOk() (*float32, bool) {
	if o == nil || o.FutureMultiplier == nil {
		return nil, false
	}
	return o.FutureMultiplier, true
}

// HasFutureMultiplier returns a boolean if a field has been set.
func (o *Future) HasFutureMultiplier() bool {
	if o != nil && o.FutureMultiplier != nil {
		return true
	}

	return false
}

// SetFutureMultiplier gets a reference to the given float32 and assigns it to the FutureMultiplier field.
func (o *Future) SetFutureMultiplier(v float32) {
	o.FutureMultiplier = &v
}

// GetFuturePercentChange returns the FuturePercentChange field value if set, zero value otherwise.
func (o *Future) GetFuturePercentChange() float32 {
	if o == nil || o.FuturePercentChange == nil {
		var ret float32
		return ret
	}
	return *o.FuturePercentChange
}

// GetFuturePercentChangeOk returns a tuple with the FuturePercentChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetFuturePercentChangeOk() (*float32, bool) {
	if o == nil || o.FuturePercentChange == nil {
		return nil, false
	}
	return o.FuturePercentChange, true
}

// HasFuturePercentChange returns a boolean if a field has been set.
func (o *Future) HasFuturePercentChange() bool {
	if o != nil && o.FuturePercentChange != nil {
		return true
	}

	return false
}

// SetFuturePercentChange gets a reference to the given float32 and assigns it to the FuturePercentChange field.
func (o *Future) SetFuturePercentChange(v float32) {
	o.FuturePercentChange = &v
}

// GetFuturePriceFormat returns the FuturePriceFormat field value if set, zero value otherwise.
func (o *Future) GetFuturePriceFormat() string {
	if o == nil || o.FuturePriceFormat == nil {
		var ret string
		return ret
	}
	return *o.FuturePriceFormat
}

// GetFuturePriceFormatOk returns a tuple with the FuturePriceFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetFuturePriceFormatOk() (*string, bool) {
	if o == nil || o.FuturePriceFormat == nil {
		return nil, false
	}
	return o.FuturePriceFormat, true
}

// HasFuturePriceFormat returns a boolean if a field has been set.
func (o *Future) HasFuturePriceFormat() bool {
	if o != nil && o.FuturePriceFormat != nil {
		return true
	}

	return false
}

// SetFuturePriceFormat gets a reference to the given string and assigns it to the FuturePriceFormat field.
func (o *Future) SetFuturePriceFormat(v string) {
	o.FuturePriceFormat = &v
}

// GetFutureSettlementPrice returns the FutureSettlementPrice field value if set, zero value otherwise.
func (o *Future) GetFutureSettlementPrice() float32 {
	if o == nil || o.FutureSettlementPrice == nil {
		var ret float32
		return ret
	}
	return *o.FutureSettlementPrice
}

// GetFutureSettlementPriceOk returns a tuple with the FutureSettlementPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetFutureSettlementPriceOk() (*float32, bool) {
	if o == nil || o.FutureSettlementPrice == nil {
		return nil, false
	}
	return o.FutureSettlementPrice, true
}

// HasFutureSettlementPrice returns a boolean if a field has been set.
func (o *Future) HasFutureSettlementPrice() bool {
	if o != nil && o.FutureSettlementPrice != nil {
		return true
	}

	return false
}

// SetFutureSettlementPrice gets a reference to the given float32 and assigns it to the FutureSettlementPrice field.
func (o *Future) SetFutureSettlementPrice(v float32) {
	o.FutureSettlementPrice = &v
}

// GetFutureTradingHours returns the FutureTradingHours field value if set, zero value otherwise.
func (o *Future) GetFutureTradingHours() string {
	if o == nil || o.FutureTradingHours == nil {
		var ret string
		return ret
	}
	return *o.FutureTradingHours
}

// GetFutureTradingHoursOk returns a tuple with the FutureTradingHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetFutureTradingHoursOk() (*string, bool) {
	if o == nil || o.FutureTradingHours == nil {
		return nil, false
	}
	return o.FutureTradingHours, true
}

// HasFutureTradingHours returns a boolean if a field has been set.
func (o *Future) HasFutureTradingHours() bool {
	if o != nil && o.FutureTradingHours != nil {
		return true
	}

	return false
}

// SetFutureTradingHours gets a reference to the given string and assigns it to the FutureTradingHours field.
func (o *Future) SetFutureTradingHours(v string) {
	o.FutureTradingHours = &v
}

// GetHighPriceInDouble returns the HighPriceInDouble field value if set, zero value otherwise.
func (o *Future) GetHighPriceInDouble() float32 {
	if o == nil || o.HighPriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.HighPriceInDouble
}

// GetHighPriceInDoubleOk returns a tuple with the HighPriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetHighPriceInDoubleOk() (*float32, bool) {
	if o == nil || o.HighPriceInDouble == nil {
		return nil, false
	}
	return o.HighPriceInDouble, true
}

// HasHighPriceInDouble returns a boolean if a field has been set.
func (o *Future) HasHighPriceInDouble() bool {
	if o != nil && o.HighPriceInDouble != nil {
		return true
	}

	return false
}

// SetHighPriceInDouble gets a reference to the given float32 and assigns it to the HighPriceInDouble field.
func (o *Future) SetHighPriceInDouble(v float32) {
	o.HighPriceInDouble = &v
}

// GetLastId returns the LastId field value if set, zero value otherwise.
func (o *Future) GetLastId() string {
	if o == nil || o.LastId == nil {
		var ret string
		return ret
	}
	return *o.LastId
}

// GetLastIdOk returns a tuple with the LastId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetLastIdOk() (*string, bool) {
	if o == nil || o.LastId == nil {
		return nil, false
	}
	return o.LastId, true
}

// HasLastId returns a boolean if a field has been set.
func (o *Future) HasLastId() bool {
	if o != nil && o.LastId != nil {
		return true
	}

	return false
}

// SetLastId gets a reference to the given string and assigns it to the LastId field.
func (o *Future) SetLastId(v string) {
	o.LastId = &v
}

// GetLastPriceInDouble returns the LastPriceInDouble field value if set, zero value otherwise.
func (o *Future) GetLastPriceInDouble() float32 {
	if o == nil || o.LastPriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.LastPriceInDouble
}

// GetLastPriceInDoubleOk returns a tuple with the LastPriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetLastPriceInDoubleOk() (*float32, bool) {
	if o == nil || o.LastPriceInDouble == nil {
		return nil, false
	}
	return o.LastPriceInDouble, true
}

// HasLastPriceInDouble returns a boolean if a field has been set.
func (o *Future) HasLastPriceInDouble() bool {
	if o != nil && o.LastPriceInDouble != nil {
		return true
	}

	return false
}

// SetLastPriceInDouble gets a reference to the given float32 and assigns it to the LastPriceInDouble field.
func (o *Future) SetLastPriceInDouble(v float32) {
	o.LastPriceInDouble = &v
}

// GetLowPriceInDouble returns the LowPriceInDouble field value if set, zero value otherwise.
func (o *Future) GetLowPriceInDouble() float32 {
	if o == nil || o.LowPriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.LowPriceInDouble
}

// GetLowPriceInDoubleOk returns a tuple with the LowPriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetLowPriceInDoubleOk() (*float32, bool) {
	if o == nil || o.LowPriceInDouble == nil {
		return nil, false
	}
	return o.LowPriceInDouble, true
}

// HasLowPriceInDouble returns a boolean if a field has been set.
func (o *Future) HasLowPriceInDouble() bool {
	if o != nil && o.LowPriceInDouble != nil {
		return true
	}

	return false
}

// SetLowPriceInDouble gets a reference to the given float32 and assigns it to the LowPriceInDouble field.
func (o *Future) SetLowPriceInDouble(v float32) {
	o.LowPriceInDouble = &v
}

// GetMark returns the Mark field value if set, zero value otherwise.
func (o *Future) GetMark() float32 {
	if o == nil || o.Mark == nil {
		var ret float32
		return ret
	}
	return *o.Mark
}

// GetMarkOk returns a tuple with the Mark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetMarkOk() (*float32, bool) {
	if o == nil || o.Mark == nil {
		return nil, false
	}
	return o.Mark, true
}

// HasMark returns a boolean if a field has been set.
func (o *Future) HasMark() bool {
	if o != nil && o.Mark != nil {
		return true
	}

	return false
}

// SetMark gets a reference to the given float32 and assigns it to the Mark field.
func (o *Future) SetMark(v float32) {
	o.Mark = &v
}

// GetOpenInterest returns the OpenInterest field value if set, zero value otherwise.
func (o *Future) GetOpenInterest() float32 {
	if o == nil || o.OpenInterest == nil {
		var ret float32
		return ret
	}
	return *o.OpenInterest
}

// GetOpenInterestOk returns a tuple with the OpenInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetOpenInterestOk() (*float32, bool) {
	if o == nil || o.OpenInterest == nil {
		return nil, false
	}
	return o.OpenInterest, true
}

// HasOpenInterest returns a boolean if a field has been set.
func (o *Future) HasOpenInterest() bool {
	if o != nil && o.OpenInterest != nil {
		return true
	}

	return false
}

// SetOpenInterest gets a reference to the given float32 and assigns it to the OpenInterest field.
func (o *Future) SetOpenInterest(v float32) {
	o.OpenInterest = &v
}

// GetOpenPriceInDouble returns the OpenPriceInDouble field value if set, zero value otherwise.
func (o *Future) GetOpenPriceInDouble() float32 {
	if o == nil || o.OpenPriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.OpenPriceInDouble
}

// GetOpenPriceInDoubleOk returns a tuple with the OpenPriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetOpenPriceInDoubleOk() (*float32, bool) {
	if o == nil || o.OpenPriceInDouble == nil {
		return nil, false
	}
	return o.OpenPriceInDouble, true
}

// HasOpenPriceInDouble returns a boolean if a field has been set.
func (o *Future) HasOpenPriceInDouble() bool {
	if o != nil && o.OpenPriceInDouble != nil {
		return true
	}

	return false
}

// SetOpenPriceInDouble gets a reference to the given float32 and assigns it to the OpenPriceInDouble field.
func (o *Future) SetOpenPriceInDouble(v float32) {
	o.OpenPriceInDouble = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *Future) GetProduct() string {
	if o == nil || o.Product == nil {
		var ret string
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetProductOk() (*string, bool) {
	if o == nil || o.Product == nil {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *Future) HasProduct() bool {
	if o != nil && o.Product != nil {
		return true
	}

	return false
}

// SetProduct gets a reference to the given string and assigns it to the Product field.
func (o *Future) SetProduct(v string) {
	o.Product = &v
}

// GetSecurityStatus returns the SecurityStatus field value if set, zero value otherwise.
func (o *Future) GetSecurityStatus() string {
	if o == nil || o.SecurityStatus == nil {
		var ret string
		return ret
	}
	return *o.SecurityStatus
}

// GetSecurityStatusOk returns a tuple with the SecurityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetSecurityStatusOk() (*string, bool) {
	if o == nil || o.SecurityStatus == nil {
		return nil, false
	}
	return o.SecurityStatus, true
}

// HasSecurityStatus returns a boolean if a field has been set.
func (o *Future) HasSecurityStatus() bool {
	if o != nil && o.SecurityStatus != nil {
		return true
	}

	return false
}

// SetSecurityStatus gets a reference to the given string and assigns it to the SecurityStatus field.
func (o *Future) SetSecurityStatus(v string) {
	o.SecurityStatus = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Future) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Future) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Future) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTick returns the Tick field value if set, zero value otherwise.
func (o *Future) GetTick() float32 {
	if o == nil || o.Tick == nil {
		var ret float32
		return ret
	}
	return *o.Tick
}

// GetTickOk returns a tuple with the Tick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetTickOk() (*float32, bool) {
	if o == nil || o.Tick == nil {
		return nil, false
	}
	return o.Tick, true
}

// HasTick returns a boolean if a field has been set.
func (o *Future) HasTick() bool {
	if o != nil && o.Tick != nil {
		return true
	}

	return false
}

// SetTick gets a reference to the given float32 and assigns it to the Tick field.
func (o *Future) SetTick(v float32) {
	o.Tick = &v
}

// GetTickAmount returns the TickAmount field value if set, zero value otherwise.
func (o *Future) GetTickAmount() float32 {
	if o == nil || o.TickAmount == nil {
		var ret float32
		return ret
	}
	return *o.TickAmount
}

// GetTickAmountOk returns a tuple with the TickAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Future) GetTickAmountOk() (*float32, bool) {
	if o == nil || o.TickAmount == nil {
		return nil, false
	}
	return o.TickAmount, true
}

// HasTickAmount returns a boolean if a field has been set.
func (o *Future) HasTickAmount() bool {
	if o != nil && o.TickAmount != nil {
		return true
	}

	return false
}

// SetTickAmount gets a reference to the given float32 and assigns it to the TickAmount field.
func (o *Future) SetTickAmount(v float32) {
	o.TickAmount = &v
}

func (o Future) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AskId != nil {
		toSerialize["askId"] = o.AskId
	}
	if o.AskPriceInDouble != nil {
		toSerialize["askPriceInDouble"] = o.AskPriceInDouble
	}
	if o.BidId != nil {
		toSerialize["bidId"] = o.BidId
	}
	if o.BidPriceInDouble != nil {
		toSerialize["bidPriceInDouble"] = o.BidPriceInDouble
	}
	if o.ChangeInDouble != nil {
		toSerialize["changeInDouble"] = o.ChangeInDouble
	}
	if o.ClosePriceInDouble != nil {
		toSerialize["closePriceInDouble"] = o.ClosePriceInDouble
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Exchange != nil {
		toSerialize["exchange"] = o.Exchange
	}
	if o.ExchangeName != nil {
		toSerialize["exchangeName"] = o.ExchangeName
	}
	if o.FutureActiveSymbol != nil {
		toSerialize["futureActiveSymbol"] = o.FutureActiveSymbol
	}
	if o.FutureExpirationDate != nil {
		toSerialize["futureExpirationDate"] = o.FutureExpirationDate
	}
	if o.FutureIsActive != nil {
		toSerialize["futureIsActive"] = o.FutureIsActive
	}
	if o.FutureIsTradable != nil {
		toSerialize["futureIsTradable"] = o.FutureIsTradable
	}
	if o.FutureMultiplier != nil {
		toSerialize["futureMultiplier"] = o.FutureMultiplier
	}
	if o.FuturePercentChange != nil {
		toSerialize["futurePercentChange"] = o.FuturePercentChange
	}
	if o.FuturePriceFormat != nil {
		toSerialize["futurePriceFormat"] = o.FuturePriceFormat
	}
	if o.FutureSettlementPrice != nil {
		toSerialize["futureSettlementPrice"] = o.FutureSettlementPrice
	}
	if o.FutureTradingHours != nil {
		toSerialize["futureTradingHours"] = o.FutureTradingHours
	}
	if o.HighPriceInDouble != nil {
		toSerialize["highPriceInDouble"] = o.HighPriceInDouble
	}
	if o.LastId != nil {
		toSerialize["lastId"] = o.LastId
	}
	if o.LastPriceInDouble != nil {
		toSerialize["lastPriceInDouble"] = o.LastPriceInDouble
	}
	if o.LowPriceInDouble != nil {
		toSerialize["lowPriceInDouble"] = o.LowPriceInDouble
	}
	if o.Mark != nil {
		toSerialize["mark"] = o.Mark
	}
	if o.OpenInterest != nil {
		toSerialize["openInterest"] = o.OpenInterest
	}
	if o.OpenPriceInDouble != nil {
		toSerialize["openPriceInDouble"] = o.OpenPriceInDouble
	}
	if o.Product != nil {
		toSerialize["product"] = o.Product
	}
	if o.SecurityStatus != nil {
		toSerialize["securityStatus"] = o.SecurityStatus
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Tick != nil {
		toSerialize["tick"] = o.Tick
	}
	if o.TickAmount != nil {
		toSerialize["tickAmount"] = o.TickAmount
	}
	return json.Marshal(toSerialize)
}

type NullableFuture struct {
	value *Future
	isSet bool
}

func (v NullableFuture) Get() *Future {
	return v.value
}

func (v *NullableFuture) Set(val *Future) {
	v.value = val
	v.isSet = true
}

func (v NullableFuture) IsSet() bool {
	return v.isSet
}

func (v *NullableFuture) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFuture(val *Future) *NullableFuture {
	return &NullableFuture{value: val, isSet: true}
}

func (v NullableFuture) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFuture) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


