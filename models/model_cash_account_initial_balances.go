/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CashAccountInitialBalances struct for CashAccountInitialBalances
type CashAccountInitialBalances struct {
	AccountValue *float32 `json:"accountValue,omitempty"`
	AccruedInterest *float32 `json:"accruedInterest,omitempty"`
	BondValue *float32 `json:"bondValue,omitempty"`
	CashAvailableForTrading *float32 `json:"cashAvailableForTrading,omitempty"`
	CashAvailableForWithdrawal *float32 `json:"cashAvailableForWithdrawal,omitempty"`
	CashBalance *float32 `json:"cashBalance,omitempty"`
	CashDebitCallValue *float32 `json:"cashDebitCallValue,omitempty"`
	CashReceipts *float32 `json:"cashReceipts,omitempty"`
	IsInCall *bool `json:"isInCall,omitempty"`
	LiquidationValue *float32 `json:"liquidationValue,omitempty"`
	LongOptionMarketValue *float32 `json:"longOptionMarketValue,omitempty"`
	LongStockValue *float32 `json:"longStockValue,omitempty"`
	MoneyMarketFund *float32 `json:"moneyMarketFund,omitempty"`
	MutualFundValue *float32 `json:"mutualFundValue,omitempty"`
	PendingDeposits *float32 `json:"pendingDeposits,omitempty"`
	ShortOptionMarketValue *float32 `json:"shortOptionMarketValue,omitempty"`
	ShortStockValue *float32 `json:"shortStockValue,omitempty"`
	UnsettledCash *float32 `json:"unsettledCash,omitempty"`
}

// NewCashAccountInitialBalances instantiates a new CashAccountInitialBalances object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashAccountInitialBalances() *CashAccountInitialBalances {
	this := CashAccountInitialBalances{}
	return &this
}

// NewCashAccountInitialBalancesWithDefaults instantiates a new CashAccountInitialBalances object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashAccountInitialBalancesWithDefaults() *CashAccountInitialBalances {
	this := CashAccountInitialBalances{}
	return &this
}

// GetAccountValue returns the AccountValue field value if set, zero value otherwise.
func (o *CashAccountInitialBalances) GetAccountValue() float32 {
	if o == nil || o.AccountValue == nil {
		var ret float32
		return ret
	}
	return *o.AccountValue
}

// GetAccountValueOk returns a tuple with the AccountValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountInitialBalances) GetAccountValueOk() (*float32, bool) {
	if o == nil || o.AccountValue == nil {
		return nil, false
	}
	return o.AccountValue, true
}

// HasAccountValue returns a boolean if a field has been set.
func (o *CashAccountInitialBalances) HasAccountValue() bool {
	if o != nil && o.AccountValue != nil {
		return true
	}

	return false
}

// SetAccountValue gets a reference to the given float32 and assigns it to the AccountValue field.
func (o *CashAccountInitialBalances) SetAccountValue(v float32) {
	o.AccountValue = &v
}

// GetAccruedInterest returns the AccruedInterest field value if set, zero value otherwise.
func (o *CashAccountInitialBalances) GetAccruedInterest() float32 {
	if o == nil || o.AccruedInterest == nil {
		var ret float32
		return ret
	}
	return *o.AccruedInterest
}

// GetAccruedInterestOk returns a tuple with the AccruedInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountInitialBalances) GetAccruedInterestOk() (*float32, bool) {
	if o == nil || o.AccruedInterest == nil {
		return nil, false
	}
	return o.AccruedInterest, true
}

// HasAccruedInterest returns a boolean if a field has been set.
func (o *CashAccountInitialBalances) HasAccruedInterest() bool {
	if o != nil && o.AccruedInterest != nil {
		return true
	}

	return false
}

// SetAccruedInterest gets a reference to the given float32 and assigns it to the AccruedInterest field.
func (o *CashAccountInitialBalances) SetAccruedInterest(v float32) {
	o.AccruedInterest = &v
}

// GetBondValue returns the BondValue field value if set, zero value otherwise.
func (o *CashAccountInitialBalances) GetBondValue() float32 {
	if o == nil || o.BondValue == nil {
		var ret float32
		return ret
	}
	return *o.BondValue
}

// GetBondValueOk returns a tuple with the BondValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountInitialBalances) GetBondValueOk() (*float32, bool) {
	if o == nil || o.BondValue == nil {
		return nil, false
	}
	return o.BondValue, true
}

// HasBondValue returns a boolean if a field has been set.
func (o *CashAccountInitialBalances) HasBondValue() bool {
	if o != nil && o.BondValue != nil {
		return true
	}

	return false
}

// SetBondValue gets a reference to the given float32 and assigns it to the BondValue field.
func (o *CashAccountInitialBalances) SetBondValue(v float32) {
	o.BondValue = &v
}

// GetCashAvailableForTrading returns the CashAvailableForTrading field value if set, zero value otherwise.
func (o *CashAccountInitialBalances) GetCashAvailableForTrading() float32 {
	if o == nil || o.CashAvailableForTrading == nil {
		var ret float32
		return ret
	}
	return *o.CashAvailableForTrading
}

// GetCashAvailableForTradingOk returns a tuple with the CashAvailableForTrading field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountInitialBalances) GetCashAvailableForTradingOk() (*float32, bool) {
	if o == nil || o.CashAvailableForTrading == nil {
		return nil, false
	}
	return o.CashAvailableForTrading, true
}

// HasCashAvailableForTrading returns a boolean if a field has been set.
func (o *CashAccountInitialBalances) HasCashAvailableForTrading() bool {
	if o != nil && o.CashAvailableForTrading != nil {
		return true
	}

	return false
}

// SetCashAvailableForTrading gets a reference to the given float32 and assigns it to the CashAvailableForTrading field.
func (o *CashAccountInitialBalances) SetCashAvailableForTrading(v float32) {
	o.CashAvailableForTrading = &v
}

// GetCashAvailableForWithdrawal returns the CashAvailableForWithdrawal field value if set, zero value otherwise.
func (o *CashAccountInitialBalances) GetCashAvailableForWithdrawal() float32 {
	if o == nil || o.CashAvailableForWithdrawal == nil {
		var ret float32
		return ret
	}
	return *o.CashAvailableForWithdrawal
}

// GetCashAvailableForWithdrawalOk returns a tuple with the CashAvailableForWithdrawal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountInitialBalances) GetCashAvailableForWithdrawalOk() (*float32, bool) {
	if o == nil || o.CashAvailableForWithdrawal == nil {
		return nil, false
	}
	return o.CashAvailableForWithdrawal, true
}

// HasCashAvailableForWithdrawal returns a boolean if a field has been set.
func (o *CashAccountInitialBalances) HasCashAvailableForWithdrawal() bool {
	if o != nil && o.CashAvailableForWithdrawal != nil {
		return true
	}

	return false
}

// SetCashAvailableForWithdrawal gets a reference to the given float32 and assigns it to the CashAvailableForWithdrawal field.
func (o *CashAccountInitialBalances) SetCashAvailableForWithdrawal(v float32) {
	o.CashAvailableForWithdrawal = &v
}

// GetCashBalance returns the CashBalance field value if set, zero value otherwise.
func (o *CashAccountInitialBalances) GetCashBalance() float32 {
	if o == nil || o.CashBalance == nil {
		var ret float32
		return ret
	}
	return *o.CashBalance
}

// GetCashBalanceOk returns a tuple with the CashBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountInitialBalances) GetCashBalanceOk() (*float32, bool) {
	if o == nil || o.CashBalance == nil {
		return nil, false
	}
	return o.CashBalance, true
}

// HasCashBalance returns a boolean if a field has been set.
func (o *CashAccountInitialBalances) HasCashBalance() bool {
	if o != nil && o.CashBalance != nil {
		return true
	}

	return false
}

// SetCashBalance gets a reference to the given float32 and assigns it to the CashBalance field.
func (o *CashAccountInitialBalances) SetCashBalance(v float32) {
	o.CashBalance = &v
}

// GetCashDebitCallValue returns the CashDebitCallValue field value if set, zero value otherwise.
func (o *CashAccountInitialBalances) GetCashDebitCallValue() float32 {
	if o == nil || o.CashDebitCallValue == nil {
		var ret float32
		return ret
	}
	return *o.CashDebitCallValue
}

// GetCashDebitCallValueOk returns a tuple with the CashDebitCallValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountInitialBalances) GetCashDebitCallValueOk() (*float32, bool) {
	if o == nil || o.CashDebitCallValue == nil {
		return nil, false
	}
	return o.CashDebitCallValue, true
}

// HasCashDebitCallValue returns a boolean if a field has been set.
func (o *CashAccountInitialBalances) HasCashDebitCallValue() bool {
	if o != nil && o.CashDebitCallValue != nil {
		return true
	}

	return false
}

// SetCashDebitCallValue gets a reference to the given float32 and assigns it to the CashDebitCallValue field.
func (o *CashAccountInitialBalances) SetCashDebitCallValue(v float32) {
	o.CashDebitCallValue = &v
}

// GetCashReceipts returns the CashReceipts field value if set, zero value otherwise.
func (o *CashAccountInitialBalances) GetCashReceipts() float32 {
	if o == nil || o.CashReceipts == nil {
		var ret float32
		return ret
	}
	return *o.CashReceipts
}

// GetCashReceiptsOk returns a tuple with the CashReceipts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountInitialBalances) GetCashReceiptsOk() (*float32, bool) {
	if o == nil || o.CashReceipts == nil {
		return nil, false
	}
	return o.CashReceipts, true
}

// HasCashReceipts returns a boolean if a field has been set.
func (o *CashAccountInitialBalances) HasCashReceipts() bool {
	if o != nil && o.CashReceipts != nil {
		return true
	}

	return false
}

// SetCashReceipts gets a reference to the given float32 and assigns it to the CashReceipts field.
func (o *CashAccountInitialBalances) SetCashReceipts(v float32) {
	o.CashReceipts = &v
}

// GetIsInCall returns the IsInCall field value if set, zero value otherwise.
func (o *CashAccountInitialBalances) GetIsInCall() bool {
	if o == nil || o.IsInCall == nil {
		var ret bool
		return ret
	}
	return *o.IsInCall
}

// GetIsInCallOk returns a tuple with the IsInCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountInitialBalances) GetIsInCallOk() (*bool, bool) {
	if o == nil || o.IsInCall == nil {
		return nil, false
	}
	return o.IsInCall, true
}

// HasIsInCall returns a boolean if a field has been set.
func (o *CashAccountInitialBalances) HasIsInCall() bool {
	if o != nil && o.IsInCall != nil {
		return true
	}

	return false
}

// SetIsInCall gets a reference to the given bool and assigns it to the IsInCall field.
func (o *CashAccountInitialBalances) SetIsInCall(v bool) {
	o.IsInCall = &v
}

// GetLiquidationValue returns the LiquidationValue field value if set, zero value otherwise.
func (o *CashAccountInitialBalances) GetLiquidationValue() float32 {
	if o == nil || o.LiquidationValue == nil {
		var ret float32
		return ret
	}
	return *o.LiquidationValue
}

// GetLiquidationValueOk returns a tuple with the LiquidationValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountInitialBalances) GetLiquidationValueOk() (*float32, bool) {
	if o == nil || o.LiquidationValue == nil {
		return nil, false
	}
	return o.LiquidationValue, true
}

// HasLiquidationValue returns a boolean if a field has been set.
func (o *CashAccountInitialBalances) HasLiquidationValue() bool {
	if o != nil && o.LiquidationValue != nil {
		return true
	}

	return false
}

// SetLiquidationValue gets a reference to the given float32 and assigns it to the LiquidationValue field.
func (o *CashAccountInitialBalances) SetLiquidationValue(v float32) {
	o.LiquidationValue = &v
}

// GetLongOptionMarketValue returns the LongOptionMarketValue field value if set, zero value otherwise.
func (o *CashAccountInitialBalances) GetLongOptionMarketValue() float32 {
	if o == nil || o.LongOptionMarketValue == nil {
		var ret float32
		return ret
	}
	return *o.LongOptionMarketValue
}

// GetLongOptionMarketValueOk returns a tuple with the LongOptionMarketValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountInitialBalances) GetLongOptionMarketValueOk() (*float32, bool) {
	if o == nil || o.LongOptionMarketValue == nil {
		return nil, false
	}
	return o.LongOptionMarketValue, true
}

// HasLongOptionMarketValue returns a boolean if a field has been set.
func (o *CashAccountInitialBalances) HasLongOptionMarketValue() bool {
	if o != nil && o.LongOptionMarketValue != nil {
		return true
	}

	return false
}

// SetLongOptionMarketValue gets a reference to the given float32 and assigns it to the LongOptionMarketValue field.
func (o *CashAccountInitialBalances) SetLongOptionMarketValue(v float32) {
	o.LongOptionMarketValue = &v
}

// GetLongStockValue returns the LongStockValue field value if set, zero value otherwise.
func (o *CashAccountInitialBalances) GetLongStockValue() float32 {
	if o == nil || o.LongStockValue == nil {
		var ret float32
		return ret
	}
	return *o.LongStockValue
}

// GetLongStockValueOk returns a tuple with the LongStockValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountInitialBalances) GetLongStockValueOk() (*float32, bool) {
	if o == nil || o.LongStockValue == nil {
		return nil, false
	}
	return o.LongStockValue, true
}

// HasLongStockValue returns a boolean if a field has been set.
func (o *CashAccountInitialBalances) HasLongStockValue() bool {
	if o != nil && o.LongStockValue != nil {
		return true
	}

	return false
}

// SetLongStockValue gets a reference to the given float32 and assigns it to the LongStockValue field.
func (o *CashAccountInitialBalances) SetLongStockValue(v float32) {
	o.LongStockValue = &v
}

// GetMoneyMarketFund returns the MoneyMarketFund field value if set, zero value otherwise.
func (o *CashAccountInitialBalances) GetMoneyMarketFund() float32 {
	if o == nil || o.MoneyMarketFund == nil {
		var ret float32
		return ret
	}
	return *o.MoneyMarketFund
}

// GetMoneyMarketFundOk returns a tuple with the MoneyMarketFund field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountInitialBalances) GetMoneyMarketFundOk() (*float32, bool) {
	if o == nil || o.MoneyMarketFund == nil {
		return nil, false
	}
	return o.MoneyMarketFund, true
}

// HasMoneyMarketFund returns a boolean if a field has been set.
func (o *CashAccountInitialBalances) HasMoneyMarketFund() bool {
	if o != nil && o.MoneyMarketFund != nil {
		return true
	}

	return false
}

// SetMoneyMarketFund gets a reference to the given float32 and assigns it to the MoneyMarketFund field.
func (o *CashAccountInitialBalances) SetMoneyMarketFund(v float32) {
	o.MoneyMarketFund = &v
}

// GetMutualFundValue returns the MutualFundValue field value if set, zero value otherwise.
func (o *CashAccountInitialBalances) GetMutualFundValue() float32 {
	if o == nil || o.MutualFundValue == nil {
		var ret float32
		return ret
	}
	return *o.MutualFundValue
}

// GetMutualFundValueOk returns a tuple with the MutualFundValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountInitialBalances) GetMutualFundValueOk() (*float32, bool) {
	if o == nil || o.MutualFundValue == nil {
		return nil, false
	}
	return o.MutualFundValue, true
}

// HasMutualFundValue returns a boolean if a field has been set.
func (o *CashAccountInitialBalances) HasMutualFundValue() bool {
	if o != nil && o.MutualFundValue != nil {
		return true
	}

	return false
}

// SetMutualFundValue gets a reference to the given float32 and assigns it to the MutualFundValue field.
func (o *CashAccountInitialBalances) SetMutualFundValue(v float32) {
	o.MutualFundValue = &v
}

// GetPendingDeposits returns the PendingDeposits field value if set, zero value otherwise.
func (o *CashAccountInitialBalances) GetPendingDeposits() float32 {
	if o == nil || o.PendingDeposits == nil {
		var ret float32
		return ret
	}
	return *o.PendingDeposits
}

// GetPendingDepositsOk returns a tuple with the PendingDeposits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountInitialBalances) GetPendingDepositsOk() (*float32, bool) {
	if o == nil || o.PendingDeposits == nil {
		return nil, false
	}
	return o.PendingDeposits, true
}

// HasPendingDeposits returns a boolean if a field has been set.
func (o *CashAccountInitialBalances) HasPendingDeposits() bool {
	if o != nil && o.PendingDeposits != nil {
		return true
	}

	return false
}

// SetPendingDeposits gets a reference to the given float32 and assigns it to the PendingDeposits field.
func (o *CashAccountInitialBalances) SetPendingDeposits(v float32) {
	o.PendingDeposits = &v
}

// GetShortOptionMarketValue returns the ShortOptionMarketValue field value if set, zero value otherwise.
func (o *CashAccountInitialBalances) GetShortOptionMarketValue() float32 {
	if o == nil || o.ShortOptionMarketValue == nil {
		var ret float32
		return ret
	}
	return *o.ShortOptionMarketValue
}

// GetShortOptionMarketValueOk returns a tuple with the ShortOptionMarketValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountInitialBalances) GetShortOptionMarketValueOk() (*float32, bool) {
	if o == nil || o.ShortOptionMarketValue == nil {
		return nil, false
	}
	return o.ShortOptionMarketValue, true
}

// HasShortOptionMarketValue returns a boolean if a field has been set.
func (o *CashAccountInitialBalances) HasShortOptionMarketValue() bool {
	if o != nil && o.ShortOptionMarketValue != nil {
		return true
	}

	return false
}

// SetShortOptionMarketValue gets a reference to the given float32 and assigns it to the ShortOptionMarketValue field.
func (o *CashAccountInitialBalances) SetShortOptionMarketValue(v float32) {
	o.ShortOptionMarketValue = &v
}

// GetShortStockValue returns the ShortStockValue field value if set, zero value otherwise.
func (o *CashAccountInitialBalances) GetShortStockValue() float32 {
	if o == nil || o.ShortStockValue == nil {
		var ret float32
		return ret
	}
	return *o.ShortStockValue
}

// GetShortStockValueOk returns a tuple with the ShortStockValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountInitialBalances) GetShortStockValueOk() (*float32, bool) {
	if o == nil || o.ShortStockValue == nil {
		return nil, false
	}
	return o.ShortStockValue, true
}

// HasShortStockValue returns a boolean if a field has been set.
func (o *CashAccountInitialBalances) HasShortStockValue() bool {
	if o != nil && o.ShortStockValue != nil {
		return true
	}

	return false
}

// SetShortStockValue gets a reference to the given float32 and assigns it to the ShortStockValue field.
func (o *CashAccountInitialBalances) SetShortStockValue(v float32) {
	o.ShortStockValue = &v
}

// GetUnsettledCash returns the UnsettledCash field value if set, zero value otherwise.
func (o *CashAccountInitialBalances) GetUnsettledCash() float32 {
	if o == nil || o.UnsettledCash == nil {
		var ret float32
		return ret
	}
	return *o.UnsettledCash
}

// GetUnsettledCashOk returns a tuple with the UnsettledCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountInitialBalances) GetUnsettledCashOk() (*float32, bool) {
	if o == nil || o.UnsettledCash == nil {
		return nil, false
	}
	return o.UnsettledCash, true
}

// HasUnsettledCash returns a boolean if a field has been set.
func (o *CashAccountInitialBalances) HasUnsettledCash() bool {
	if o != nil && o.UnsettledCash != nil {
		return true
	}

	return false
}

// SetUnsettledCash gets a reference to the given float32 and assigns it to the UnsettledCash field.
func (o *CashAccountInitialBalances) SetUnsettledCash(v float32) {
	o.UnsettledCash = &v
}

func (o CashAccountInitialBalances) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountValue != nil {
		toSerialize["accountValue"] = o.AccountValue
	}
	if o.AccruedInterest != nil {
		toSerialize["accruedInterest"] = o.AccruedInterest
	}
	if o.BondValue != nil {
		toSerialize["bondValue"] = o.BondValue
	}
	if o.CashAvailableForTrading != nil {
		toSerialize["cashAvailableForTrading"] = o.CashAvailableForTrading
	}
	if o.CashAvailableForWithdrawal != nil {
		toSerialize["cashAvailableForWithdrawal"] = o.CashAvailableForWithdrawal
	}
	if o.CashBalance != nil {
		toSerialize["cashBalance"] = o.CashBalance
	}
	if o.CashDebitCallValue != nil {
		toSerialize["cashDebitCallValue"] = o.CashDebitCallValue
	}
	if o.CashReceipts != nil {
		toSerialize["cashReceipts"] = o.CashReceipts
	}
	if o.IsInCall != nil {
		toSerialize["isInCall"] = o.IsInCall
	}
	if o.LiquidationValue != nil {
		toSerialize["liquidationValue"] = o.LiquidationValue
	}
	if o.LongOptionMarketValue != nil {
		toSerialize["longOptionMarketValue"] = o.LongOptionMarketValue
	}
	if o.LongStockValue != nil {
		toSerialize["longStockValue"] = o.LongStockValue
	}
	if o.MoneyMarketFund != nil {
		toSerialize["moneyMarketFund"] = o.MoneyMarketFund
	}
	if o.MutualFundValue != nil {
		toSerialize["mutualFundValue"] = o.MutualFundValue
	}
	if o.PendingDeposits != nil {
		toSerialize["pendingDeposits"] = o.PendingDeposits
	}
	if o.ShortOptionMarketValue != nil {
		toSerialize["shortOptionMarketValue"] = o.ShortOptionMarketValue
	}
	if o.ShortStockValue != nil {
		toSerialize["shortStockValue"] = o.ShortStockValue
	}
	if o.UnsettledCash != nil {
		toSerialize["unsettledCash"] = o.UnsettledCash
	}
	return json.Marshal(toSerialize)
}

type NullableCashAccountInitialBalances struct {
	value *CashAccountInitialBalances
	isSet bool
}

func (v NullableCashAccountInitialBalances) Get() *CashAccountInitialBalances {
	return v.value
}

func (v *NullableCashAccountInitialBalances) Set(val *CashAccountInitialBalances) {
	v.value = val
	v.isSet = true
}

func (v NullableCashAccountInitialBalances) IsSet() bool {
	return v.isSet
}

func (v *NullableCashAccountInitialBalances) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashAccountInitialBalances(val *CashAccountInitialBalances) *NullableCashAccountInitialBalances {
	return &NullableCashAccountInitialBalances{value: val, isSet: true}
}

func (v NullableCashAccountInitialBalances) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashAccountInitialBalances) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


