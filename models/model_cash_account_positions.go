/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CashAccountPositions struct for CashAccountPositions
type CashAccountPositions struct {
	AgedQuantity *float32 `json:"agedQuantity,omitempty"`
	AveragePrice *float32 `json:"averagePrice,omitempty"`
	CurrentDayProfitLoss *float32 `json:"currentDayProfitLoss,omitempty"`
	CurrentDayProfitLossPercentage *float32 `json:"currentDayProfitLossPercentage,omitempty"`
	Instrument *InstrumentType `json:"instrument,omitempty"`
	LongQuantity *float32 `json:"longQuantity,omitempty"`
	MarketValue *float32 `json:"marketValue,omitempty"`
	SettledLongQuantity *float32 `json:"settledLongQuantity,omitempty"`
	SettledShortQuantity *float32 `json:"settledShortQuantity,omitempty"`
	ShortQuantity *float32 `json:"shortQuantity,omitempty"`
}

// NewCashAccountPositions instantiates a new CashAccountPositions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashAccountPositions() *CashAccountPositions {
	this := CashAccountPositions{}
	return &this
}

// NewCashAccountPositionsWithDefaults instantiates a new CashAccountPositions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashAccountPositionsWithDefaults() *CashAccountPositions {
	this := CashAccountPositions{}
	return &this
}

// GetAgedQuantity returns the AgedQuantity field value if set, zero value otherwise.
func (o *CashAccountPositions) GetAgedQuantity() float32 {
	if o == nil || o.AgedQuantity == nil {
		var ret float32
		return ret
	}
	return *o.AgedQuantity
}

// GetAgedQuantityOk returns a tuple with the AgedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountPositions) GetAgedQuantityOk() (*float32, bool) {
	if o == nil || o.AgedQuantity == nil {
		return nil, false
	}
	return o.AgedQuantity, true
}

// HasAgedQuantity returns a boolean if a field has been set.
func (o *CashAccountPositions) HasAgedQuantity() bool {
	if o != nil && o.AgedQuantity != nil {
		return true
	}

	return false
}

// SetAgedQuantity gets a reference to the given float32 and assigns it to the AgedQuantity field.
func (o *CashAccountPositions) SetAgedQuantity(v float32) {
	o.AgedQuantity = &v
}

// GetAveragePrice returns the AveragePrice field value if set, zero value otherwise.
func (o *CashAccountPositions) GetAveragePrice() float32 {
	if o == nil || o.AveragePrice == nil {
		var ret float32
		return ret
	}
	return *o.AveragePrice
}

// GetAveragePriceOk returns a tuple with the AveragePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountPositions) GetAveragePriceOk() (*float32, bool) {
	if o == nil || o.AveragePrice == nil {
		return nil, false
	}
	return o.AveragePrice, true
}

// HasAveragePrice returns a boolean if a field has been set.
func (o *CashAccountPositions) HasAveragePrice() bool {
	if o != nil && o.AveragePrice != nil {
		return true
	}

	return false
}

// SetAveragePrice gets a reference to the given float32 and assigns it to the AveragePrice field.
func (o *CashAccountPositions) SetAveragePrice(v float32) {
	o.AveragePrice = &v
}

// GetCurrentDayProfitLoss returns the CurrentDayProfitLoss field value if set, zero value otherwise.
func (o *CashAccountPositions) GetCurrentDayProfitLoss() float32 {
	if o == nil || o.CurrentDayProfitLoss == nil {
		var ret float32
		return ret
	}
	return *o.CurrentDayProfitLoss
}

// GetCurrentDayProfitLossOk returns a tuple with the CurrentDayProfitLoss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountPositions) GetCurrentDayProfitLossOk() (*float32, bool) {
	if o == nil || o.CurrentDayProfitLoss == nil {
		return nil, false
	}
	return o.CurrentDayProfitLoss, true
}

// HasCurrentDayProfitLoss returns a boolean if a field has been set.
func (o *CashAccountPositions) HasCurrentDayProfitLoss() bool {
	if o != nil && o.CurrentDayProfitLoss != nil {
		return true
	}

	return false
}

// SetCurrentDayProfitLoss gets a reference to the given float32 and assigns it to the CurrentDayProfitLoss field.
func (o *CashAccountPositions) SetCurrentDayProfitLoss(v float32) {
	o.CurrentDayProfitLoss = &v
}

// GetCurrentDayProfitLossPercentage returns the CurrentDayProfitLossPercentage field value if set, zero value otherwise.
func (o *CashAccountPositions) GetCurrentDayProfitLossPercentage() float32 {
	if o == nil || o.CurrentDayProfitLossPercentage == nil {
		var ret float32
		return ret
	}
	return *o.CurrentDayProfitLossPercentage
}

// GetCurrentDayProfitLossPercentageOk returns a tuple with the CurrentDayProfitLossPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountPositions) GetCurrentDayProfitLossPercentageOk() (*float32, bool) {
	if o == nil || o.CurrentDayProfitLossPercentage == nil {
		return nil, false
	}
	return o.CurrentDayProfitLossPercentage, true
}

// HasCurrentDayProfitLossPercentage returns a boolean if a field has been set.
func (o *CashAccountPositions) HasCurrentDayProfitLossPercentage() bool {
	if o != nil && o.CurrentDayProfitLossPercentage != nil {
		return true
	}

	return false
}

// SetCurrentDayProfitLossPercentage gets a reference to the given float32 and assigns it to the CurrentDayProfitLossPercentage field.
func (o *CashAccountPositions) SetCurrentDayProfitLossPercentage(v float32) {
	o.CurrentDayProfitLossPercentage = &v
}

// GetInstrument returns the Instrument field value if set, zero value otherwise.
func (o *CashAccountPositions) GetInstrument() InstrumentType {
	if o == nil || o.Instrument == nil {
		var ret InstrumentType
		return ret
	}
	return *o.Instrument
}

// GetInstrumentOk returns a tuple with the Instrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountPositions) GetInstrumentOk() (*InstrumentType, bool) {
	if o == nil || o.Instrument == nil {
		return nil, false
	}
	return o.Instrument, true
}

// HasInstrument returns a boolean if a field has been set.
func (o *CashAccountPositions) HasInstrument() bool {
	if o != nil && o.Instrument != nil {
		return true
	}

	return false
}

// SetInstrument gets a reference to the given InstrumentType and assigns it to the Instrument field.
func (o *CashAccountPositions) SetInstrument(v InstrumentType) {
	o.Instrument = &v
}

// GetLongQuantity returns the LongQuantity field value if set, zero value otherwise.
func (o *CashAccountPositions) GetLongQuantity() float32 {
	if o == nil || o.LongQuantity == nil {
		var ret float32
		return ret
	}
	return *o.LongQuantity
}

// GetLongQuantityOk returns a tuple with the LongQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountPositions) GetLongQuantityOk() (*float32, bool) {
	if o == nil || o.LongQuantity == nil {
		return nil, false
	}
	return o.LongQuantity, true
}

// HasLongQuantity returns a boolean if a field has been set.
func (o *CashAccountPositions) HasLongQuantity() bool {
	if o != nil && o.LongQuantity != nil {
		return true
	}

	return false
}

// SetLongQuantity gets a reference to the given float32 and assigns it to the LongQuantity field.
func (o *CashAccountPositions) SetLongQuantity(v float32) {
	o.LongQuantity = &v
}

// GetMarketValue returns the MarketValue field value if set, zero value otherwise.
func (o *CashAccountPositions) GetMarketValue() float32 {
	if o == nil || o.MarketValue == nil {
		var ret float32
		return ret
	}
	return *o.MarketValue
}

// GetMarketValueOk returns a tuple with the MarketValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountPositions) GetMarketValueOk() (*float32, bool) {
	if o == nil || o.MarketValue == nil {
		return nil, false
	}
	return o.MarketValue, true
}

// HasMarketValue returns a boolean if a field has been set.
func (o *CashAccountPositions) HasMarketValue() bool {
	if o != nil && o.MarketValue != nil {
		return true
	}

	return false
}

// SetMarketValue gets a reference to the given float32 and assigns it to the MarketValue field.
func (o *CashAccountPositions) SetMarketValue(v float32) {
	o.MarketValue = &v
}

// GetSettledLongQuantity returns the SettledLongQuantity field value if set, zero value otherwise.
func (o *CashAccountPositions) GetSettledLongQuantity() float32 {
	if o == nil || o.SettledLongQuantity == nil {
		var ret float32
		return ret
	}
	return *o.SettledLongQuantity
}

// GetSettledLongQuantityOk returns a tuple with the SettledLongQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountPositions) GetSettledLongQuantityOk() (*float32, bool) {
	if o == nil || o.SettledLongQuantity == nil {
		return nil, false
	}
	return o.SettledLongQuantity, true
}

// HasSettledLongQuantity returns a boolean if a field has been set.
func (o *CashAccountPositions) HasSettledLongQuantity() bool {
	if o != nil && o.SettledLongQuantity != nil {
		return true
	}

	return false
}

// SetSettledLongQuantity gets a reference to the given float32 and assigns it to the SettledLongQuantity field.
func (o *CashAccountPositions) SetSettledLongQuantity(v float32) {
	o.SettledLongQuantity = &v
}

// GetSettledShortQuantity returns the SettledShortQuantity field value if set, zero value otherwise.
func (o *CashAccountPositions) GetSettledShortQuantity() float32 {
	if o == nil || o.SettledShortQuantity == nil {
		var ret float32
		return ret
	}
	return *o.SettledShortQuantity
}

// GetSettledShortQuantityOk returns a tuple with the SettledShortQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountPositions) GetSettledShortQuantityOk() (*float32, bool) {
	if o == nil || o.SettledShortQuantity == nil {
		return nil, false
	}
	return o.SettledShortQuantity, true
}

// HasSettledShortQuantity returns a boolean if a field has been set.
func (o *CashAccountPositions) HasSettledShortQuantity() bool {
	if o != nil && o.SettledShortQuantity != nil {
		return true
	}

	return false
}

// SetSettledShortQuantity gets a reference to the given float32 and assigns it to the SettledShortQuantity field.
func (o *CashAccountPositions) SetSettledShortQuantity(v float32) {
	o.SettledShortQuantity = &v
}

// GetShortQuantity returns the ShortQuantity field value if set, zero value otherwise.
func (o *CashAccountPositions) GetShortQuantity() float32 {
	if o == nil || o.ShortQuantity == nil {
		var ret float32
		return ret
	}
	return *o.ShortQuantity
}

// GetShortQuantityOk returns a tuple with the ShortQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashAccountPositions) GetShortQuantityOk() (*float32, bool) {
	if o == nil || o.ShortQuantity == nil {
		return nil, false
	}
	return o.ShortQuantity, true
}

// HasShortQuantity returns a boolean if a field has been set.
func (o *CashAccountPositions) HasShortQuantity() bool {
	if o != nil && o.ShortQuantity != nil {
		return true
	}

	return false
}

// SetShortQuantity gets a reference to the given float32 and assigns it to the ShortQuantity field.
func (o *CashAccountPositions) SetShortQuantity(v float32) {
	o.ShortQuantity = &v
}

func (o CashAccountPositions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AgedQuantity != nil {
		toSerialize["agedQuantity"] = o.AgedQuantity
	}
	if o.AveragePrice != nil {
		toSerialize["averagePrice"] = o.AveragePrice
	}
	if o.CurrentDayProfitLoss != nil {
		toSerialize["currentDayProfitLoss"] = o.CurrentDayProfitLoss
	}
	if o.CurrentDayProfitLossPercentage != nil {
		toSerialize["currentDayProfitLossPercentage"] = o.CurrentDayProfitLossPercentage
	}
	if o.Instrument != nil {
		toSerialize["instrument"] = o.Instrument
	}
	if o.LongQuantity != nil {
		toSerialize["longQuantity"] = o.LongQuantity
	}
	if o.MarketValue != nil {
		toSerialize["marketValue"] = o.MarketValue
	}
	if o.SettledLongQuantity != nil {
		toSerialize["settledLongQuantity"] = o.SettledLongQuantity
	}
	if o.SettledShortQuantity != nil {
		toSerialize["settledShortQuantity"] = o.SettledShortQuantity
	}
	if o.ShortQuantity != nil {
		toSerialize["shortQuantity"] = o.ShortQuantity
	}
	return json.Marshal(toSerialize)
}

type NullableCashAccountPositions struct {
	value *CashAccountPositions
	isSet bool
}

func (v NullableCashAccountPositions) Get() *CashAccountPositions {
	return v.value
}

func (v *NullableCashAccountPositions) Set(val *CashAccountPositions) {
	v.value = val
	v.isSet = true
}

func (v NullableCashAccountPositions) IsSet() bool {
	return v.isSet
}

func (v *NullableCashAccountPositions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashAccountPositions(val *CashAccountPositions) *NullableCashAccountPositions {
	return &NullableCashAccountPositions{value: val, isSet: true}
}

func (v NullableCashAccountPositions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashAccountPositions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


