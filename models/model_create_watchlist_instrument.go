/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateWatchlistInstrument struct for CreateWatchlistInstrument
type CreateWatchlistInstrument struct {
	AssetType *AssetType `json:"assetType,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
}

// NewCreateWatchlistInstrument instantiates a new CreateWatchlistInstrument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateWatchlistInstrument() *CreateWatchlistInstrument {
	this := CreateWatchlistInstrument{}
	return &this
}

// NewCreateWatchlistInstrumentWithDefaults instantiates a new CreateWatchlistInstrument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateWatchlistInstrumentWithDefaults() *CreateWatchlistInstrument {
	this := CreateWatchlistInstrument{}
	return &this
}

// GetAssetType returns the AssetType field value if set, zero value otherwise.
func (o *CreateWatchlistInstrument) GetAssetType() AssetType {
	if o == nil || o.AssetType == nil {
		var ret AssetType
		return ret
	}
	return *o.AssetType
}

// GetAssetTypeOk returns a tuple with the AssetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWatchlistInstrument) GetAssetTypeOk() (*AssetType, bool) {
	if o == nil || o.AssetType == nil {
		return nil, false
	}
	return o.AssetType, true
}

// HasAssetType returns a boolean if a field has been set.
func (o *CreateWatchlistInstrument) HasAssetType() bool {
	if o != nil && o.AssetType != nil {
		return true
	}

	return false
}

// SetAssetType gets a reference to the given AssetType and assigns it to the AssetType field.
func (o *CreateWatchlistInstrument) SetAssetType(v AssetType) {
	o.AssetType = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *CreateWatchlistInstrument) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWatchlistInstrument) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *CreateWatchlistInstrument) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *CreateWatchlistInstrument) SetSymbol(v string) {
	o.Symbol = &v
}

func (o CreateWatchlistInstrument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssetType != nil {
		toSerialize["assetType"] = o.AssetType
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	return json.Marshal(toSerialize)
}

type NullableCreateWatchlistInstrument struct {
	value *CreateWatchlistInstrument
	isSet bool
}

func (v NullableCreateWatchlistInstrument) Get() *CreateWatchlistInstrument {
	return v.value
}

func (v *NullableCreateWatchlistInstrument) Set(val *CreateWatchlistInstrument) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateWatchlistInstrument) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateWatchlistInstrument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateWatchlistInstrument(val *CreateWatchlistInstrument) *NullableCreateWatchlistInstrument {
	return &NullableCreateWatchlistInstrument{value: val, isSet: true}
}

func (v NullableCreateWatchlistInstrument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateWatchlistInstrument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


