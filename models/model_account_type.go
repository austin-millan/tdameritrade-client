/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AccountType - struct for AccountType
type AccountType struct {
	CashAccount *CashAccount
	MarginAccount *MarginAccount
}

// CashAccountAsAccountType is a convenience function that returns CashAccount wrapped in AccountType
func CashAccountAsAccountType(v *CashAccount) AccountType {
	return AccountType{ CashAccount: v}
}

// MarginAccountAsAccountType is a convenience function that returns MarginAccount wrapped in AccountType
func MarginAccountAsAccountType(v *MarginAccount) AccountType {
	return AccountType{ MarginAccount: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AccountType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CashAccount
	err = json.Unmarshal(data, &dst.CashAccount)
	if err == nil {
		jsonCashAccount, _ := json.Marshal(dst.CashAccount)
		if string(jsonCashAccount) == "{}" { // empty struct
			dst.CashAccount = nil
		} else {
			match++
		}
	} else {
		dst.CashAccount = nil
	}

	// try to unmarshal data into MarginAccount
	err = json.Unmarshal(data, &dst.MarginAccount)
	if err == nil {
		jsonMarginAccount, _ := json.Marshal(dst.MarginAccount)
		if string(jsonMarginAccount) == "{}" { // empty struct
			dst.MarginAccount = nil
		} else {
			match++
		}
	} else {
		dst.MarginAccount = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CashAccount = nil
		dst.MarginAccount = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(AccountType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(AccountType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AccountType) MarshalJSON() ([]byte, error) {
	if src.CashAccount != nil {
		return json.Marshal(&src.CashAccount)
	}

	if src.MarginAccount != nil {
		return json.Marshal(&src.MarginAccount)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AccountType) GetActualInstance() (interface{}) {
	if obj.CashAccount != nil {
		return obj.CashAccount
	}

	if obj.MarginAccount != nil {
		return obj.MarginAccount
	}

	// all schemas are nil
	return nil
}

type NullableAccountType struct {
	value *AccountType
	isSet bool
}

func (v NullableAccountType) Get() *AccountType {
	return v.value
}

func (v *NullableAccountType) Set(val *AccountType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountType(val *AccountType) *NullableAccountType {
	return &NullableAccountType{value: val, isSet: true}
}

func (v NullableAccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


