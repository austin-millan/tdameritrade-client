/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Strategy the model 'Strategy'
type Strategy string

// List of Strategy
const (
	STRATEGY_SINGLE Strategy = "SINGLE"
	STRATEGY_ANALYTICAL Strategy = "ANALYTICAL"
	STRATEGY_COVERED Strategy = "COVERED"
	STRATEGY_VERTICAL Strategy = "VERTICAL"
	STRATEGY_CALENDAR Strategy = "CALENDAR"
	STRATEGY_STRANGLE Strategy = "STRANGLE"
	STRATEGY_STRADDLE Strategy = "STRADDLE"
	STRATEGY_BUTTERFLY Strategy = "BUTTERFLY"
	STRATEGY_CONDOR Strategy = "CONDOR"
	STRATEGY_DIAGONAL Strategy = "DIAGONAL"
	STRATEGY_COLLAR Strategy = "COLLAR"
	STRATEGY_ROLL Strategy = "ROLL"
)

func (v *Strategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Strategy(value)
	for _, existing := range []Strategy{ "SINGLE", "ANALYTICAL", "COVERED", "VERTICAL", "CALENDAR", "STRANGLE", "STRADDLE", "BUTTERFLY", "CONDOR", "DIAGONAL", "COLLAR", "ROLL",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Strategy", value)
}

// Ptr returns reference to Strategy value
func (v Strategy) Ptr() *Strategy {
	return &v
}

type NullableStrategy struct {
	value *Strategy
	isSet bool
}

func (v NullableStrategy) Get() *Strategy {
	return v.value
}

func (v *NullableStrategy) Set(val *Strategy) {
	v.value = val
	v.isSet = true
}

func (v NullableStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStrategy(val *Strategy) *NullableStrategy {
	return &NullableStrategy{value: val, isSet: true}
}

func (v NullableStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

