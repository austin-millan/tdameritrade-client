/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserPrincipal struct for UserPrincipal
type UserPrincipal struct {
	AccessLevel *string `json:"accessLevel,omitempty"`
	Accounts *[]UserPrincipalAccounts `json:"accounts,omitempty"`
	AuthToken *string `json:"authToken,omitempty"`
	LastLoginTime *string `json:"lastLoginTime,omitempty"`
	LoginTime *string `json:"loginTime,omitempty"`
	PrimaryAccountId *string `json:"primaryAccountId,omitempty"`
	ProfessionalStatus *string `json:"professionalStatus,omitempty"`
	Quotes *UserPrincipalQuotes `json:"quotes,omitempty"`
	StalePassword *bool `json:"stalePassword,omitempty"`
	StreamerInfo *UserPrincipalStreamerInfo `json:"streamerInfo,omitempty"`
	StreamerSubscriptionKeys *UserPrincipalStreamerSubscriptionKeys `json:"streamerSubscriptionKeys,omitempty"`
	TokenExpirationTime *string `json:"tokenExpirationTime,omitempty"`
	UserCdDomainId *string `json:"userCdDomainId,omitempty"`
	UserId *string `json:"userId,omitempty"`
}

// NewUserPrincipal instantiates a new UserPrincipal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPrincipal() *UserPrincipal {
	this := UserPrincipal{}
	return &this
}

// NewUserPrincipalWithDefaults instantiates a new UserPrincipal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPrincipalWithDefaults() *UserPrincipal {
	this := UserPrincipal{}
	return &this
}

// GetAccessLevel returns the AccessLevel field value if set, zero value otherwise.
func (o *UserPrincipal) GetAccessLevel() string {
	if o == nil || o.AccessLevel == nil {
		var ret string
		return ret
	}
	return *o.AccessLevel
}

// GetAccessLevelOk returns a tuple with the AccessLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPrincipal) GetAccessLevelOk() (*string, bool) {
	if o == nil || o.AccessLevel == nil {
		return nil, false
	}
	return o.AccessLevel, true
}

// HasAccessLevel returns a boolean if a field has been set.
func (o *UserPrincipal) HasAccessLevel() bool {
	if o != nil && o.AccessLevel != nil {
		return true
	}

	return false
}

// SetAccessLevel gets a reference to the given string and assigns it to the AccessLevel field.
func (o *UserPrincipal) SetAccessLevel(v string) {
	o.AccessLevel = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *UserPrincipal) GetAccounts() []UserPrincipalAccounts {
	if o == nil || o.Accounts == nil {
		var ret []UserPrincipalAccounts
		return ret
	}
	return *o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPrincipal) GetAccountsOk() (*[]UserPrincipalAccounts, bool) {
	if o == nil || o.Accounts == nil {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *UserPrincipal) HasAccounts() bool {
	if o != nil && o.Accounts != nil {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []UserPrincipalAccounts and assigns it to the Accounts field.
func (o *UserPrincipal) SetAccounts(v []UserPrincipalAccounts) {
	o.Accounts = &v
}

// GetAuthToken returns the AuthToken field value if set, zero value otherwise.
func (o *UserPrincipal) GetAuthToken() string {
	if o == nil || o.AuthToken == nil {
		var ret string
		return ret
	}
	return *o.AuthToken
}

// GetAuthTokenOk returns a tuple with the AuthToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPrincipal) GetAuthTokenOk() (*string, bool) {
	if o == nil || o.AuthToken == nil {
		return nil, false
	}
	return o.AuthToken, true
}

// HasAuthToken returns a boolean if a field has been set.
func (o *UserPrincipal) HasAuthToken() bool {
	if o != nil && o.AuthToken != nil {
		return true
	}

	return false
}

// SetAuthToken gets a reference to the given string and assigns it to the AuthToken field.
func (o *UserPrincipal) SetAuthToken(v string) {
	o.AuthToken = &v
}

// GetLastLoginTime returns the LastLoginTime field value if set, zero value otherwise.
func (o *UserPrincipal) GetLastLoginTime() string {
	if o == nil || o.LastLoginTime == nil {
		var ret string
		return ret
	}
	return *o.LastLoginTime
}

// GetLastLoginTimeOk returns a tuple with the LastLoginTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPrincipal) GetLastLoginTimeOk() (*string, bool) {
	if o == nil || o.LastLoginTime == nil {
		return nil, false
	}
	return o.LastLoginTime, true
}

// HasLastLoginTime returns a boolean if a field has been set.
func (o *UserPrincipal) HasLastLoginTime() bool {
	if o != nil && o.LastLoginTime != nil {
		return true
	}

	return false
}

// SetLastLoginTime gets a reference to the given string and assigns it to the LastLoginTime field.
func (o *UserPrincipal) SetLastLoginTime(v string) {
	o.LastLoginTime = &v
}

// GetLoginTime returns the LoginTime field value if set, zero value otherwise.
func (o *UserPrincipal) GetLoginTime() string {
	if o == nil || o.LoginTime == nil {
		var ret string
		return ret
	}
	return *o.LoginTime
}

// GetLoginTimeOk returns a tuple with the LoginTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPrincipal) GetLoginTimeOk() (*string, bool) {
	if o == nil || o.LoginTime == nil {
		return nil, false
	}
	return o.LoginTime, true
}

// HasLoginTime returns a boolean if a field has been set.
func (o *UserPrincipal) HasLoginTime() bool {
	if o != nil && o.LoginTime != nil {
		return true
	}

	return false
}

// SetLoginTime gets a reference to the given string and assigns it to the LoginTime field.
func (o *UserPrincipal) SetLoginTime(v string) {
	o.LoginTime = &v
}

// GetPrimaryAccountId returns the PrimaryAccountId field value if set, zero value otherwise.
func (o *UserPrincipal) GetPrimaryAccountId() string {
	if o == nil || o.PrimaryAccountId == nil {
		var ret string
		return ret
	}
	return *o.PrimaryAccountId
}

// GetPrimaryAccountIdOk returns a tuple with the PrimaryAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPrincipal) GetPrimaryAccountIdOk() (*string, bool) {
	if o == nil || o.PrimaryAccountId == nil {
		return nil, false
	}
	return o.PrimaryAccountId, true
}

// HasPrimaryAccountId returns a boolean if a field has been set.
func (o *UserPrincipal) HasPrimaryAccountId() bool {
	if o != nil && o.PrimaryAccountId != nil {
		return true
	}

	return false
}

// SetPrimaryAccountId gets a reference to the given string and assigns it to the PrimaryAccountId field.
func (o *UserPrincipal) SetPrimaryAccountId(v string) {
	o.PrimaryAccountId = &v
}

// GetProfessionalStatus returns the ProfessionalStatus field value if set, zero value otherwise.
func (o *UserPrincipal) GetProfessionalStatus() string {
	if o == nil || o.ProfessionalStatus == nil {
		var ret string
		return ret
	}
	return *o.ProfessionalStatus
}

// GetProfessionalStatusOk returns a tuple with the ProfessionalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPrincipal) GetProfessionalStatusOk() (*string, bool) {
	if o == nil || o.ProfessionalStatus == nil {
		return nil, false
	}
	return o.ProfessionalStatus, true
}

// HasProfessionalStatus returns a boolean if a field has been set.
func (o *UserPrincipal) HasProfessionalStatus() bool {
	if o != nil && o.ProfessionalStatus != nil {
		return true
	}

	return false
}

// SetProfessionalStatus gets a reference to the given string and assigns it to the ProfessionalStatus field.
func (o *UserPrincipal) SetProfessionalStatus(v string) {
	o.ProfessionalStatus = &v
}

// GetQuotes returns the Quotes field value if set, zero value otherwise.
func (o *UserPrincipal) GetQuotes() UserPrincipalQuotes {
	if o == nil || o.Quotes == nil {
		var ret UserPrincipalQuotes
		return ret
	}
	return *o.Quotes
}

// GetQuotesOk returns a tuple with the Quotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPrincipal) GetQuotesOk() (*UserPrincipalQuotes, bool) {
	if o == nil || o.Quotes == nil {
		return nil, false
	}
	return o.Quotes, true
}

// HasQuotes returns a boolean if a field has been set.
func (o *UserPrincipal) HasQuotes() bool {
	if o != nil && o.Quotes != nil {
		return true
	}

	return false
}

// SetQuotes gets a reference to the given UserPrincipalQuotes and assigns it to the Quotes field.
func (o *UserPrincipal) SetQuotes(v UserPrincipalQuotes) {
	o.Quotes = &v
}

// GetStalePassword returns the StalePassword field value if set, zero value otherwise.
func (o *UserPrincipal) GetStalePassword() bool {
	if o == nil || o.StalePassword == nil {
		var ret bool
		return ret
	}
	return *o.StalePassword
}

// GetStalePasswordOk returns a tuple with the StalePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPrincipal) GetStalePasswordOk() (*bool, bool) {
	if o == nil || o.StalePassword == nil {
		return nil, false
	}
	return o.StalePassword, true
}

// HasStalePassword returns a boolean if a field has been set.
func (o *UserPrincipal) HasStalePassword() bool {
	if o != nil && o.StalePassword != nil {
		return true
	}

	return false
}

// SetStalePassword gets a reference to the given bool and assigns it to the StalePassword field.
func (o *UserPrincipal) SetStalePassword(v bool) {
	o.StalePassword = &v
}

// GetStreamerInfo returns the StreamerInfo field value if set, zero value otherwise.
func (o *UserPrincipal) GetStreamerInfo() UserPrincipalStreamerInfo {
	if o == nil || o.StreamerInfo == nil {
		var ret UserPrincipalStreamerInfo
		return ret
	}
	return *o.StreamerInfo
}

// GetStreamerInfoOk returns a tuple with the StreamerInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPrincipal) GetStreamerInfoOk() (*UserPrincipalStreamerInfo, bool) {
	if o == nil || o.StreamerInfo == nil {
		return nil, false
	}
	return o.StreamerInfo, true
}

// HasStreamerInfo returns a boolean if a field has been set.
func (o *UserPrincipal) HasStreamerInfo() bool {
	if o != nil && o.StreamerInfo != nil {
		return true
	}

	return false
}

// SetStreamerInfo gets a reference to the given UserPrincipalStreamerInfo and assigns it to the StreamerInfo field.
func (o *UserPrincipal) SetStreamerInfo(v UserPrincipalStreamerInfo) {
	o.StreamerInfo = &v
}

// GetStreamerSubscriptionKeys returns the StreamerSubscriptionKeys field value if set, zero value otherwise.
func (o *UserPrincipal) GetStreamerSubscriptionKeys() UserPrincipalStreamerSubscriptionKeys {
	if o == nil || o.StreamerSubscriptionKeys == nil {
		var ret UserPrincipalStreamerSubscriptionKeys
		return ret
	}
	return *o.StreamerSubscriptionKeys
}

// GetStreamerSubscriptionKeysOk returns a tuple with the StreamerSubscriptionKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPrincipal) GetStreamerSubscriptionKeysOk() (*UserPrincipalStreamerSubscriptionKeys, bool) {
	if o == nil || o.StreamerSubscriptionKeys == nil {
		return nil, false
	}
	return o.StreamerSubscriptionKeys, true
}

// HasStreamerSubscriptionKeys returns a boolean if a field has been set.
func (o *UserPrincipal) HasStreamerSubscriptionKeys() bool {
	if o != nil && o.StreamerSubscriptionKeys != nil {
		return true
	}

	return false
}

// SetStreamerSubscriptionKeys gets a reference to the given UserPrincipalStreamerSubscriptionKeys and assigns it to the StreamerSubscriptionKeys field.
func (o *UserPrincipal) SetStreamerSubscriptionKeys(v UserPrincipalStreamerSubscriptionKeys) {
	o.StreamerSubscriptionKeys = &v
}

// GetTokenExpirationTime returns the TokenExpirationTime field value if set, zero value otherwise.
func (o *UserPrincipal) GetTokenExpirationTime() string {
	if o == nil || o.TokenExpirationTime == nil {
		var ret string
		return ret
	}
	return *o.TokenExpirationTime
}

// GetTokenExpirationTimeOk returns a tuple with the TokenExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPrincipal) GetTokenExpirationTimeOk() (*string, bool) {
	if o == nil || o.TokenExpirationTime == nil {
		return nil, false
	}
	return o.TokenExpirationTime, true
}

// HasTokenExpirationTime returns a boolean if a field has been set.
func (o *UserPrincipal) HasTokenExpirationTime() bool {
	if o != nil && o.TokenExpirationTime != nil {
		return true
	}

	return false
}

// SetTokenExpirationTime gets a reference to the given string and assigns it to the TokenExpirationTime field.
func (o *UserPrincipal) SetTokenExpirationTime(v string) {
	o.TokenExpirationTime = &v
}

// GetUserCdDomainId returns the UserCdDomainId field value if set, zero value otherwise.
func (o *UserPrincipal) GetUserCdDomainId() string {
	if o == nil || o.UserCdDomainId == nil {
		var ret string
		return ret
	}
	return *o.UserCdDomainId
}

// GetUserCdDomainIdOk returns a tuple with the UserCdDomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPrincipal) GetUserCdDomainIdOk() (*string, bool) {
	if o == nil || o.UserCdDomainId == nil {
		return nil, false
	}
	return o.UserCdDomainId, true
}

// HasUserCdDomainId returns a boolean if a field has been set.
func (o *UserPrincipal) HasUserCdDomainId() bool {
	if o != nil && o.UserCdDomainId != nil {
		return true
	}

	return false
}

// SetUserCdDomainId gets a reference to the given string and assigns it to the UserCdDomainId field.
func (o *UserPrincipal) SetUserCdDomainId(v string) {
	o.UserCdDomainId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UserPrincipal) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPrincipal) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UserPrincipal) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *UserPrincipal) SetUserId(v string) {
	o.UserId = &v
}

func (o UserPrincipal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessLevel != nil {
		toSerialize["accessLevel"] = o.AccessLevel
	}
	if o.Accounts != nil {
		toSerialize["accounts"] = o.Accounts
	}
	if o.AuthToken != nil {
		toSerialize["authToken"] = o.AuthToken
	}
	if o.LastLoginTime != nil {
		toSerialize["lastLoginTime"] = o.LastLoginTime
	}
	if o.LoginTime != nil {
		toSerialize["loginTime"] = o.LoginTime
	}
	if o.PrimaryAccountId != nil {
		toSerialize["primaryAccountId"] = o.PrimaryAccountId
	}
	if o.ProfessionalStatus != nil {
		toSerialize["professionalStatus"] = o.ProfessionalStatus
	}
	if o.Quotes != nil {
		toSerialize["quotes"] = o.Quotes
	}
	if o.StalePassword != nil {
		toSerialize["stalePassword"] = o.StalePassword
	}
	if o.StreamerInfo != nil {
		toSerialize["streamerInfo"] = o.StreamerInfo
	}
	if o.StreamerSubscriptionKeys != nil {
		toSerialize["streamerSubscriptionKeys"] = o.StreamerSubscriptionKeys
	}
	if o.TokenExpirationTime != nil {
		toSerialize["tokenExpirationTime"] = o.TokenExpirationTime
	}
	if o.UserCdDomainId != nil {
		toSerialize["userCdDomainId"] = o.UserCdDomainId
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableUserPrincipal struct {
	value *UserPrincipal
	isSet bool
}

func (v NullableUserPrincipal) Get() *UserPrincipal {
	return v.value
}

func (v *NullableUserPrincipal) Set(val *UserPrincipal) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPrincipal) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPrincipal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPrincipal(val *UserPrincipal) *NullableUserPrincipal {
	return &NullableUserPrincipal{value: val, isSet: true}
}

func (v NullableUserPrincipal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPrincipal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


