/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransactionTransactionItem struct for TransactionTransactionItem
type TransactionTransactionItem struct {
	AccountId *float32 `json:"accountId,omitempty"`
	Amount *float32 `json:"amount,omitempty"`
	Cost *float32 `json:"cost,omitempty"`
	Instruction *Instruction `json:"instruction,omitempty"`
	Instrument *TransactionTransactionItemInstrument `json:"instrument,omitempty"`
	ParentChildIndicator *string `json:"parentChildIndicator,omitempty"`
	ParentOrderKey *float32 `json:"parentOrderKey,omitempty"`
	PositionEffect *PositionEffect `json:"positionEffect,omitempty"`
	Price *float32 `json:"price,omitempty"`
}

// NewTransactionTransactionItem instantiates a new TransactionTransactionItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionTransactionItem() *TransactionTransactionItem {
	this := TransactionTransactionItem{}
	return &this
}

// NewTransactionTransactionItemWithDefaults instantiates a new TransactionTransactionItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionTransactionItemWithDefaults() *TransactionTransactionItem {
	this := TransactionTransactionItem{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *TransactionTransactionItem) GetAccountId() float32 {
	if o == nil || o.AccountId == nil {
		var ret float32
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionTransactionItem) GetAccountIdOk() (*float32, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *TransactionTransactionItem) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given float32 and assigns it to the AccountId field.
func (o *TransactionTransactionItem) SetAccountId(v float32) {
	o.AccountId = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *TransactionTransactionItem) GetAmount() float32 {
	if o == nil || o.Amount == nil {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionTransactionItem) GetAmountOk() (*float32, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *TransactionTransactionItem) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *TransactionTransactionItem) SetAmount(v float32) {
	o.Amount = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *TransactionTransactionItem) GetCost() float32 {
	if o == nil || o.Cost == nil {
		var ret float32
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionTransactionItem) GetCostOk() (*float32, bool) {
	if o == nil || o.Cost == nil {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *TransactionTransactionItem) HasCost() bool {
	if o != nil && o.Cost != nil {
		return true
	}

	return false
}

// SetCost gets a reference to the given float32 and assigns it to the Cost field.
func (o *TransactionTransactionItem) SetCost(v float32) {
	o.Cost = &v
}

// GetInstruction returns the Instruction field value if set, zero value otherwise.
func (o *TransactionTransactionItem) GetInstruction() Instruction {
	if o == nil || o.Instruction == nil {
		var ret Instruction
		return ret
	}
	return *o.Instruction
}

// GetInstructionOk returns a tuple with the Instruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionTransactionItem) GetInstructionOk() (*Instruction, bool) {
	if o == nil || o.Instruction == nil {
		return nil, false
	}
	return o.Instruction, true
}

// HasInstruction returns a boolean if a field has been set.
func (o *TransactionTransactionItem) HasInstruction() bool {
	if o != nil && o.Instruction != nil {
		return true
	}

	return false
}

// SetInstruction gets a reference to the given Instruction and assigns it to the Instruction field.
func (o *TransactionTransactionItem) SetInstruction(v Instruction) {
	o.Instruction = &v
}

// GetInstrument returns the Instrument field value if set, zero value otherwise.
func (o *TransactionTransactionItem) GetInstrument() TransactionTransactionItemInstrument {
	if o == nil || o.Instrument == nil {
		var ret TransactionTransactionItemInstrument
		return ret
	}
	return *o.Instrument
}

// GetInstrumentOk returns a tuple with the Instrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionTransactionItem) GetInstrumentOk() (*TransactionTransactionItemInstrument, bool) {
	if o == nil || o.Instrument == nil {
		return nil, false
	}
	return o.Instrument, true
}

// HasInstrument returns a boolean if a field has been set.
func (o *TransactionTransactionItem) HasInstrument() bool {
	if o != nil && o.Instrument != nil {
		return true
	}

	return false
}

// SetInstrument gets a reference to the given TransactionTransactionItemInstrument and assigns it to the Instrument field.
func (o *TransactionTransactionItem) SetInstrument(v TransactionTransactionItemInstrument) {
	o.Instrument = &v
}

// GetParentChildIndicator returns the ParentChildIndicator field value if set, zero value otherwise.
func (o *TransactionTransactionItem) GetParentChildIndicator() string {
	if o == nil || o.ParentChildIndicator == nil {
		var ret string
		return ret
	}
	return *o.ParentChildIndicator
}

// GetParentChildIndicatorOk returns a tuple with the ParentChildIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionTransactionItem) GetParentChildIndicatorOk() (*string, bool) {
	if o == nil || o.ParentChildIndicator == nil {
		return nil, false
	}
	return o.ParentChildIndicator, true
}

// HasParentChildIndicator returns a boolean if a field has been set.
func (o *TransactionTransactionItem) HasParentChildIndicator() bool {
	if o != nil && o.ParentChildIndicator != nil {
		return true
	}

	return false
}

// SetParentChildIndicator gets a reference to the given string and assigns it to the ParentChildIndicator field.
func (o *TransactionTransactionItem) SetParentChildIndicator(v string) {
	o.ParentChildIndicator = &v
}

// GetParentOrderKey returns the ParentOrderKey field value if set, zero value otherwise.
func (o *TransactionTransactionItem) GetParentOrderKey() float32 {
	if o == nil || o.ParentOrderKey == nil {
		var ret float32
		return ret
	}
	return *o.ParentOrderKey
}

// GetParentOrderKeyOk returns a tuple with the ParentOrderKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionTransactionItem) GetParentOrderKeyOk() (*float32, bool) {
	if o == nil || o.ParentOrderKey == nil {
		return nil, false
	}
	return o.ParentOrderKey, true
}

// HasParentOrderKey returns a boolean if a field has been set.
func (o *TransactionTransactionItem) HasParentOrderKey() bool {
	if o != nil && o.ParentOrderKey != nil {
		return true
	}

	return false
}

// SetParentOrderKey gets a reference to the given float32 and assigns it to the ParentOrderKey field.
func (o *TransactionTransactionItem) SetParentOrderKey(v float32) {
	o.ParentOrderKey = &v
}

// GetPositionEffect returns the PositionEffect field value if set, zero value otherwise.
func (o *TransactionTransactionItem) GetPositionEffect() PositionEffect {
	if o == nil || o.PositionEffect == nil {
		var ret PositionEffect
		return ret
	}
	return *o.PositionEffect
}

// GetPositionEffectOk returns a tuple with the PositionEffect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionTransactionItem) GetPositionEffectOk() (*PositionEffect, bool) {
	if o == nil || o.PositionEffect == nil {
		return nil, false
	}
	return o.PositionEffect, true
}

// HasPositionEffect returns a boolean if a field has been set.
func (o *TransactionTransactionItem) HasPositionEffect() bool {
	if o != nil && o.PositionEffect != nil {
		return true
	}

	return false
}

// SetPositionEffect gets a reference to the given PositionEffect and assigns it to the PositionEffect field.
func (o *TransactionTransactionItem) SetPositionEffect(v PositionEffect) {
	o.PositionEffect = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *TransactionTransactionItem) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionTransactionItem) GetPriceOk() (*float32, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *TransactionTransactionItem) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *TransactionTransactionItem) SetPrice(v float32) {
	o.Price = &v
}

func (o TransactionTransactionItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountId != nil {
		toSerialize["accountId"] = o.AccountId
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.Cost != nil {
		toSerialize["cost"] = o.Cost
	}
	if o.Instruction != nil {
		toSerialize["instruction"] = o.Instruction
	}
	if o.Instrument != nil {
		toSerialize["instrument"] = o.Instrument
	}
	if o.ParentChildIndicator != nil {
		toSerialize["parentChildIndicator"] = o.ParentChildIndicator
	}
	if o.ParentOrderKey != nil {
		toSerialize["parentOrderKey"] = o.ParentOrderKey
	}
	if o.PositionEffect != nil {
		toSerialize["positionEffect"] = o.PositionEffect
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionTransactionItem struct {
	value *TransactionTransactionItem
	isSet bool
}

func (v NullableTransactionTransactionItem) Get() *TransactionTransactionItem {
	return v.value
}

func (v *NullableTransactionTransactionItem) Set(val *TransactionTransactionItem) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionTransactionItem) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionTransactionItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionTransactionItem(val *TransactionTransactionItem) *NullableTransactionTransactionItem {
	return &NullableTransactionTransactionItem{value: val, isSet: true}
}

func (v NullableTransactionTransactionItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionTransactionItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


