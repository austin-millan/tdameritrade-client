/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FutureOptions struct for FutureOptions
type FutureOptions struct {
	AskPriceInDouble *float32 `json:"askPriceInDouble,omitempty"`
	BidPriceInDouble *float32 `json:"bidPriceInDouble,omitempty"`
	ClosePriceInDouble *float32 `json:"closePriceInDouble,omitempty"`
	ContractType *PutOrCall `json:"contractType,omitempty"`
	DeltaInDouble *float32 `json:"deltaInDouble,omitempty"`
	Description *string `json:"description,omitempty"`
	Digits *float32 `json:"digits,omitempty"`
	ExchangeName *string `json:"exchangeName,omitempty"`
	ExerciseType *string `json:"exerciseType,omitempty"`
	ExpirationType *string `json:"expirationType,omitempty"`
	FutureExpirationDate *float32 `json:"futureExpirationDate,omitempty"`
	FutureIsActive *bool `json:"futureIsActive,omitempty"`
	FutureIsTradable *bool `json:"futureIsTradable,omitempty"`
	FuturePercentChange *float32 `json:"futurePercentChange,omitempty"`
	FutureTradingHours *string `json:"futureTradingHours,omitempty"`
	GammaInDouble *float32 `json:"gammaInDouble,omitempty"`
	HighPriceInDouble *float32 `json:"highPriceInDouble,omitempty"`
	InTheMoney *bool `json:"inTheMoney,omitempty"`
	LastPriceInDouble *float32 `json:"lastPriceInDouble,omitempty"`
	LowPriceInDouble *float32 `json:"lowPriceInDouble,omitempty"`
	Mark *float32 `json:"mark,omitempty"`
	MoneyIntrinsicValueInDouble *float32 `json:"moneyIntrinsicValueInDouble,omitempty"`
	MultiplierInDouble *float32 `json:"multiplierInDouble,omitempty"`
	NetChangeInDouble *float32 `json:"netChangeInDouble,omitempty"`
	OpenInterest *float32 `json:"openInterest,omitempty"`
	OpenPriceInDouble *float32 `json:"openPriceInDouble,omitempty"`
	RhoInDouble *float32 `json:"rhoInDouble,omitempty"`
	SecurityStatus *string `json:"securityStatus,omitempty"`
	StrikePriceInDouble *float32 `json:"strikePriceInDouble,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	ThetaInDouble *float32 `json:"thetaInDouble,omitempty"`
	Tick *float32 `json:"tick,omitempty"`
	TickAmount *float32 `json:"tickAmount,omitempty"`
	TimeValueInDouble *float32 `json:"timeValueInDouble,omitempty"`
	Underlying *string `json:"underlying,omitempty"`
	VegaInDouble *float32 `json:"vegaInDouble,omitempty"`
	Volatility *float32 `json:"volatility,omitempty"`
}

// NewFutureOptions instantiates a new FutureOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFutureOptions() *FutureOptions {
	this := FutureOptions{}
	return &this
}

// NewFutureOptionsWithDefaults instantiates a new FutureOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFutureOptionsWithDefaults() *FutureOptions {
	this := FutureOptions{}
	return &this
}

// GetAskPriceInDouble returns the AskPriceInDouble field value if set, zero value otherwise.
func (o *FutureOptions) GetAskPriceInDouble() float32 {
	if o == nil || o.AskPriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.AskPriceInDouble
}

// GetAskPriceInDoubleOk returns a tuple with the AskPriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetAskPriceInDoubleOk() (*float32, bool) {
	if o == nil || o.AskPriceInDouble == nil {
		return nil, false
	}
	return o.AskPriceInDouble, true
}

// HasAskPriceInDouble returns a boolean if a field has been set.
func (o *FutureOptions) HasAskPriceInDouble() bool {
	if o != nil && o.AskPriceInDouble != nil {
		return true
	}

	return false
}

// SetAskPriceInDouble gets a reference to the given float32 and assigns it to the AskPriceInDouble field.
func (o *FutureOptions) SetAskPriceInDouble(v float32) {
	o.AskPriceInDouble = &v
}

// GetBidPriceInDouble returns the BidPriceInDouble field value if set, zero value otherwise.
func (o *FutureOptions) GetBidPriceInDouble() float32 {
	if o == nil || o.BidPriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.BidPriceInDouble
}

// GetBidPriceInDoubleOk returns a tuple with the BidPriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetBidPriceInDoubleOk() (*float32, bool) {
	if o == nil || o.BidPriceInDouble == nil {
		return nil, false
	}
	return o.BidPriceInDouble, true
}

// HasBidPriceInDouble returns a boolean if a field has been set.
func (o *FutureOptions) HasBidPriceInDouble() bool {
	if o != nil && o.BidPriceInDouble != nil {
		return true
	}

	return false
}

// SetBidPriceInDouble gets a reference to the given float32 and assigns it to the BidPriceInDouble field.
func (o *FutureOptions) SetBidPriceInDouble(v float32) {
	o.BidPriceInDouble = &v
}

// GetClosePriceInDouble returns the ClosePriceInDouble field value if set, zero value otherwise.
func (o *FutureOptions) GetClosePriceInDouble() float32 {
	if o == nil || o.ClosePriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.ClosePriceInDouble
}

// GetClosePriceInDoubleOk returns a tuple with the ClosePriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetClosePriceInDoubleOk() (*float32, bool) {
	if o == nil || o.ClosePriceInDouble == nil {
		return nil, false
	}
	return o.ClosePriceInDouble, true
}

// HasClosePriceInDouble returns a boolean if a field has been set.
func (o *FutureOptions) HasClosePriceInDouble() bool {
	if o != nil && o.ClosePriceInDouble != nil {
		return true
	}

	return false
}

// SetClosePriceInDouble gets a reference to the given float32 and assigns it to the ClosePriceInDouble field.
func (o *FutureOptions) SetClosePriceInDouble(v float32) {
	o.ClosePriceInDouble = &v
}

// GetContractType returns the ContractType field value if set, zero value otherwise.
func (o *FutureOptions) GetContractType() PutOrCall {
	if o == nil || o.ContractType == nil {
		var ret PutOrCall
		return ret
	}
	return *o.ContractType
}

// GetContractTypeOk returns a tuple with the ContractType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetContractTypeOk() (*PutOrCall, bool) {
	if o == nil || o.ContractType == nil {
		return nil, false
	}
	return o.ContractType, true
}

// HasContractType returns a boolean if a field has been set.
func (o *FutureOptions) HasContractType() bool {
	if o != nil && o.ContractType != nil {
		return true
	}

	return false
}

// SetContractType gets a reference to the given PutOrCall and assigns it to the ContractType field.
func (o *FutureOptions) SetContractType(v PutOrCall) {
	o.ContractType = &v
}

// GetDeltaInDouble returns the DeltaInDouble field value if set, zero value otherwise.
func (o *FutureOptions) GetDeltaInDouble() float32 {
	if o == nil || o.DeltaInDouble == nil {
		var ret float32
		return ret
	}
	return *o.DeltaInDouble
}

// GetDeltaInDoubleOk returns a tuple with the DeltaInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetDeltaInDoubleOk() (*float32, bool) {
	if o == nil || o.DeltaInDouble == nil {
		return nil, false
	}
	return o.DeltaInDouble, true
}

// HasDeltaInDouble returns a boolean if a field has been set.
func (o *FutureOptions) HasDeltaInDouble() bool {
	if o != nil && o.DeltaInDouble != nil {
		return true
	}

	return false
}

// SetDeltaInDouble gets a reference to the given float32 and assigns it to the DeltaInDouble field.
func (o *FutureOptions) SetDeltaInDouble(v float32) {
	o.DeltaInDouble = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FutureOptions) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FutureOptions) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FutureOptions) SetDescription(v string) {
	o.Description = &v
}

// GetDigits returns the Digits field value if set, zero value otherwise.
func (o *FutureOptions) GetDigits() float32 {
	if o == nil || o.Digits == nil {
		var ret float32
		return ret
	}
	return *o.Digits
}

// GetDigitsOk returns a tuple with the Digits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetDigitsOk() (*float32, bool) {
	if o == nil || o.Digits == nil {
		return nil, false
	}
	return o.Digits, true
}

// HasDigits returns a boolean if a field has been set.
func (o *FutureOptions) HasDigits() bool {
	if o != nil && o.Digits != nil {
		return true
	}

	return false
}

// SetDigits gets a reference to the given float32 and assigns it to the Digits field.
func (o *FutureOptions) SetDigits(v float32) {
	o.Digits = &v
}

// GetExchangeName returns the ExchangeName field value if set, zero value otherwise.
func (o *FutureOptions) GetExchangeName() string {
	if o == nil || o.ExchangeName == nil {
		var ret string
		return ret
	}
	return *o.ExchangeName
}

// GetExchangeNameOk returns a tuple with the ExchangeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetExchangeNameOk() (*string, bool) {
	if o == nil || o.ExchangeName == nil {
		return nil, false
	}
	return o.ExchangeName, true
}

// HasExchangeName returns a boolean if a field has been set.
func (o *FutureOptions) HasExchangeName() bool {
	if o != nil && o.ExchangeName != nil {
		return true
	}

	return false
}

// SetExchangeName gets a reference to the given string and assigns it to the ExchangeName field.
func (o *FutureOptions) SetExchangeName(v string) {
	o.ExchangeName = &v
}

// GetExerciseType returns the ExerciseType field value if set, zero value otherwise.
func (o *FutureOptions) GetExerciseType() string {
	if o == nil || o.ExerciseType == nil {
		var ret string
		return ret
	}
	return *o.ExerciseType
}

// GetExerciseTypeOk returns a tuple with the ExerciseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetExerciseTypeOk() (*string, bool) {
	if o == nil || o.ExerciseType == nil {
		return nil, false
	}
	return o.ExerciseType, true
}

// HasExerciseType returns a boolean if a field has been set.
func (o *FutureOptions) HasExerciseType() bool {
	if o != nil && o.ExerciseType != nil {
		return true
	}

	return false
}

// SetExerciseType gets a reference to the given string and assigns it to the ExerciseType field.
func (o *FutureOptions) SetExerciseType(v string) {
	o.ExerciseType = &v
}

// GetExpirationType returns the ExpirationType field value if set, zero value otherwise.
func (o *FutureOptions) GetExpirationType() string {
	if o == nil || o.ExpirationType == nil {
		var ret string
		return ret
	}
	return *o.ExpirationType
}

// GetExpirationTypeOk returns a tuple with the ExpirationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetExpirationTypeOk() (*string, bool) {
	if o == nil || o.ExpirationType == nil {
		return nil, false
	}
	return o.ExpirationType, true
}

// HasExpirationType returns a boolean if a field has been set.
func (o *FutureOptions) HasExpirationType() bool {
	if o != nil && o.ExpirationType != nil {
		return true
	}

	return false
}

// SetExpirationType gets a reference to the given string and assigns it to the ExpirationType field.
func (o *FutureOptions) SetExpirationType(v string) {
	o.ExpirationType = &v
}

// GetFutureExpirationDate returns the FutureExpirationDate field value if set, zero value otherwise.
func (o *FutureOptions) GetFutureExpirationDate() float32 {
	if o == nil || o.FutureExpirationDate == nil {
		var ret float32
		return ret
	}
	return *o.FutureExpirationDate
}

// GetFutureExpirationDateOk returns a tuple with the FutureExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetFutureExpirationDateOk() (*float32, bool) {
	if o == nil || o.FutureExpirationDate == nil {
		return nil, false
	}
	return o.FutureExpirationDate, true
}

// HasFutureExpirationDate returns a boolean if a field has been set.
func (o *FutureOptions) HasFutureExpirationDate() bool {
	if o != nil && o.FutureExpirationDate != nil {
		return true
	}

	return false
}

// SetFutureExpirationDate gets a reference to the given float32 and assigns it to the FutureExpirationDate field.
func (o *FutureOptions) SetFutureExpirationDate(v float32) {
	o.FutureExpirationDate = &v
}

// GetFutureIsActive returns the FutureIsActive field value if set, zero value otherwise.
func (o *FutureOptions) GetFutureIsActive() bool {
	if o == nil || o.FutureIsActive == nil {
		var ret bool
		return ret
	}
	return *o.FutureIsActive
}

// GetFutureIsActiveOk returns a tuple with the FutureIsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetFutureIsActiveOk() (*bool, bool) {
	if o == nil || o.FutureIsActive == nil {
		return nil, false
	}
	return o.FutureIsActive, true
}

// HasFutureIsActive returns a boolean if a field has been set.
func (o *FutureOptions) HasFutureIsActive() bool {
	if o != nil && o.FutureIsActive != nil {
		return true
	}

	return false
}

// SetFutureIsActive gets a reference to the given bool and assigns it to the FutureIsActive field.
func (o *FutureOptions) SetFutureIsActive(v bool) {
	o.FutureIsActive = &v
}

// GetFutureIsTradable returns the FutureIsTradable field value if set, zero value otherwise.
func (o *FutureOptions) GetFutureIsTradable() bool {
	if o == nil || o.FutureIsTradable == nil {
		var ret bool
		return ret
	}
	return *o.FutureIsTradable
}

// GetFutureIsTradableOk returns a tuple with the FutureIsTradable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetFutureIsTradableOk() (*bool, bool) {
	if o == nil || o.FutureIsTradable == nil {
		return nil, false
	}
	return o.FutureIsTradable, true
}

// HasFutureIsTradable returns a boolean if a field has been set.
func (o *FutureOptions) HasFutureIsTradable() bool {
	if o != nil && o.FutureIsTradable != nil {
		return true
	}

	return false
}

// SetFutureIsTradable gets a reference to the given bool and assigns it to the FutureIsTradable field.
func (o *FutureOptions) SetFutureIsTradable(v bool) {
	o.FutureIsTradable = &v
}

// GetFuturePercentChange returns the FuturePercentChange field value if set, zero value otherwise.
func (o *FutureOptions) GetFuturePercentChange() float32 {
	if o == nil || o.FuturePercentChange == nil {
		var ret float32
		return ret
	}
	return *o.FuturePercentChange
}

// GetFuturePercentChangeOk returns a tuple with the FuturePercentChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetFuturePercentChangeOk() (*float32, bool) {
	if o == nil || o.FuturePercentChange == nil {
		return nil, false
	}
	return o.FuturePercentChange, true
}

// HasFuturePercentChange returns a boolean if a field has been set.
func (o *FutureOptions) HasFuturePercentChange() bool {
	if o != nil && o.FuturePercentChange != nil {
		return true
	}

	return false
}

// SetFuturePercentChange gets a reference to the given float32 and assigns it to the FuturePercentChange field.
func (o *FutureOptions) SetFuturePercentChange(v float32) {
	o.FuturePercentChange = &v
}

// GetFutureTradingHours returns the FutureTradingHours field value if set, zero value otherwise.
func (o *FutureOptions) GetFutureTradingHours() string {
	if o == nil || o.FutureTradingHours == nil {
		var ret string
		return ret
	}
	return *o.FutureTradingHours
}

// GetFutureTradingHoursOk returns a tuple with the FutureTradingHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetFutureTradingHoursOk() (*string, bool) {
	if o == nil || o.FutureTradingHours == nil {
		return nil, false
	}
	return o.FutureTradingHours, true
}

// HasFutureTradingHours returns a boolean if a field has been set.
func (o *FutureOptions) HasFutureTradingHours() bool {
	if o != nil && o.FutureTradingHours != nil {
		return true
	}

	return false
}

// SetFutureTradingHours gets a reference to the given string and assigns it to the FutureTradingHours field.
func (o *FutureOptions) SetFutureTradingHours(v string) {
	o.FutureTradingHours = &v
}

// GetGammaInDouble returns the GammaInDouble field value if set, zero value otherwise.
func (o *FutureOptions) GetGammaInDouble() float32 {
	if o == nil || o.GammaInDouble == nil {
		var ret float32
		return ret
	}
	return *o.GammaInDouble
}

// GetGammaInDoubleOk returns a tuple with the GammaInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetGammaInDoubleOk() (*float32, bool) {
	if o == nil || o.GammaInDouble == nil {
		return nil, false
	}
	return o.GammaInDouble, true
}

// HasGammaInDouble returns a boolean if a field has been set.
func (o *FutureOptions) HasGammaInDouble() bool {
	if o != nil && o.GammaInDouble != nil {
		return true
	}

	return false
}

// SetGammaInDouble gets a reference to the given float32 and assigns it to the GammaInDouble field.
func (o *FutureOptions) SetGammaInDouble(v float32) {
	o.GammaInDouble = &v
}

// GetHighPriceInDouble returns the HighPriceInDouble field value if set, zero value otherwise.
func (o *FutureOptions) GetHighPriceInDouble() float32 {
	if o == nil || o.HighPriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.HighPriceInDouble
}

// GetHighPriceInDoubleOk returns a tuple with the HighPriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetHighPriceInDoubleOk() (*float32, bool) {
	if o == nil || o.HighPriceInDouble == nil {
		return nil, false
	}
	return o.HighPriceInDouble, true
}

// HasHighPriceInDouble returns a boolean if a field has been set.
func (o *FutureOptions) HasHighPriceInDouble() bool {
	if o != nil && o.HighPriceInDouble != nil {
		return true
	}

	return false
}

// SetHighPriceInDouble gets a reference to the given float32 and assigns it to the HighPriceInDouble field.
func (o *FutureOptions) SetHighPriceInDouble(v float32) {
	o.HighPriceInDouble = &v
}

// GetInTheMoney returns the InTheMoney field value if set, zero value otherwise.
func (o *FutureOptions) GetInTheMoney() bool {
	if o == nil || o.InTheMoney == nil {
		var ret bool
		return ret
	}
	return *o.InTheMoney
}

// GetInTheMoneyOk returns a tuple with the InTheMoney field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetInTheMoneyOk() (*bool, bool) {
	if o == nil || o.InTheMoney == nil {
		return nil, false
	}
	return o.InTheMoney, true
}

// HasInTheMoney returns a boolean if a field has been set.
func (o *FutureOptions) HasInTheMoney() bool {
	if o != nil && o.InTheMoney != nil {
		return true
	}

	return false
}

// SetInTheMoney gets a reference to the given bool and assigns it to the InTheMoney field.
func (o *FutureOptions) SetInTheMoney(v bool) {
	o.InTheMoney = &v
}

// GetLastPriceInDouble returns the LastPriceInDouble field value if set, zero value otherwise.
func (o *FutureOptions) GetLastPriceInDouble() float32 {
	if o == nil || o.LastPriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.LastPriceInDouble
}

// GetLastPriceInDoubleOk returns a tuple with the LastPriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetLastPriceInDoubleOk() (*float32, bool) {
	if o == nil || o.LastPriceInDouble == nil {
		return nil, false
	}
	return o.LastPriceInDouble, true
}

// HasLastPriceInDouble returns a boolean if a field has been set.
func (o *FutureOptions) HasLastPriceInDouble() bool {
	if o != nil && o.LastPriceInDouble != nil {
		return true
	}

	return false
}

// SetLastPriceInDouble gets a reference to the given float32 and assigns it to the LastPriceInDouble field.
func (o *FutureOptions) SetLastPriceInDouble(v float32) {
	o.LastPriceInDouble = &v
}

// GetLowPriceInDouble returns the LowPriceInDouble field value if set, zero value otherwise.
func (o *FutureOptions) GetLowPriceInDouble() float32 {
	if o == nil || o.LowPriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.LowPriceInDouble
}

// GetLowPriceInDoubleOk returns a tuple with the LowPriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetLowPriceInDoubleOk() (*float32, bool) {
	if o == nil || o.LowPriceInDouble == nil {
		return nil, false
	}
	return o.LowPriceInDouble, true
}

// HasLowPriceInDouble returns a boolean if a field has been set.
func (o *FutureOptions) HasLowPriceInDouble() bool {
	if o != nil && o.LowPriceInDouble != nil {
		return true
	}

	return false
}

// SetLowPriceInDouble gets a reference to the given float32 and assigns it to the LowPriceInDouble field.
func (o *FutureOptions) SetLowPriceInDouble(v float32) {
	o.LowPriceInDouble = &v
}

// GetMark returns the Mark field value if set, zero value otherwise.
func (o *FutureOptions) GetMark() float32 {
	if o == nil || o.Mark == nil {
		var ret float32
		return ret
	}
	return *o.Mark
}

// GetMarkOk returns a tuple with the Mark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetMarkOk() (*float32, bool) {
	if o == nil || o.Mark == nil {
		return nil, false
	}
	return o.Mark, true
}

// HasMark returns a boolean if a field has been set.
func (o *FutureOptions) HasMark() bool {
	if o != nil && o.Mark != nil {
		return true
	}

	return false
}

// SetMark gets a reference to the given float32 and assigns it to the Mark field.
func (o *FutureOptions) SetMark(v float32) {
	o.Mark = &v
}

// GetMoneyIntrinsicValueInDouble returns the MoneyIntrinsicValueInDouble field value if set, zero value otherwise.
func (o *FutureOptions) GetMoneyIntrinsicValueInDouble() float32 {
	if o == nil || o.MoneyIntrinsicValueInDouble == nil {
		var ret float32
		return ret
	}
	return *o.MoneyIntrinsicValueInDouble
}

// GetMoneyIntrinsicValueInDoubleOk returns a tuple with the MoneyIntrinsicValueInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetMoneyIntrinsicValueInDoubleOk() (*float32, bool) {
	if o == nil || o.MoneyIntrinsicValueInDouble == nil {
		return nil, false
	}
	return o.MoneyIntrinsicValueInDouble, true
}

// HasMoneyIntrinsicValueInDouble returns a boolean if a field has been set.
func (o *FutureOptions) HasMoneyIntrinsicValueInDouble() bool {
	if o != nil && o.MoneyIntrinsicValueInDouble != nil {
		return true
	}

	return false
}

// SetMoneyIntrinsicValueInDouble gets a reference to the given float32 and assigns it to the MoneyIntrinsicValueInDouble field.
func (o *FutureOptions) SetMoneyIntrinsicValueInDouble(v float32) {
	o.MoneyIntrinsicValueInDouble = &v
}

// GetMultiplierInDouble returns the MultiplierInDouble field value if set, zero value otherwise.
func (o *FutureOptions) GetMultiplierInDouble() float32 {
	if o == nil || o.MultiplierInDouble == nil {
		var ret float32
		return ret
	}
	return *o.MultiplierInDouble
}

// GetMultiplierInDoubleOk returns a tuple with the MultiplierInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetMultiplierInDoubleOk() (*float32, bool) {
	if o == nil || o.MultiplierInDouble == nil {
		return nil, false
	}
	return o.MultiplierInDouble, true
}

// HasMultiplierInDouble returns a boolean if a field has been set.
func (o *FutureOptions) HasMultiplierInDouble() bool {
	if o != nil && o.MultiplierInDouble != nil {
		return true
	}

	return false
}

// SetMultiplierInDouble gets a reference to the given float32 and assigns it to the MultiplierInDouble field.
func (o *FutureOptions) SetMultiplierInDouble(v float32) {
	o.MultiplierInDouble = &v
}

// GetNetChangeInDouble returns the NetChangeInDouble field value if set, zero value otherwise.
func (o *FutureOptions) GetNetChangeInDouble() float32 {
	if o == nil || o.NetChangeInDouble == nil {
		var ret float32
		return ret
	}
	return *o.NetChangeInDouble
}

// GetNetChangeInDoubleOk returns a tuple with the NetChangeInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetNetChangeInDoubleOk() (*float32, bool) {
	if o == nil || o.NetChangeInDouble == nil {
		return nil, false
	}
	return o.NetChangeInDouble, true
}

// HasNetChangeInDouble returns a boolean if a field has been set.
func (o *FutureOptions) HasNetChangeInDouble() bool {
	if o != nil && o.NetChangeInDouble != nil {
		return true
	}

	return false
}

// SetNetChangeInDouble gets a reference to the given float32 and assigns it to the NetChangeInDouble field.
func (o *FutureOptions) SetNetChangeInDouble(v float32) {
	o.NetChangeInDouble = &v
}

// GetOpenInterest returns the OpenInterest field value if set, zero value otherwise.
func (o *FutureOptions) GetOpenInterest() float32 {
	if o == nil || o.OpenInterest == nil {
		var ret float32
		return ret
	}
	return *o.OpenInterest
}

// GetOpenInterestOk returns a tuple with the OpenInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetOpenInterestOk() (*float32, bool) {
	if o == nil || o.OpenInterest == nil {
		return nil, false
	}
	return o.OpenInterest, true
}

// HasOpenInterest returns a boolean if a field has been set.
func (o *FutureOptions) HasOpenInterest() bool {
	if o != nil && o.OpenInterest != nil {
		return true
	}

	return false
}

// SetOpenInterest gets a reference to the given float32 and assigns it to the OpenInterest field.
func (o *FutureOptions) SetOpenInterest(v float32) {
	o.OpenInterest = &v
}

// GetOpenPriceInDouble returns the OpenPriceInDouble field value if set, zero value otherwise.
func (o *FutureOptions) GetOpenPriceInDouble() float32 {
	if o == nil || o.OpenPriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.OpenPriceInDouble
}

// GetOpenPriceInDoubleOk returns a tuple with the OpenPriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetOpenPriceInDoubleOk() (*float32, bool) {
	if o == nil || o.OpenPriceInDouble == nil {
		return nil, false
	}
	return o.OpenPriceInDouble, true
}

// HasOpenPriceInDouble returns a boolean if a field has been set.
func (o *FutureOptions) HasOpenPriceInDouble() bool {
	if o != nil && o.OpenPriceInDouble != nil {
		return true
	}

	return false
}

// SetOpenPriceInDouble gets a reference to the given float32 and assigns it to the OpenPriceInDouble field.
func (o *FutureOptions) SetOpenPriceInDouble(v float32) {
	o.OpenPriceInDouble = &v
}

// GetRhoInDouble returns the RhoInDouble field value if set, zero value otherwise.
func (o *FutureOptions) GetRhoInDouble() float32 {
	if o == nil || o.RhoInDouble == nil {
		var ret float32
		return ret
	}
	return *o.RhoInDouble
}

// GetRhoInDoubleOk returns a tuple with the RhoInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetRhoInDoubleOk() (*float32, bool) {
	if o == nil || o.RhoInDouble == nil {
		return nil, false
	}
	return o.RhoInDouble, true
}

// HasRhoInDouble returns a boolean if a field has been set.
func (o *FutureOptions) HasRhoInDouble() bool {
	if o != nil && o.RhoInDouble != nil {
		return true
	}

	return false
}

// SetRhoInDouble gets a reference to the given float32 and assigns it to the RhoInDouble field.
func (o *FutureOptions) SetRhoInDouble(v float32) {
	o.RhoInDouble = &v
}

// GetSecurityStatus returns the SecurityStatus field value if set, zero value otherwise.
func (o *FutureOptions) GetSecurityStatus() string {
	if o == nil || o.SecurityStatus == nil {
		var ret string
		return ret
	}
	return *o.SecurityStatus
}

// GetSecurityStatusOk returns a tuple with the SecurityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetSecurityStatusOk() (*string, bool) {
	if o == nil || o.SecurityStatus == nil {
		return nil, false
	}
	return o.SecurityStatus, true
}

// HasSecurityStatus returns a boolean if a field has been set.
func (o *FutureOptions) HasSecurityStatus() bool {
	if o != nil && o.SecurityStatus != nil {
		return true
	}

	return false
}

// SetSecurityStatus gets a reference to the given string and assigns it to the SecurityStatus field.
func (o *FutureOptions) SetSecurityStatus(v string) {
	o.SecurityStatus = &v
}

// GetStrikePriceInDouble returns the StrikePriceInDouble field value if set, zero value otherwise.
func (o *FutureOptions) GetStrikePriceInDouble() float32 {
	if o == nil || o.StrikePriceInDouble == nil {
		var ret float32
		return ret
	}
	return *o.StrikePriceInDouble
}

// GetStrikePriceInDoubleOk returns a tuple with the StrikePriceInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetStrikePriceInDoubleOk() (*float32, bool) {
	if o == nil || o.StrikePriceInDouble == nil {
		return nil, false
	}
	return o.StrikePriceInDouble, true
}

// HasStrikePriceInDouble returns a boolean if a field has been set.
func (o *FutureOptions) HasStrikePriceInDouble() bool {
	if o != nil && o.StrikePriceInDouble != nil {
		return true
	}

	return false
}

// SetStrikePriceInDouble gets a reference to the given float32 and assigns it to the StrikePriceInDouble field.
func (o *FutureOptions) SetStrikePriceInDouble(v float32) {
	o.StrikePriceInDouble = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *FutureOptions) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *FutureOptions) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *FutureOptions) SetSymbol(v string) {
	o.Symbol = &v
}

// GetThetaInDouble returns the ThetaInDouble field value if set, zero value otherwise.
func (o *FutureOptions) GetThetaInDouble() float32 {
	if o == nil || o.ThetaInDouble == nil {
		var ret float32
		return ret
	}
	return *o.ThetaInDouble
}

// GetThetaInDoubleOk returns a tuple with the ThetaInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetThetaInDoubleOk() (*float32, bool) {
	if o == nil || o.ThetaInDouble == nil {
		return nil, false
	}
	return o.ThetaInDouble, true
}

// HasThetaInDouble returns a boolean if a field has been set.
func (o *FutureOptions) HasThetaInDouble() bool {
	if o != nil && o.ThetaInDouble != nil {
		return true
	}

	return false
}

// SetThetaInDouble gets a reference to the given float32 and assigns it to the ThetaInDouble field.
func (o *FutureOptions) SetThetaInDouble(v float32) {
	o.ThetaInDouble = &v
}

// GetTick returns the Tick field value if set, zero value otherwise.
func (o *FutureOptions) GetTick() float32 {
	if o == nil || o.Tick == nil {
		var ret float32
		return ret
	}
	return *o.Tick
}

// GetTickOk returns a tuple with the Tick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetTickOk() (*float32, bool) {
	if o == nil || o.Tick == nil {
		return nil, false
	}
	return o.Tick, true
}

// HasTick returns a boolean if a field has been set.
func (o *FutureOptions) HasTick() bool {
	if o != nil && o.Tick != nil {
		return true
	}

	return false
}

// SetTick gets a reference to the given float32 and assigns it to the Tick field.
func (o *FutureOptions) SetTick(v float32) {
	o.Tick = &v
}

// GetTickAmount returns the TickAmount field value if set, zero value otherwise.
func (o *FutureOptions) GetTickAmount() float32 {
	if o == nil || o.TickAmount == nil {
		var ret float32
		return ret
	}
	return *o.TickAmount
}

// GetTickAmountOk returns a tuple with the TickAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetTickAmountOk() (*float32, bool) {
	if o == nil || o.TickAmount == nil {
		return nil, false
	}
	return o.TickAmount, true
}

// HasTickAmount returns a boolean if a field has been set.
func (o *FutureOptions) HasTickAmount() bool {
	if o != nil && o.TickAmount != nil {
		return true
	}

	return false
}

// SetTickAmount gets a reference to the given float32 and assigns it to the TickAmount field.
func (o *FutureOptions) SetTickAmount(v float32) {
	o.TickAmount = &v
}

// GetTimeValueInDouble returns the TimeValueInDouble field value if set, zero value otherwise.
func (o *FutureOptions) GetTimeValueInDouble() float32 {
	if o == nil || o.TimeValueInDouble == nil {
		var ret float32
		return ret
	}
	return *o.TimeValueInDouble
}

// GetTimeValueInDoubleOk returns a tuple with the TimeValueInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetTimeValueInDoubleOk() (*float32, bool) {
	if o == nil || o.TimeValueInDouble == nil {
		return nil, false
	}
	return o.TimeValueInDouble, true
}

// HasTimeValueInDouble returns a boolean if a field has been set.
func (o *FutureOptions) HasTimeValueInDouble() bool {
	if o != nil && o.TimeValueInDouble != nil {
		return true
	}

	return false
}

// SetTimeValueInDouble gets a reference to the given float32 and assigns it to the TimeValueInDouble field.
func (o *FutureOptions) SetTimeValueInDouble(v float32) {
	o.TimeValueInDouble = &v
}

// GetUnderlying returns the Underlying field value if set, zero value otherwise.
func (o *FutureOptions) GetUnderlying() string {
	if o == nil || o.Underlying == nil {
		var ret string
		return ret
	}
	return *o.Underlying
}

// GetUnderlyingOk returns a tuple with the Underlying field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetUnderlyingOk() (*string, bool) {
	if o == nil || o.Underlying == nil {
		return nil, false
	}
	return o.Underlying, true
}

// HasUnderlying returns a boolean if a field has been set.
func (o *FutureOptions) HasUnderlying() bool {
	if o != nil && o.Underlying != nil {
		return true
	}

	return false
}

// SetUnderlying gets a reference to the given string and assigns it to the Underlying field.
func (o *FutureOptions) SetUnderlying(v string) {
	o.Underlying = &v
}

// GetVegaInDouble returns the VegaInDouble field value if set, zero value otherwise.
func (o *FutureOptions) GetVegaInDouble() float32 {
	if o == nil || o.VegaInDouble == nil {
		var ret float32
		return ret
	}
	return *o.VegaInDouble
}

// GetVegaInDoubleOk returns a tuple with the VegaInDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetVegaInDoubleOk() (*float32, bool) {
	if o == nil || o.VegaInDouble == nil {
		return nil, false
	}
	return o.VegaInDouble, true
}

// HasVegaInDouble returns a boolean if a field has been set.
func (o *FutureOptions) HasVegaInDouble() bool {
	if o != nil && o.VegaInDouble != nil {
		return true
	}

	return false
}

// SetVegaInDouble gets a reference to the given float32 and assigns it to the VegaInDouble field.
func (o *FutureOptions) SetVegaInDouble(v float32) {
	o.VegaInDouble = &v
}

// GetVolatility returns the Volatility field value if set, zero value otherwise.
func (o *FutureOptions) GetVolatility() float32 {
	if o == nil || o.Volatility == nil {
		var ret float32
		return ret
	}
	return *o.Volatility
}

// GetVolatilityOk returns a tuple with the Volatility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureOptions) GetVolatilityOk() (*float32, bool) {
	if o == nil || o.Volatility == nil {
		return nil, false
	}
	return o.Volatility, true
}

// HasVolatility returns a boolean if a field has been set.
func (o *FutureOptions) HasVolatility() bool {
	if o != nil && o.Volatility != nil {
		return true
	}

	return false
}

// SetVolatility gets a reference to the given float32 and assigns it to the Volatility field.
func (o *FutureOptions) SetVolatility(v float32) {
	o.Volatility = &v
}

func (o FutureOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AskPriceInDouble != nil {
		toSerialize["askPriceInDouble"] = o.AskPriceInDouble
	}
	if o.BidPriceInDouble != nil {
		toSerialize["bidPriceInDouble"] = o.BidPriceInDouble
	}
	if o.ClosePriceInDouble != nil {
		toSerialize["closePriceInDouble"] = o.ClosePriceInDouble
	}
	if o.ContractType != nil {
		toSerialize["contractType"] = o.ContractType
	}
	if o.DeltaInDouble != nil {
		toSerialize["deltaInDouble"] = o.DeltaInDouble
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Digits != nil {
		toSerialize["digits"] = o.Digits
	}
	if o.ExchangeName != nil {
		toSerialize["exchangeName"] = o.ExchangeName
	}
	if o.ExerciseType != nil {
		toSerialize["exerciseType"] = o.ExerciseType
	}
	if o.ExpirationType != nil {
		toSerialize["expirationType"] = o.ExpirationType
	}
	if o.FutureExpirationDate != nil {
		toSerialize["futureExpirationDate"] = o.FutureExpirationDate
	}
	if o.FutureIsActive != nil {
		toSerialize["futureIsActive"] = o.FutureIsActive
	}
	if o.FutureIsTradable != nil {
		toSerialize["futureIsTradable"] = o.FutureIsTradable
	}
	if o.FuturePercentChange != nil {
		toSerialize["futurePercentChange"] = o.FuturePercentChange
	}
	if o.FutureTradingHours != nil {
		toSerialize["futureTradingHours"] = o.FutureTradingHours
	}
	if o.GammaInDouble != nil {
		toSerialize["gammaInDouble"] = o.GammaInDouble
	}
	if o.HighPriceInDouble != nil {
		toSerialize["highPriceInDouble"] = o.HighPriceInDouble
	}
	if o.InTheMoney != nil {
		toSerialize["inTheMoney"] = o.InTheMoney
	}
	if o.LastPriceInDouble != nil {
		toSerialize["lastPriceInDouble"] = o.LastPriceInDouble
	}
	if o.LowPriceInDouble != nil {
		toSerialize["lowPriceInDouble"] = o.LowPriceInDouble
	}
	if o.Mark != nil {
		toSerialize["mark"] = o.Mark
	}
	if o.MoneyIntrinsicValueInDouble != nil {
		toSerialize["moneyIntrinsicValueInDouble"] = o.MoneyIntrinsicValueInDouble
	}
	if o.MultiplierInDouble != nil {
		toSerialize["multiplierInDouble"] = o.MultiplierInDouble
	}
	if o.NetChangeInDouble != nil {
		toSerialize["netChangeInDouble"] = o.NetChangeInDouble
	}
	if o.OpenInterest != nil {
		toSerialize["openInterest"] = o.OpenInterest
	}
	if o.OpenPriceInDouble != nil {
		toSerialize["openPriceInDouble"] = o.OpenPriceInDouble
	}
	if o.RhoInDouble != nil {
		toSerialize["rhoInDouble"] = o.RhoInDouble
	}
	if o.SecurityStatus != nil {
		toSerialize["securityStatus"] = o.SecurityStatus
	}
	if o.StrikePriceInDouble != nil {
		toSerialize["strikePriceInDouble"] = o.StrikePriceInDouble
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.ThetaInDouble != nil {
		toSerialize["thetaInDouble"] = o.ThetaInDouble
	}
	if o.Tick != nil {
		toSerialize["tick"] = o.Tick
	}
	if o.TickAmount != nil {
		toSerialize["tickAmount"] = o.TickAmount
	}
	if o.TimeValueInDouble != nil {
		toSerialize["timeValueInDouble"] = o.TimeValueInDouble
	}
	if o.Underlying != nil {
		toSerialize["underlying"] = o.Underlying
	}
	if o.VegaInDouble != nil {
		toSerialize["vegaInDouble"] = o.VegaInDouble
	}
	if o.Volatility != nil {
		toSerialize["volatility"] = o.Volatility
	}
	return json.Marshal(toSerialize)
}

type NullableFutureOptions struct {
	value *FutureOptions
	isSet bool
}

func (v NullableFutureOptions) Get() *FutureOptions {
	return v.value
}

func (v *NullableFutureOptions) Set(val *FutureOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableFutureOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableFutureOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFutureOptions(val *FutureOptions) *NullableFutureOptions {
	return &NullableFutureOptions{value: val, isSet: true}
}

func (v NullableFutureOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFutureOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


