/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Watchlist struct for Watchlist
type Watchlist struct {
	AccountId *string `json:"accountId,omitempty"`
	Name *string `json:"name,omitempty"`
	Status *string `json:"status,omitempty"`
	WatchlistId *string `json:"watchlistId,omitempty"`
	WatchlistItems *[]WatchlistWatchlistItems `json:"watchlistItems,omitempty"`
}

// NewWatchlist instantiates a new Watchlist object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWatchlist() *Watchlist {
	this := Watchlist{}
	return &this
}

// NewWatchlistWithDefaults instantiates a new Watchlist object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWatchlistWithDefaults() *Watchlist {
	this := Watchlist{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *Watchlist) GetAccountId() string {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Watchlist) GetAccountIdOk() (*string, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *Watchlist) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *Watchlist) SetAccountId(v string) {
	o.AccountId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Watchlist) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Watchlist) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Watchlist) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Watchlist) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Watchlist) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Watchlist) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Watchlist) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Watchlist) SetStatus(v string) {
	o.Status = &v
}

// GetWatchlistId returns the WatchlistId field value if set, zero value otherwise.
func (o *Watchlist) GetWatchlistId() string {
	if o == nil || o.WatchlistId == nil {
		var ret string
		return ret
	}
	return *o.WatchlistId
}

// GetWatchlistIdOk returns a tuple with the WatchlistId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Watchlist) GetWatchlistIdOk() (*string, bool) {
	if o == nil || o.WatchlistId == nil {
		return nil, false
	}
	return o.WatchlistId, true
}

// HasWatchlistId returns a boolean if a field has been set.
func (o *Watchlist) HasWatchlistId() bool {
	if o != nil && o.WatchlistId != nil {
		return true
	}

	return false
}

// SetWatchlistId gets a reference to the given string and assigns it to the WatchlistId field.
func (o *Watchlist) SetWatchlistId(v string) {
	o.WatchlistId = &v
}

// GetWatchlistItems returns the WatchlistItems field value if set, zero value otherwise.
func (o *Watchlist) GetWatchlistItems() []WatchlistWatchlistItems {
	if o == nil || o.WatchlistItems == nil {
		var ret []WatchlistWatchlistItems
		return ret
	}
	return *o.WatchlistItems
}

// GetWatchlistItemsOk returns a tuple with the WatchlistItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Watchlist) GetWatchlistItemsOk() (*[]WatchlistWatchlistItems, bool) {
	if o == nil || o.WatchlistItems == nil {
		return nil, false
	}
	return o.WatchlistItems, true
}

// HasWatchlistItems returns a boolean if a field has been set.
func (o *Watchlist) HasWatchlistItems() bool {
	if o != nil && o.WatchlistItems != nil {
		return true
	}

	return false
}

// SetWatchlistItems gets a reference to the given []WatchlistWatchlistItems and assigns it to the WatchlistItems field.
func (o *Watchlist) SetWatchlistItems(v []WatchlistWatchlistItems) {
	o.WatchlistItems = &v
}

func (o Watchlist) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountId != nil {
		toSerialize["accountId"] = o.AccountId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.WatchlistId != nil {
		toSerialize["watchlistId"] = o.WatchlistId
	}
	if o.WatchlistItems != nil {
		toSerialize["watchlistItems"] = o.WatchlistItems
	}
	return json.Marshal(toSerialize)
}

type NullableWatchlist struct {
	value *Watchlist
	isSet bool
}

func (v NullableWatchlist) Get() *Watchlist {
	return v.value
}

func (v *NullableWatchlist) Set(val *Watchlist) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchlist) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchlist) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchlist(val *Watchlist) *NullableWatchlist {
	return &NullableWatchlist{value: val, isSet: true}
}

func (v NullableWatchlist) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchlist) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


