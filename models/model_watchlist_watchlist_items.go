/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@protonmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// WatchlistWatchlistItems struct for WatchlistWatchlistItems
type WatchlistWatchlistItems struct {
	AveragePrice *float32 `json:"averagePrice,omitempty"`
	Commission *float32 `json:"commission,omitempty"`
	Instrument *WatchlistInstrument `json:"instrument,omitempty"`
	PurchasedDate *string `json:"purchasedDate,omitempty"`
	Quantity *float32 `json:"quantity,omitempty"`
	SequenceId *float32 `json:"sequenceId,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewWatchlistWatchlistItems instantiates a new WatchlistWatchlistItems object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWatchlistWatchlistItems() *WatchlistWatchlistItems {
	this := WatchlistWatchlistItems{}
	return &this
}

// NewWatchlistWatchlistItemsWithDefaults instantiates a new WatchlistWatchlistItems object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWatchlistWatchlistItemsWithDefaults() *WatchlistWatchlistItems {
	this := WatchlistWatchlistItems{}
	return &this
}

// GetAveragePrice returns the AveragePrice field value if set, zero value otherwise.
func (o *WatchlistWatchlistItems) GetAveragePrice() float32 {
	if o == nil || o.AveragePrice == nil {
		var ret float32
		return ret
	}
	return *o.AveragePrice
}

// GetAveragePriceOk returns a tuple with the AveragePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistWatchlistItems) GetAveragePriceOk() (*float32, bool) {
	if o == nil || o.AveragePrice == nil {
		return nil, false
	}
	return o.AveragePrice, true
}

// HasAveragePrice returns a boolean if a field has been set.
func (o *WatchlistWatchlistItems) HasAveragePrice() bool {
	if o != nil && o.AveragePrice != nil {
		return true
	}

	return false
}

// SetAveragePrice gets a reference to the given float32 and assigns it to the AveragePrice field.
func (o *WatchlistWatchlistItems) SetAveragePrice(v float32) {
	o.AveragePrice = &v
}

// GetCommission returns the Commission field value if set, zero value otherwise.
func (o *WatchlistWatchlistItems) GetCommission() float32 {
	if o == nil || o.Commission == nil {
		var ret float32
		return ret
	}
	return *o.Commission
}

// GetCommissionOk returns a tuple with the Commission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistWatchlistItems) GetCommissionOk() (*float32, bool) {
	if o == nil || o.Commission == nil {
		return nil, false
	}
	return o.Commission, true
}

// HasCommission returns a boolean if a field has been set.
func (o *WatchlistWatchlistItems) HasCommission() bool {
	if o != nil && o.Commission != nil {
		return true
	}

	return false
}

// SetCommission gets a reference to the given float32 and assigns it to the Commission field.
func (o *WatchlistWatchlistItems) SetCommission(v float32) {
	o.Commission = &v
}

// GetInstrument returns the Instrument field value if set, zero value otherwise.
func (o *WatchlistWatchlistItems) GetInstrument() WatchlistInstrument {
	if o == nil || o.Instrument == nil {
		var ret WatchlistInstrument
		return ret
	}
	return *o.Instrument
}

// GetInstrumentOk returns a tuple with the Instrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistWatchlistItems) GetInstrumentOk() (*WatchlistInstrument, bool) {
	if o == nil || o.Instrument == nil {
		return nil, false
	}
	return o.Instrument, true
}

// HasInstrument returns a boolean if a field has been set.
func (o *WatchlistWatchlistItems) HasInstrument() bool {
	if o != nil && o.Instrument != nil {
		return true
	}

	return false
}

// SetInstrument gets a reference to the given WatchlistInstrument and assigns it to the Instrument field.
func (o *WatchlistWatchlistItems) SetInstrument(v WatchlistInstrument) {
	o.Instrument = &v
}

// GetPurchasedDate returns the PurchasedDate field value if set, zero value otherwise.
func (o *WatchlistWatchlistItems) GetPurchasedDate() string {
	if o == nil || o.PurchasedDate == nil {
		var ret string
		return ret
	}
	return *o.PurchasedDate
}

// GetPurchasedDateOk returns a tuple with the PurchasedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistWatchlistItems) GetPurchasedDateOk() (*string, bool) {
	if o == nil || o.PurchasedDate == nil {
		return nil, false
	}
	return o.PurchasedDate, true
}

// HasPurchasedDate returns a boolean if a field has been set.
func (o *WatchlistWatchlistItems) HasPurchasedDate() bool {
	if o != nil && o.PurchasedDate != nil {
		return true
	}

	return false
}

// SetPurchasedDate gets a reference to the given string and assigns it to the PurchasedDate field.
func (o *WatchlistWatchlistItems) SetPurchasedDate(v string) {
	o.PurchasedDate = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *WatchlistWatchlistItems) GetQuantity() float32 {
	if o == nil || o.Quantity == nil {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistWatchlistItems) GetQuantityOk() (*float32, bool) {
	if o == nil || o.Quantity == nil {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *WatchlistWatchlistItems) HasQuantity() bool {
	if o != nil && o.Quantity != nil {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *WatchlistWatchlistItems) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetSequenceId returns the SequenceId field value if set, zero value otherwise.
func (o *WatchlistWatchlistItems) GetSequenceId() float32 {
	if o == nil || o.SequenceId == nil {
		var ret float32
		return ret
	}
	return *o.SequenceId
}

// GetSequenceIdOk returns a tuple with the SequenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistWatchlistItems) GetSequenceIdOk() (*float32, bool) {
	if o == nil || o.SequenceId == nil {
		return nil, false
	}
	return o.SequenceId, true
}

// HasSequenceId returns a boolean if a field has been set.
func (o *WatchlistWatchlistItems) HasSequenceId() bool {
	if o != nil && o.SequenceId != nil {
		return true
	}

	return false
}

// SetSequenceId gets a reference to the given float32 and assigns it to the SequenceId field.
func (o *WatchlistWatchlistItems) SetSequenceId(v float32) {
	o.SequenceId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WatchlistWatchlistItems) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchlistWatchlistItems) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WatchlistWatchlistItems) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *WatchlistWatchlistItems) SetStatus(v string) {
	o.Status = &v
}

func (o WatchlistWatchlistItems) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AveragePrice != nil {
		toSerialize["averagePrice"] = o.AveragePrice
	}
	if o.Commission != nil {
		toSerialize["commission"] = o.Commission
	}
	if o.Instrument != nil {
		toSerialize["instrument"] = o.Instrument
	}
	if o.PurchasedDate != nil {
		toSerialize["purchasedDate"] = o.PurchasedDate
	}
	if o.Quantity != nil {
		toSerialize["quantity"] = o.Quantity
	}
	if o.SequenceId != nil {
		toSerialize["sequenceId"] = o.SequenceId
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableWatchlistWatchlistItems struct {
	value *WatchlistWatchlistItems
	isSet bool
}

func (v NullableWatchlistWatchlistItems) Get() *WatchlistWatchlistItems {
	return v.value
}

func (v *NullableWatchlistWatchlistItems) Set(val *WatchlistWatchlistItems) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchlistWatchlistItems) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchlistWatchlistItems) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchlistWatchlistItems(val *WatchlistWatchlistItems) *NullableWatchlistWatchlistItems {
	return &NullableWatchlistWatchlistItems{value: val, isSet: true}
}

func (v NullableWatchlistWatchlistItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchlistWatchlistItems) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


